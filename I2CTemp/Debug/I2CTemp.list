
I2CTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800522c  0800522c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080052a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080052a4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e48e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f10  00000000  00000000  0002e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00030f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001856a  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb4a  00000000  00000000  00049f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009955e  00000000  00000000  00058a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000f2014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080050ac 	.word	0x080050ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080050ac 	.word	0x080050ac

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f81e 	bl	8000484 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_f2uiz>:
 8000454:	219e      	movs	r1, #158	; 0x9e
 8000456:	b510      	push	{r4, lr}
 8000458:	05c9      	lsls	r1, r1, #23
 800045a:	1c04      	adds	r4, r0, #0
 800045c:	f000 ff26 	bl	80012ac <__aeabi_fcmpge>
 8000460:	2800      	cmp	r0, #0
 8000462:	d103      	bne.n	800046c <__aeabi_f2uiz+0x18>
 8000464:	1c20      	adds	r0, r4, #0
 8000466:	f000 fbad 	bl	8000bc4 <__aeabi_f2iz>
 800046a:	bd10      	pop	{r4, pc}
 800046c:	219e      	movs	r1, #158	; 0x9e
 800046e:	1c20      	adds	r0, r4, #0
 8000470:	05c9      	lsls	r1, r1, #23
 8000472:	f000 f9f9 	bl	8000868 <__aeabi_fsub>
 8000476:	f000 fba5 	bl	8000bc4 <__aeabi_f2iz>
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	061b      	lsls	r3, r3, #24
 800047e:	469c      	mov	ip, r3
 8000480:	4460      	add	r0, ip
 8000482:	e7f2      	b.n	800046a <__aeabi_f2uiz+0x16>

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 ff2a 	bl	80012fc <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 ff25 	bl	80012fc <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fmul>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	464f      	mov	r7, r9
 8000620:	4646      	mov	r6, r8
 8000622:	46d6      	mov	lr, sl
 8000624:	0244      	lsls	r4, r0, #9
 8000626:	0045      	lsls	r5, r0, #1
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	1c0f      	adds	r7, r1, #0
 800062e:	0e2d      	lsrs	r5, r5, #24
 8000630:	0fc6      	lsrs	r6, r0, #31
 8000632:	2d00      	cmp	r5, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_fmul+0x1c>
 8000636:	e08d      	b.n	8000754 <__aeabi_fmul+0x138>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fmul+0x22>
 800063c:	e092      	b.n	8000764 <__aeabi_fmul+0x148>
 800063e:	2300      	movs	r3, #0
 8000640:	2080      	movs	r0, #128	; 0x80
 8000642:	4699      	mov	r9, r3
 8000644:	469a      	mov	sl, r3
 8000646:	00e4      	lsls	r4, r4, #3
 8000648:	04c0      	lsls	r0, r0, #19
 800064a:	4304      	orrs	r4, r0
 800064c:	3d7f      	subs	r5, #127	; 0x7f
 800064e:	0278      	lsls	r0, r7, #9
 8000650:	0a43      	lsrs	r3, r0, #9
 8000652:	4698      	mov	r8, r3
 8000654:	007b      	lsls	r3, r7, #1
 8000656:	0e1b      	lsrs	r3, r3, #24
 8000658:	0fff      	lsrs	r7, r7, #31
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fmul+0x44>
 800065e:	e070      	b.n	8000742 <__aeabi_fmul+0x126>
 8000660:	2bff      	cmp	r3, #255	; 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fmul+0x4a>
 8000664:	e086      	b.n	8000774 <__aeabi_fmul+0x158>
 8000666:	4642      	mov	r2, r8
 8000668:	00d0      	lsls	r0, r2, #3
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	3b7f      	subs	r3, #127	; 0x7f
 800066e:	18ed      	adds	r5, r5, r3
 8000670:	2300      	movs	r3, #0
 8000672:	04d2      	lsls	r2, r2, #19
 8000674:	4302      	orrs	r2, r0
 8000676:	4690      	mov	r8, r2
 8000678:	469c      	mov	ip, r3
 800067a:	0031      	movs	r1, r6
 800067c:	464b      	mov	r3, r9
 800067e:	4079      	eors	r1, r7
 8000680:	1c68      	adds	r0, r5, #1
 8000682:	2b0f      	cmp	r3, #15
 8000684:	d81c      	bhi.n	80006c0 <__aeabi_fmul+0xa4>
 8000686:	4a76      	ldr	r2, [pc, #472]	; (8000860 <__aeabi_fmul+0x244>)
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	58d3      	ldr	r3, [r2, r3]
 800068c:	469f      	mov	pc, r3
 800068e:	0039      	movs	r1, r7
 8000690:	4644      	mov	r4, r8
 8000692:	46e2      	mov	sl, ip
 8000694:	4653      	mov	r3, sl
 8000696:	2b02      	cmp	r3, #2
 8000698:	d00f      	beq.n	80006ba <__aeabi_fmul+0x9e>
 800069a:	2b03      	cmp	r3, #3
 800069c:	d100      	bne.n	80006a0 <__aeabi_fmul+0x84>
 800069e:	e0d7      	b.n	8000850 <__aeabi_fmul+0x234>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d137      	bne.n	8000714 <__aeabi_fmul+0xf8>
 80006a4:	2000      	movs	r0, #0
 80006a6:	2400      	movs	r4, #0
 80006a8:	05c0      	lsls	r0, r0, #23
 80006aa:	4320      	orrs	r0, r4
 80006ac:	07c9      	lsls	r1, r1, #31
 80006ae:	4308      	orrs	r0, r1
 80006b0:	bce0      	pop	{r5, r6, r7}
 80006b2:	46ba      	mov	sl, r7
 80006b4:	46b1      	mov	r9, r6
 80006b6:	46a8      	mov	r8, r5
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	20ff      	movs	r0, #255	; 0xff
 80006bc:	2400      	movs	r4, #0
 80006be:	e7f3      	b.n	80006a8 <__aeabi_fmul+0x8c>
 80006c0:	0c26      	lsrs	r6, r4, #16
 80006c2:	0424      	lsls	r4, r4, #16
 80006c4:	0c22      	lsrs	r2, r4, #16
 80006c6:	4644      	mov	r4, r8
 80006c8:	0424      	lsls	r4, r4, #16
 80006ca:	0c24      	lsrs	r4, r4, #16
 80006cc:	4643      	mov	r3, r8
 80006ce:	0027      	movs	r7, r4
 80006d0:	0c1b      	lsrs	r3, r3, #16
 80006d2:	4357      	muls	r7, r2
 80006d4:	4374      	muls	r4, r6
 80006d6:	435a      	muls	r2, r3
 80006d8:	435e      	muls	r6, r3
 80006da:	1912      	adds	r2, r2, r4
 80006dc:	0c3b      	lsrs	r3, r7, #16
 80006de:	189b      	adds	r3, r3, r2
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d903      	bls.n	80006ec <__aeabi_fmul+0xd0>
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0252      	lsls	r2, r2, #9
 80006e8:	4694      	mov	ip, r2
 80006ea:	4466      	add	r6, ip
 80006ec:	043f      	lsls	r7, r7, #16
 80006ee:	041a      	lsls	r2, r3, #16
 80006f0:	0c3f      	lsrs	r7, r7, #16
 80006f2:	19d2      	adds	r2, r2, r7
 80006f4:	0194      	lsls	r4, r2, #6
 80006f6:	1e67      	subs	r7, r4, #1
 80006f8:	41bc      	sbcs	r4, r7
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	0e92      	lsrs	r2, r2, #26
 80006fe:	199b      	adds	r3, r3, r6
 8000700:	4314      	orrs	r4, r2
 8000702:	019b      	lsls	r3, r3, #6
 8000704:	431c      	orrs	r4, r3
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	d400      	bmi.n	800070c <__aeabi_fmul+0xf0>
 800070a:	e09b      	b.n	8000844 <__aeabi_fmul+0x228>
 800070c:	2301      	movs	r3, #1
 800070e:	0862      	lsrs	r2, r4, #1
 8000710:	401c      	ands	r4, r3
 8000712:	4314      	orrs	r4, r2
 8000714:	0002      	movs	r2, r0
 8000716:	327f      	adds	r2, #127	; 0x7f
 8000718:	2a00      	cmp	r2, #0
 800071a:	dd64      	ble.n	80007e6 <__aeabi_fmul+0x1ca>
 800071c:	0763      	lsls	r3, r4, #29
 800071e:	d004      	beq.n	800072a <__aeabi_fmul+0x10e>
 8000720:	230f      	movs	r3, #15
 8000722:	4023      	ands	r3, r4
 8000724:	2b04      	cmp	r3, #4
 8000726:	d000      	beq.n	800072a <__aeabi_fmul+0x10e>
 8000728:	3404      	adds	r4, #4
 800072a:	0123      	lsls	r3, r4, #4
 800072c:	d503      	bpl.n	8000736 <__aeabi_fmul+0x11a>
 800072e:	0002      	movs	r2, r0
 8000730:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <__aeabi_fmul+0x248>)
 8000732:	3280      	adds	r2, #128	; 0x80
 8000734:	401c      	ands	r4, r3
 8000736:	2afe      	cmp	r2, #254	; 0xfe
 8000738:	dcbf      	bgt.n	80006ba <__aeabi_fmul+0x9e>
 800073a:	01a4      	lsls	r4, r4, #6
 800073c:	0a64      	lsrs	r4, r4, #9
 800073e:	b2d0      	uxtb	r0, r2
 8000740:	e7b2      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000742:	4643      	mov	r3, r8
 8000744:	2b00      	cmp	r3, #0
 8000746:	d13d      	bne.n	80007c4 <__aeabi_fmul+0x1a8>
 8000748:	464a      	mov	r2, r9
 800074a:	3301      	adds	r3, #1
 800074c:	431a      	orrs	r2, r3
 800074e:	4691      	mov	r9, r2
 8000750:	469c      	mov	ip, r3
 8000752:	e792      	b.n	800067a <__aeabi_fmul+0x5e>
 8000754:	2c00      	cmp	r4, #0
 8000756:	d129      	bne.n	80007ac <__aeabi_fmul+0x190>
 8000758:	2304      	movs	r3, #4
 800075a:	4699      	mov	r9, r3
 800075c:	3b03      	subs	r3, #3
 800075e:	2500      	movs	r5, #0
 8000760:	469a      	mov	sl, r3
 8000762:	e774      	b.n	800064e <__aeabi_fmul+0x32>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11b      	bne.n	80007a0 <__aeabi_fmul+0x184>
 8000768:	2308      	movs	r3, #8
 800076a:	4699      	mov	r9, r3
 800076c:	3b06      	subs	r3, #6
 800076e:	25ff      	movs	r5, #255	; 0xff
 8000770:	469a      	mov	sl, r3
 8000772:	e76c      	b.n	800064e <__aeabi_fmul+0x32>
 8000774:	4643      	mov	r3, r8
 8000776:	35ff      	adds	r5, #255	; 0xff
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <__aeabi_fmul+0x178>
 800077c:	2302      	movs	r3, #2
 800077e:	464a      	mov	r2, r9
 8000780:	431a      	orrs	r2, r3
 8000782:	4691      	mov	r9, r2
 8000784:	469c      	mov	ip, r3
 8000786:	e778      	b.n	800067a <__aeabi_fmul+0x5e>
 8000788:	4653      	mov	r3, sl
 800078a:	0031      	movs	r1, r6
 800078c:	2b02      	cmp	r3, #2
 800078e:	d000      	beq.n	8000792 <__aeabi_fmul+0x176>
 8000790:	e783      	b.n	800069a <__aeabi_fmul+0x7e>
 8000792:	e792      	b.n	80006ba <__aeabi_fmul+0x9e>
 8000794:	2303      	movs	r3, #3
 8000796:	464a      	mov	r2, r9
 8000798:	431a      	orrs	r2, r3
 800079a:	4691      	mov	r9, r2
 800079c:	469c      	mov	ip, r3
 800079e:	e76c      	b.n	800067a <__aeabi_fmul+0x5e>
 80007a0:	230c      	movs	r3, #12
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b09      	subs	r3, #9
 80007a6:	25ff      	movs	r5, #255	; 0xff
 80007a8:	469a      	mov	sl, r3
 80007aa:	e750      	b.n	800064e <__aeabi_fmul+0x32>
 80007ac:	0020      	movs	r0, r4
 80007ae:	f000 fd87 	bl	80012c0 <__clzsi2>
 80007b2:	2576      	movs	r5, #118	; 0x76
 80007b4:	1f43      	subs	r3, r0, #5
 80007b6:	409c      	lsls	r4, r3
 80007b8:	2300      	movs	r3, #0
 80007ba:	426d      	negs	r5, r5
 80007bc:	4699      	mov	r9, r3
 80007be:	469a      	mov	sl, r3
 80007c0:	1a2d      	subs	r5, r5, r0
 80007c2:	e744      	b.n	800064e <__aeabi_fmul+0x32>
 80007c4:	4640      	mov	r0, r8
 80007c6:	f000 fd7b 	bl	80012c0 <__clzsi2>
 80007ca:	4642      	mov	r2, r8
 80007cc:	1f43      	subs	r3, r0, #5
 80007ce:	409a      	lsls	r2, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	1a2d      	subs	r5, r5, r0
 80007d4:	4690      	mov	r8, r2
 80007d6:	469c      	mov	ip, r3
 80007d8:	3d76      	subs	r5, #118	; 0x76
 80007da:	e74e      	b.n	800067a <__aeabi_fmul+0x5e>
 80007dc:	2480      	movs	r4, #128	; 0x80
 80007de:	2100      	movs	r1, #0
 80007e0:	20ff      	movs	r0, #255	; 0xff
 80007e2:	03e4      	lsls	r4, r4, #15
 80007e4:	e760      	b.n	80006a8 <__aeabi_fmul+0x8c>
 80007e6:	2301      	movs	r3, #1
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	2b1b      	cmp	r3, #27
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_fmul+0x1d4>
 80007ee:	e759      	b.n	80006a4 <__aeabi_fmul+0x88>
 80007f0:	0022      	movs	r2, r4
 80007f2:	309e      	adds	r0, #158	; 0x9e
 80007f4:	40da      	lsrs	r2, r3
 80007f6:	4084      	lsls	r4, r0
 80007f8:	0013      	movs	r3, r2
 80007fa:	1e62      	subs	r2, r4, #1
 80007fc:	4194      	sbcs	r4, r2
 80007fe:	431c      	orrs	r4, r3
 8000800:	0763      	lsls	r3, r4, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fmul+0x1f2>
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	2b04      	cmp	r3, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fmul+0x1f2>
 800080c:	3404      	adds	r4, #4
 800080e:	0163      	lsls	r3, r4, #5
 8000810:	d51a      	bpl.n	8000848 <__aeabi_fmul+0x22c>
 8000812:	2001      	movs	r0, #1
 8000814:	2400      	movs	r4, #0
 8000816:	e747      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	03c0      	lsls	r0, r0, #15
 800081c:	4204      	tst	r4, r0
 800081e:	d009      	beq.n	8000834 <__aeabi_fmul+0x218>
 8000820:	4643      	mov	r3, r8
 8000822:	4203      	tst	r3, r0
 8000824:	d106      	bne.n	8000834 <__aeabi_fmul+0x218>
 8000826:	4644      	mov	r4, r8
 8000828:	4304      	orrs	r4, r0
 800082a:	0264      	lsls	r4, r4, #9
 800082c:	0039      	movs	r1, r7
 800082e:	20ff      	movs	r0, #255	; 0xff
 8000830:	0a64      	lsrs	r4, r4, #9
 8000832:	e739      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	03c0      	lsls	r0, r0, #15
 8000838:	4304      	orrs	r4, r0
 800083a:	0264      	lsls	r4, r4, #9
 800083c:	0031      	movs	r1, r6
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	0a64      	lsrs	r4, r4, #9
 8000842:	e731      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000844:	0028      	movs	r0, r5
 8000846:	e765      	b.n	8000714 <__aeabi_fmul+0xf8>
 8000848:	01a4      	lsls	r4, r4, #6
 800084a:	2000      	movs	r0, #0
 800084c:	0a64      	lsrs	r4, r4, #9
 800084e:	e72b      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	03c0      	lsls	r0, r0, #15
 8000854:	4304      	orrs	r4, r0
 8000856:	0264      	lsls	r4, r4, #9
 8000858:	20ff      	movs	r0, #255	; 0xff
 800085a:	0a64      	lsrs	r4, r4, #9
 800085c:	e724      	b.n	80006a8 <__aeabi_fmul+0x8c>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	080050e8 	.word	0x080050e8
 8000864:	f7ffffff 	.word	0xf7ffffff

08000868 <__aeabi_fsub>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	46ce      	mov	lr, r9
 800086c:	4647      	mov	r7, r8
 800086e:	0243      	lsls	r3, r0, #9
 8000870:	0a5b      	lsrs	r3, r3, #9
 8000872:	024e      	lsls	r6, r1, #9
 8000874:	00da      	lsls	r2, r3, #3
 8000876:	4694      	mov	ip, r2
 8000878:	0a72      	lsrs	r2, r6, #9
 800087a:	4691      	mov	r9, r2
 800087c:	0045      	lsls	r5, r0, #1
 800087e:	004a      	lsls	r2, r1, #1
 8000880:	b580      	push	{r7, lr}
 8000882:	0e2d      	lsrs	r5, r5, #24
 8000884:	001f      	movs	r7, r3
 8000886:	0fc4      	lsrs	r4, r0, #31
 8000888:	0e12      	lsrs	r2, r2, #24
 800088a:	0fc9      	lsrs	r1, r1, #31
 800088c:	09b6      	lsrs	r6, r6, #6
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d05b      	beq.n	800094a <__aeabi_fsub+0xe2>
 8000892:	2001      	movs	r0, #1
 8000894:	4041      	eors	r1, r0
 8000896:	428c      	cmp	r4, r1
 8000898:	d039      	beq.n	800090e <__aeabi_fsub+0xa6>
 800089a:	1aa8      	subs	r0, r5, r2
 800089c:	2800      	cmp	r0, #0
 800089e:	dd5a      	ble.n	8000956 <__aeabi_fsub+0xee>
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d06a      	beq.n	800097a <__aeabi_fsub+0x112>
 80008a4:	2dff      	cmp	r5, #255	; 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fsub+0x42>
 80008a8:	e0d9      	b.n	8000a5e <__aeabi_fsub+0x1f6>
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	04d2      	lsls	r2, r2, #19
 80008ae:	4316      	orrs	r6, r2
 80008b0:	281b      	cmp	r0, #27
 80008b2:	dc00      	bgt.n	80008b6 <__aeabi_fsub+0x4e>
 80008b4:	e0e9      	b.n	8000a8a <__aeabi_fsub+0x222>
 80008b6:	2001      	movs	r0, #1
 80008b8:	4663      	mov	r3, ip
 80008ba:	1a18      	subs	r0, r3, r0
 80008bc:	0143      	lsls	r3, r0, #5
 80008be:	d400      	bmi.n	80008c2 <__aeabi_fsub+0x5a>
 80008c0:	e0b4      	b.n	8000a2c <__aeabi_fsub+0x1c4>
 80008c2:	0180      	lsls	r0, r0, #6
 80008c4:	0987      	lsrs	r7, r0, #6
 80008c6:	0038      	movs	r0, r7
 80008c8:	f000 fcfa 	bl	80012c0 <__clzsi2>
 80008cc:	3805      	subs	r0, #5
 80008ce:	4087      	lsls	r7, r0
 80008d0:	4285      	cmp	r5, r0
 80008d2:	dc00      	bgt.n	80008d6 <__aeabi_fsub+0x6e>
 80008d4:	e0cc      	b.n	8000a70 <__aeabi_fsub+0x208>
 80008d6:	1a2d      	subs	r5, r5, r0
 80008d8:	48b5      	ldr	r0, [pc, #724]	; (8000bb0 <__aeabi_fsub+0x348>)
 80008da:	4038      	ands	r0, r7
 80008dc:	0743      	lsls	r3, r0, #29
 80008de:	d004      	beq.n	80008ea <__aeabi_fsub+0x82>
 80008e0:	230f      	movs	r3, #15
 80008e2:	4003      	ands	r3, r0
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d000      	beq.n	80008ea <__aeabi_fsub+0x82>
 80008e8:	3004      	adds	r0, #4
 80008ea:	0143      	lsls	r3, r0, #5
 80008ec:	d400      	bmi.n	80008f0 <__aeabi_fsub+0x88>
 80008ee:	e0a0      	b.n	8000a32 <__aeabi_fsub+0x1ca>
 80008f0:	1c6a      	adds	r2, r5, #1
 80008f2:	2dfe      	cmp	r5, #254	; 0xfe
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x90>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fsub+0x1ac>
 80008f8:	0180      	lsls	r0, r0, #6
 80008fa:	0a47      	lsrs	r7, r0, #9
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	05d0      	lsls	r0, r2, #23
 8000900:	4338      	orrs	r0, r7
 8000902:	07e4      	lsls	r4, r4, #31
 8000904:	4320      	orrs	r0, r4
 8000906:	bcc0      	pop	{r6, r7}
 8000908:	46b9      	mov	r9, r7
 800090a:	46b0      	mov	r8, r6
 800090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090e:	1aa8      	subs	r0, r5, r2
 8000910:	4680      	mov	r8, r0
 8000912:	2800      	cmp	r0, #0
 8000914:	dd45      	ble.n	80009a2 <__aeabi_fsub+0x13a>
 8000916:	2a00      	cmp	r2, #0
 8000918:	d070      	beq.n	80009fc <__aeabi_fsub+0x194>
 800091a:	2dff      	cmp	r5, #255	; 0xff
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0xb8>
 800091e:	e09e      	b.n	8000a5e <__aeabi_fsub+0x1f6>
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	04db      	lsls	r3, r3, #19
 8000924:	431e      	orrs	r6, r3
 8000926:	4643      	mov	r3, r8
 8000928:	2b1b      	cmp	r3, #27
 800092a:	dc00      	bgt.n	800092e <__aeabi_fsub+0xc6>
 800092c:	e0d2      	b.n	8000ad4 <__aeabi_fsub+0x26c>
 800092e:	2001      	movs	r0, #1
 8000930:	4460      	add	r0, ip
 8000932:	0143      	lsls	r3, r0, #5
 8000934:	d57a      	bpl.n	8000a2c <__aeabi_fsub+0x1c4>
 8000936:	3501      	adds	r5, #1
 8000938:	2dff      	cmp	r5, #255	; 0xff
 800093a:	d06b      	beq.n	8000a14 <__aeabi_fsub+0x1ac>
 800093c:	2301      	movs	r3, #1
 800093e:	4a9d      	ldr	r2, [pc, #628]	; (8000bb4 <__aeabi_fsub+0x34c>)
 8000940:	4003      	ands	r3, r0
 8000942:	0840      	lsrs	r0, r0, #1
 8000944:	4010      	ands	r0, r2
 8000946:	4318      	orrs	r0, r3
 8000948:	e7c8      	b.n	80008dc <__aeabi_fsub+0x74>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d020      	beq.n	8000990 <__aeabi_fsub+0x128>
 800094e:	428c      	cmp	r4, r1
 8000950:	d023      	beq.n	800099a <__aeabi_fsub+0x132>
 8000952:	0028      	movs	r0, r5
 8000954:	38ff      	subs	r0, #255	; 0xff
 8000956:	2800      	cmp	r0, #0
 8000958:	d039      	beq.n	80009ce <__aeabi_fsub+0x166>
 800095a:	1b57      	subs	r7, r2, r5
 800095c:	2d00      	cmp	r5, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_fsub+0xfa>
 8000960:	e09d      	b.n	8000a9e <__aeabi_fsub+0x236>
 8000962:	4663      	mov	r3, ip
 8000964:	2b00      	cmp	r3, #0
 8000966:	d100      	bne.n	800096a <__aeabi_fsub+0x102>
 8000968:	e0db      	b.n	8000b22 <__aeabi_fsub+0x2ba>
 800096a:	1e7b      	subs	r3, r7, #1
 800096c:	2f01      	cmp	r7, #1
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x10a>
 8000970:	e10d      	b.n	8000b8e <__aeabi_fsub+0x326>
 8000972:	2fff      	cmp	r7, #255	; 0xff
 8000974:	d071      	beq.n	8000a5a <__aeabi_fsub+0x1f2>
 8000976:	001f      	movs	r7, r3
 8000978:	e098      	b.n	8000aac <__aeabi_fsub+0x244>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x118>
 800097e:	e0a7      	b.n	8000ad0 <__aeabi_fsub+0x268>
 8000980:	1e42      	subs	r2, r0, #1
 8000982:	2801      	cmp	r0, #1
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x120>
 8000986:	e0e6      	b.n	8000b56 <__aeabi_fsub+0x2ee>
 8000988:	28ff      	cmp	r0, #255	; 0xff
 800098a:	d068      	beq.n	8000a5e <__aeabi_fsub+0x1f6>
 800098c:	0010      	movs	r0, r2
 800098e:	e78f      	b.n	80008b0 <__aeabi_fsub+0x48>
 8000990:	2001      	movs	r0, #1
 8000992:	4041      	eors	r1, r0
 8000994:	42a1      	cmp	r1, r4
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x132>
 8000998:	e77f      	b.n	800089a <__aeabi_fsub+0x32>
 800099a:	20ff      	movs	r0, #255	; 0xff
 800099c:	4240      	negs	r0, r0
 800099e:	4680      	mov	r8, r0
 80009a0:	44a8      	add	r8, r5
 80009a2:	4640      	mov	r0, r8
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d038      	beq.n	8000a1a <__aeabi_fsub+0x1b2>
 80009a8:	1b51      	subs	r1, r2, r5
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fsub+0x148>
 80009ae:	e0ae      	b.n	8000b0e <__aeabi_fsub+0x2a6>
 80009b0:	2aff      	cmp	r2, #255	; 0xff
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fsub+0x14e>
 80009b4:	e0df      	b.n	8000b76 <__aeabi_fsub+0x30e>
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	4660      	mov	r0, ip
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	4318      	orrs	r0, r3
 80009be:	4684      	mov	ip, r0
 80009c0:	291b      	cmp	r1, #27
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_fsub+0x15e>
 80009c4:	e0d9      	b.n	8000b7a <__aeabi_fsub+0x312>
 80009c6:	2001      	movs	r0, #1
 80009c8:	0015      	movs	r5, r2
 80009ca:	1980      	adds	r0, r0, r6
 80009cc:	e7b1      	b.n	8000932 <__aeabi_fsub+0xca>
 80009ce:	20fe      	movs	r0, #254	; 0xfe
 80009d0:	1c6a      	adds	r2, r5, #1
 80009d2:	4210      	tst	r0, r2
 80009d4:	d171      	bne.n	8000aba <__aeabi_fsub+0x252>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	d000      	beq.n	80009dc <__aeabi_fsub+0x174>
 80009da:	e0a6      	b.n	8000b2a <__aeabi_fsub+0x2c2>
 80009dc:	4663      	mov	r3, ip
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x17c>
 80009e2:	e0d9      	b.n	8000b98 <__aeabi_fsub+0x330>
 80009e4:	2200      	movs	r2, #0
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x184>
 80009ea:	e788      	b.n	80008fe <__aeabi_fsub+0x96>
 80009ec:	1b98      	subs	r0, r3, r6
 80009ee:	0143      	lsls	r3, r0, #5
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_fsub+0x18c>
 80009f2:	e0e1      	b.n	8000bb8 <__aeabi_fsub+0x350>
 80009f4:	4663      	mov	r3, ip
 80009f6:	000c      	movs	r4, r1
 80009f8:	1af0      	subs	r0, r6, r3
 80009fa:	e76f      	b.n	80008dc <__aeabi_fsub+0x74>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fsub+0x19a>
 8000a00:	e0b7      	b.n	8000b72 <__aeabi_fsub+0x30a>
 8000a02:	0002      	movs	r2, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	2801      	cmp	r0, #1
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x1a4>
 8000a0a:	e09c      	b.n	8000b46 <__aeabi_fsub+0x2de>
 8000a0c:	28ff      	cmp	r0, #255	; 0xff
 8000a0e:	d026      	beq.n	8000a5e <__aeabi_fsub+0x1f6>
 8000a10:	4690      	mov	r8, r2
 8000a12:	e788      	b.n	8000926 <__aeabi_fsub+0xbe>
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	2700      	movs	r7, #0
 8000a18:	e771      	b.n	80008fe <__aeabi_fsub+0x96>
 8000a1a:	20fe      	movs	r0, #254	; 0xfe
 8000a1c:	1c6a      	adds	r2, r5, #1
 8000a1e:	4210      	tst	r0, r2
 8000a20:	d064      	beq.n	8000aec <__aeabi_fsub+0x284>
 8000a22:	2aff      	cmp	r2, #255	; 0xff
 8000a24:	d0f6      	beq.n	8000a14 <__aeabi_fsub+0x1ac>
 8000a26:	0015      	movs	r5, r2
 8000a28:	4466      	add	r6, ip
 8000a2a:	0870      	lsrs	r0, r6, #1
 8000a2c:	0743      	lsls	r3, r0, #29
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fsub+0x1ca>
 8000a30:	e756      	b.n	80008e0 <__aeabi_fsub+0x78>
 8000a32:	08c3      	lsrs	r3, r0, #3
 8000a34:	2dff      	cmp	r5, #255	; 0xff
 8000a36:	d012      	beq.n	8000a5e <__aeabi_fsub+0x1f6>
 8000a38:	025b      	lsls	r3, r3, #9
 8000a3a:	0a5f      	lsrs	r7, r3, #9
 8000a3c:	b2ea      	uxtb	r2, r5
 8000a3e:	e75e      	b.n	80008fe <__aeabi_fsub+0x96>
 8000a40:	4662      	mov	r2, ip
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x1e0>
 8000a46:	e096      	b.n	8000b76 <__aeabi_fsub+0x30e>
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d008      	beq.n	8000a5e <__aeabi_fsub+0x1f6>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	03d2      	lsls	r2, r2, #15
 8000a50:	4213      	tst	r3, r2
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fsub+0x1f6>
 8000a54:	4648      	mov	r0, r9
 8000a56:	4210      	tst	r0, r2
 8000a58:	d101      	bne.n	8000a5e <__aeabi_fsub+0x1f6>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0d8      	beq.n	8000a14 <__aeabi_fsub+0x1ac>
 8000a62:	2780      	movs	r7, #128	; 0x80
 8000a64:	03ff      	lsls	r7, r7, #15
 8000a66:	431f      	orrs	r7, r3
 8000a68:	027f      	lsls	r7, r7, #9
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	0a7f      	lsrs	r7, r7, #9
 8000a6e:	e746      	b.n	80008fe <__aeabi_fsub+0x96>
 8000a70:	2320      	movs	r3, #32
 8000a72:	003a      	movs	r2, r7
 8000a74:	1b45      	subs	r5, r0, r5
 8000a76:	0038      	movs	r0, r7
 8000a78:	3501      	adds	r5, #1
 8000a7a:	40ea      	lsrs	r2, r5
 8000a7c:	1b5d      	subs	r5, r3, r5
 8000a7e:	40a8      	lsls	r0, r5
 8000a80:	1e43      	subs	r3, r0, #1
 8000a82:	4198      	sbcs	r0, r3
 8000a84:	2500      	movs	r5, #0
 8000a86:	4310      	orrs	r0, r2
 8000a88:	e728      	b.n	80008dc <__aeabi_fsub+0x74>
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	1a1b      	subs	r3, r3, r0
 8000a8e:	0032      	movs	r2, r6
 8000a90:	409e      	lsls	r6, r3
 8000a92:	40c2      	lsrs	r2, r0
 8000a94:	0030      	movs	r0, r6
 8000a96:	1e43      	subs	r3, r0, #1
 8000a98:	4198      	sbcs	r0, r3
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	e70c      	b.n	80008b8 <__aeabi_fsub+0x50>
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d0db      	beq.n	8000a5a <__aeabi_fsub+0x1f2>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	4660      	mov	r0, ip
 8000aa6:	04db      	lsls	r3, r3, #19
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	4684      	mov	ip, r0
 8000aac:	2f1b      	cmp	r7, #27
 8000aae:	dd56      	ble.n	8000b5e <__aeabi_fsub+0x2f6>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	1a30      	subs	r0, r6, r0
 8000ab8:	e700      	b.n	80008bc <__aeabi_fsub+0x54>
 8000aba:	4663      	mov	r3, ip
 8000abc:	1b9f      	subs	r7, r3, r6
 8000abe:	017b      	lsls	r3, r7, #5
 8000ac0:	d43d      	bmi.n	8000b3e <__aeabi_fsub+0x2d6>
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x260>
 8000ac6:	e6fe      	b.n	80008c6 <__aeabi_fsub+0x5e>
 8000ac8:	2400      	movs	r4, #0
 8000aca:	2200      	movs	r2, #0
 8000acc:	2700      	movs	r7, #0
 8000ace:	e716      	b.n	80008fe <__aeabi_fsub+0x96>
 8000ad0:	0005      	movs	r5, r0
 8000ad2:	e7af      	b.n	8000a34 <__aeabi_fsub+0x1cc>
 8000ad4:	0032      	movs	r2, r6
 8000ad6:	4643      	mov	r3, r8
 8000ad8:	4641      	mov	r1, r8
 8000ada:	40da      	lsrs	r2, r3
 8000adc:	2320      	movs	r3, #32
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	409e      	lsls	r6, r3
 8000ae2:	0030      	movs	r0, r6
 8000ae4:	1e43      	subs	r3, r0, #1
 8000ae6:	4198      	sbcs	r0, r3
 8000ae8:	4310      	orrs	r0, r2
 8000aea:	e721      	b.n	8000930 <__aeabi_fsub+0xc8>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d1a7      	bne.n	8000a40 <__aeabi_fsub+0x1d8>
 8000af0:	4663      	mov	r3, ip
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d059      	beq.n	8000baa <__aeabi_fsub+0x342>
 8000af6:	2200      	movs	r2, #0
 8000af8:	2e00      	cmp	r6, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_fsub+0x296>
 8000afc:	e6ff      	b.n	80008fe <__aeabi_fsub+0x96>
 8000afe:	0030      	movs	r0, r6
 8000b00:	4460      	add	r0, ip
 8000b02:	0143      	lsls	r3, r0, #5
 8000b04:	d592      	bpl.n	8000a2c <__aeabi_fsub+0x1c4>
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <__aeabi_fsub+0x348>)
 8000b08:	3501      	adds	r5, #1
 8000b0a:	4018      	ands	r0, r3
 8000b0c:	e78e      	b.n	8000a2c <__aeabi_fsub+0x1c4>
 8000b0e:	4663      	mov	r3, ip
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d047      	beq.n	8000ba4 <__aeabi_fsub+0x33c>
 8000b14:	1e4b      	subs	r3, r1, #1
 8000b16:	2901      	cmp	r1, #1
 8000b18:	d015      	beq.n	8000b46 <__aeabi_fsub+0x2de>
 8000b1a:	29ff      	cmp	r1, #255	; 0xff
 8000b1c:	d02b      	beq.n	8000b76 <__aeabi_fsub+0x30e>
 8000b1e:	0019      	movs	r1, r3
 8000b20:	e74e      	b.n	80009c0 <__aeabi_fsub+0x158>
 8000b22:	000c      	movs	r4, r1
 8000b24:	464b      	mov	r3, r9
 8000b26:	003d      	movs	r5, r7
 8000b28:	e784      	b.n	8000a34 <__aeabi_fsub+0x1cc>
 8000b2a:	4662      	mov	r2, ip
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d18b      	bne.n	8000a48 <__aeabi_fsub+0x1e0>
 8000b30:	2e00      	cmp	r6, #0
 8000b32:	d192      	bne.n	8000a5a <__aeabi_fsub+0x1f2>
 8000b34:	2780      	movs	r7, #128	; 0x80
 8000b36:	2400      	movs	r4, #0
 8000b38:	22ff      	movs	r2, #255	; 0xff
 8000b3a:	03ff      	lsls	r7, r7, #15
 8000b3c:	e6df      	b.n	80008fe <__aeabi_fsub+0x96>
 8000b3e:	4663      	mov	r3, ip
 8000b40:	000c      	movs	r4, r1
 8000b42:	1af7      	subs	r7, r6, r3
 8000b44:	e6bf      	b.n	80008c6 <__aeabi_fsub+0x5e>
 8000b46:	0030      	movs	r0, r6
 8000b48:	4460      	add	r0, ip
 8000b4a:	2501      	movs	r5, #1
 8000b4c:	0143      	lsls	r3, r0, #5
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_fsub+0x2ea>
 8000b50:	e76c      	b.n	8000a2c <__aeabi_fsub+0x1c4>
 8000b52:	2502      	movs	r5, #2
 8000b54:	e6f2      	b.n	800093c <__aeabi_fsub+0xd4>
 8000b56:	4663      	mov	r3, ip
 8000b58:	2501      	movs	r5, #1
 8000b5a:	1b98      	subs	r0, r3, r6
 8000b5c:	e6ae      	b.n	80008bc <__aeabi_fsub+0x54>
 8000b5e:	2320      	movs	r3, #32
 8000b60:	4664      	mov	r4, ip
 8000b62:	4660      	mov	r0, ip
 8000b64:	40fc      	lsrs	r4, r7
 8000b66:	1bdf      	subs	r7, r3, r7
 8000b68:	40b8      	lsls	r0, r7
 8000b6a:	1e43      	subs	r3, r0, #1
 8000b6c:	4198      	sbcs	r0, r3
 8000b6e:	4320      	orrs	r0, r4
 8000b70:	e79f      	b.n	8000ab2 <__aeabi_fsub+0x24a>
 8000b72:	0005      	movs	r5, r0
 8000b74:	e75e      	b.n	8000a34 <__aeabi_fsub+0x1cc>
 8000b76:	464b      	mov	r3, r9
 8000b78:	e771      	b.n	8000a5e <__aeabi_fsub+0x1f6>
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	4660      	mov	r0, ip
 8000b80:	40cd      	lsrs	r5, r1
 8000b82:	1a59      	subs	r1, r3, r1
 8000b84:	4088      	lsls	r0, r1
 8000b86:	1e43      	subs	r3, r0, #1
 8000b88:	4198      	sbcs	r0, r3
 8000b8a:	4328      	orrs	r0, r5
 8000b8c:	e71c      	b.n	80009c8 <__aeabi_fsub+0x160>
 8000b8e:	4663      	mov	r3, ip
 8000b90:	000c      	movs	r4, r1
 8000b92:	2501      	movs	r5, #1
 8000b94:	1af0      	subs	r0, r6, r3
 8000b96:	e691      	b.n	80008bc <__aeabi_fsub+0x54>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d095      	beq.n	8000ac8 <__aeabi_fsub+0x260>
 8000b9c:	000c      	movs	r4, r1
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	e6ac      	b.n	80008fe <__aeabi_fsub+0x96>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	000d      	movs	r5, r1
 8000ba8:	e744      	b.n	8000a34 <__aeabi_fsub+0x1cc>
 8000baa:	464f      	mov	r7, r9
 8000bac:	2200      	movs	r2, #0
 8000bae:	e6a6      	b.n	80008fe <__aeabi_fsub+0x96>
 8000bb0:	fbffffff 	.word	0xfbffffff
 8000bb4:	7dffffff 	.word	0x7dffffff
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x356>
 8000bbc:	e736      	b.n	8000a2c <__aeabi_fsub+0x1c4>
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	e69c      	b.n	80008fe <__aeabi_fsub+0x96>

08000bc4 <__aeabi_f2iz>:
 8000bc4:	0241      	lsls	r1, r0, #9
 8000bc6:	0042      	lsls	r2, r0, #1
 8000bc8:	0fc3      	lsrs	r3, r0, #31
 8000bca:	0a49      	lsrs	r1, r1, #9
 8000bcc:	2000      	movs	r0, #0
 8000bce:	0e12      	lsrs	r2, r2, #24
 8000bd0:	2a7e      	cmp	r2, #126	; 0x7e
 8000bd2:	dd03      	ble.n	8000bdc <__aeabi_f2iz+0x18>
 8000bd4:	2a9d      	cmp	r2, #157	; 0x9d
 8000bd6:	dd02      	ble.n	8000bde <__aeabi_f2iz+0x1a>
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <__aeabi_f2iz+0x3c>)
 8000bda:	1898      	adds	r0, r3, r2
 8000bdc:	4770      	bx	lr
 8000bde:	2080      	movs	r0, #128	; 0x80
 8000be0:	0400      	lsls	r0, r0, #16
 8000be2:	4301      	orrs	r1, r0
 8000be4:	2a95      	cmp	r2, #149	; 0x95
 8000be6:	dc07      	bgt.n	8000bf8 <__aeabi_f2iz+0x34>
 8000be8:	2096      	movs	r0, #150	; 0x96
 8000bea:	1a82      	subs	r2, r0, r2
 8000bec:	40d1      	lsrs	r1, r2
 8000bee:	4248      	negs	r0, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f3      	bne.n	8000bdc <__aeabi_f2iz+0x18>
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	e7f1      	b.n	8000bdc <__aeabi_f2iz+0x18>
 8000bf8:	3a96      	subs	r2, #150	; 0x96
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	e7f7      	b.n	8000bee <__aeabi_f2iz+0x2a>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	7fffffff 	.word	0x7fffffff

08000c04 <__aeabi_dmul>:
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	4657      	mov	r7, sl
 8000c08:	464e      	mov	r6, r9
 8000c0a:	4645      	mov	r5, r8
 8000c0c:	46de      	mov	lr, fp
 8000c0e:	b5e0      	push	{r5, r6, r7, lr}
 8000c10:	4698      	mov	r8, r3
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	004b      	lsls	r3, r1, #1
 8000c16:	0006      	movs	r6, r0
 8000c18:	4692      	mov	sl, r2
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	0b24      	lsrs	r4, r4, #12
 8000c1e:	0d5b      	lsrs	r3, r3, #21
 8000c20:	0fcf      	lsrs	r7, r1, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dmul+0x24>
 8000c26:	e15c      	b.n	8000ee2 <__aeabi_dmul+0x2de>
 8000c28:	4ad9      	ldr	r2, [pc, #868]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dmul+0x2c>
 8000c2e:	e175      	b.n	8000f1c <__aeabi_dmul+0x318>
 8000c30:	0f42      	lsrs	r2, r0, #29
 8000c32:	00e4      	lsls	r4, r4, #3
 8000c34:	4314      	orrs	r4, r2
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	0412      	lsls	r2, r2, #16
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	4ad5      	ldr	r2, [pc, #852]	; (8000f94 <__aeabi_dmul+0x390>)
 8000c3e:	00c5      	lsls	r5, r0, #3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	4699      	mov	r9, r3
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	4642      	mov	r2, r8
 8000c50:	031e      	lsls	r6, r3, #12
 8000c52:	0fd2      	lsrs	r2, r2, #31
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4650      	mov	r0, sl
 8000c58:	4690      	mov	r8, r2
 8000c5a:	0b36      	lsrs	r6, r6, #12
 8000c5c:	0d5b      	lsrs	r3, r3, #21
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dmul+0x5e>
 8000c60:	e120      	b.n	8000ea4 <__aeabi_dmul+0x2a0>
 8000c62:	4acb      	ldr	r2, [pc, #812]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dmul+0x66>
 8000c68:	e162      	b.n	8000f30 <__aeabi_dmul+0x32c>
 8000c6a:	49ca      	ldr	r1, [pc, #808]	; (8000f94 <__aeabi_dmul+0x390>)
 8000c6c:	0f42      	lsrs	r2, r0, #29
 8000c6e:	468c      	mov	ip, r1
 8000c70:	9900      	ldr	r1, [sp, #0]
 8000c72:	4463      	add	r3, ip
 8000c74:	00f6      	lsls	r6, r6, #3
 8000c76:	468c      	mov	ip, r1
 8000c78:	4316      	orrs	r6, r2
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	449c      	add	ip, r3
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4663      	mov	r3, ip
 8000c82:	4316      	orrs	r6, r2
 8000c84:	00c2      	lsls	r2, r0, #3
 8000c86:	2000      	movs	r0, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	9900      	ldr	r1, [sp, #0]
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	3101      	adds	r1, #1
 8000c90:	468c      	mov	ip, r1
 8000c92:	4649      	mov	r1, r9
 8000c94:	407b      	eors	r3, r7
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	290f      	cmp	r1, #15
 8000c9a:	d826      	bhi.n	8000cea <__aeabi_dmul+0xe6>
 8000c9c:	4bbe      	ldr	r3, [pc, #760]	; (8000f98 <__aeabi_dmul+0x394>)
 8000c9e:	0089      	lsls	r1, r1, #2
 8000ca0:	5859      	ldr	r1, [r3, r1]
 8000ca2:	468f      	mov	pc, r1
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	0034      	movs	r4, r6
 8000caa:	0015      	movs	r5, r2
 8000cac:	4683      	mov	fp, r0
 8000cae:	465b      	mov	r3, fp
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d016      	beq.n	8000ce2 <__aeabi_dmul+0xde>
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dmul+0xb6>
 8000cb8:	e203      	b.n	80010c2 <__aeabi_dmul+0x4be>
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_dmul+0xbc>
 8000cbe:	e0cd      	b.n	8000e5c <__aeabi_dmul+0x258>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	0512      	lsls	r2, r2, #20
 8000cca:	4322      	orrs	r2, r4
 8000ccc:	07db      	lsls	r3, r3, #31
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	b007      	add	sp, #28
 8000cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd8:	46bb      	mov	fp, r7
 8000cda:	46b2      	mov	sl, r6
 8000cdc:	46a9      	mov	r9, r5
 8000cde:	46a0      	mov	r8, r4
 8000ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	4aaa      	ldr	r2, [pc, #680]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000ce8:	e7ed      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000cea:	0c28      	lsrs	r0, r5, #16
 8000cec:	042d      	lsls	r5, r5, #16
 8000cee:	0c2d      	lsrs	r5, r5, #16
 8000cf0:	002b      	movs	r3, r5
 8000cf2:	0c11      	lsrs	r1, r2, #16
 8000cf4:	0412      	lsls	r2, r2, #16
 8000cf6:	0c12      	lsrs	r2, r2, #16
 8000cf8:	4353      	muls	r3, r2
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	002f      	movs	r7, r5
 8000d00:	4343      	muls	r3, r0
 8000d02:	4699      	mov	r9, r3
 8000d04:	434f      	muls	r7, r1
 8000d06:	444f      	add	r7, r9
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	000b      	movs	r3, r1
 8000d0e:	0c3f      	lsrs	r7, r7, #16
 8000d10:	46ba      	mov	sl, r7
 8000d12:	4343      	muls	r3, r0
 8000d14:	44da      	add	sl, fp
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	45d1      	cmp	r9, sl
 8000d1a:	d904      	bls.n	8000d26 <__aeabi_dmul+0x122>
 8000d1c:	2780      	movs	r7, #128	; 0x80
 8000d1e:	027f      	lsls	r7, r7, #9
 8000d20:	46b9      	mov	r9, r7
 8000d22:	444b      	add	r3, r9
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	4653      	mov	r3, sl
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	469b      	mov	fp, r3
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	041f      	lsls	r7, r3, #16
 8000d30:	4643      	mov	r3, r8
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	4698      	mov	r8, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4443      	add	r3, r8
 8000d3c:	9304      	str	r3, [sp, #16]
 8000d3e:	0c33      	lsrs	r3, r6, #16
 8000d40:	0436      	lsls	r6, r6, #16
 8000d42:	0c36      	lsrs	r6, r6, #16
 8000d44:	4698      	mov	r8, r3
 8000d46:	0033      	movs	r3, r6
 8000d48:	4343      	muls	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	4343      	muls	r3, r0
 8000d50:	002f      	movs	r7, r5
 8000d52:	469a      	mov	sl, r3
 8000d54:	4643      	mov	r3, r8
 8000d56:	4377      	muls	r7, r6
 8000d58:	435d      	muls	r5, r3
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	444d      	add	r5, r9
 8000d5e:	1945      	adds	r5, r0, r5
 8000d60:	45a9      	cmp	r9, r5
 8000d62:	d903      	bls.n	8000d6c <__aeabi_dmul+0x168>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	4699      	mov	r9, r3
 8000d6a:	44ca      	add	sl, r9
 8000d6c:	043f      	lsls	r7, r7, #16
 8000d6e:	0c28      	lsrs	r0, r5, #16
 8000d70:	0c3f      	lsrs	r7, r7, #16
 8000d72:	042d      	lsls	r5, r5, #16
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	0c27      	lsrs	r7, r4, #16
 8000d78:	0424      	lsls	r4, r4, #16
 8000d7a:	0c24      	lsrs	r4, r4, #16
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0020      	movs	r0, r4
 8000d80:	4350      	muls	r0, r2
 8000d82:	437a      	muls	r2, r7
 8000d84:	4691      	mov	r9, r2
 8000d86:	003a      	movs	r2, r7
 8000d88:	4453      	add	r3, sl
 8000d8a:	9305      	str	r3, [sp, #20]
 8000d8c:	0c03      	lsrs	r3, r0, #16
 8000d8e:	469a      	mov	sl, r3
 8000d90:	434a      	muls	r2, r1
 8000d92:	4361      	muls	r1, r4
 8000d94:	4449      	add	r1, r9
 8000d96:	4451      	add	r1, sl
 8000d98:	44ab      	add	fp, r5
 8000d9a:	4589      	cmp	r9, r1
 8000d9c:	d903      	bls.n	8000da6 <__aeabi_dmul+0x1a2>
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	4699      	mov	r9, r3
 8000da4:	444a      	add	r2, r9
 8000da6:	0400      	lsls	r0, r0, #16
 8000da8:	0c0b      	lsrs	r3, r1, #16
 8000daa:	0c00      	lsrs	r0, r0, #16
 8000dac:	0409      	lsls	r1, r1, #16
 8000dae:	1809      	adds	r1, r1, r0
 8000db0:	0020      	movs	r0, r4
 8000db2:	4699      	mov	r9, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	4370      	muls	r0, r6
 8000db8:	435c      	muls	r4, r3
 8000dba:	437e      	muls	r6, r7
 8000dbc:	435f      	muls	r7, r3
 8000dbe:	0c03      	lsrs	r3, r0, #16
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	19a4      	adds	r4, r4, r6
 8000dc4:	4444      	add	r4, r8
 8000dc6:	444a      	add	r2, r9
 8000dc8:	9703      	str	r7, [sp, #12]
 8000dca:	42a6      	cmp	r6, r4
 8000dcc:	d904      	bls.n	8000dd8 <__aeabi_dmul+0x1d4>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	4447      	add	r7, r8
 8000dd6:	9703      	str	r7, [sp, #12]
 8000dd8:	0423      	lsls	r3, r4, #16
 8000dda:	9e02      	ldr	r6, [sp, #8]
 8000ddc:	469a      	mov	sl, r3
 8000dde:	9b05      	ldr	r3, [sp, #20]
 8000de0:	445e      	add	r6, fp
 8000de2:	4698      	mov	r8, r3
 8000de4:	42ae      	cmp	r6, r5
 8000de6:	41ad      	sbcs	r5, r5
 8000de8:	1876      	adds	r6, r6, r1
 8000dea:	428e      	cmp	r6, r1
 8000dec:	4189      	sbcs	r1, r1
 8000dee:	0400      	lsls	r0, r0, #16
 8000df0:	0c00      	lsrs	r0, r0, #16
 8000df2:	4450      	add	r0, sl
 8000df4:	4440      	add	r0, r8
 8000df6:	426d      	negs	r5, r5
 8000df8:	1947      	adds	r7, r0, r5
 8000dfa:	46b8      	mov	r8, r7
 8000dfc:	4693      	mov	fp, r2
 8000dfe:	4249      	negs	r1, r1
 8000e00:	4689      	mov	r9, r1
 8000e02:	44c3      	add	fp, r8
 8000e04:	44d9      	add	r9, fp
 8000e06:	4298      	cmp	r0, r3
 8000e08:	4180      	sbcs	r0, r0
 8000e0a:	45a8      	cmp	r8, r5
 8000e0c:	41ad      	sbcs	r5, r5
 8000e0e:	4593      	cmp	fp, r2
 8000e10:	4192      	sbcs	r2, r2
 8000e12:	4589      	cmp	r9, r1
 8000e14:	4189      	sbcs	r1, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	4240      	negs	r0, r0
 8000e1a:	4328      	orrs	r0, r5
 8000e1c:	0c24      	lsrs	r4, r4, #16
 8000e1e:	4252      	negs	r2, r2
 8000e20:	4249      	negs	r1, r1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	9b03      	ldr	r3, [sp, #12]
 8000e26:	1900      	adds	r0, r0, r4
 8000e28:	1880      	adds	r0, r0, r2
 8000e2a:	18c7      	adds	r7, r0, r3
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	0ddc      	lsrs	r4, r3, #23
 8000e30:	9b04      	ldr	r3, [sp, #16]
 8000e32:	0275      	lsls	r5, r6, #9
 8000e34:	431d      	orrs	r5, r3
 8000e36:	1e6a      	subs	r2, r5, #1
 8000e38:	4195      	sbcs	r5, r2
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	0df6      	lsrs	r6, r6, #23
 8000e3e:	027f      	lsls	r7, r7, #9
 8000e40:	4335      	orrs	r5, r6
 8000e42:	025a      	lsls	r2, r3, #9
 8000e44:	433c      	orrs	r4, r7
 8000e46:	4315      	orrs	r5, r2
 8000e48:	01fb      	lsls	r3, r7, #7
 8000e4a:	d400      	bmi.n	8000e4e <__aeabi_dmul+0x24a>
 8000e4c:	e11c      	b.n	8001088 <__aeabi_dmul+0x484>
 8000e4e:	2101      	movs	r1, #1
 8000e50:	086a      	lsrs	r2, r5, #1
 8000e52:	400d      	ands	r5, r1
 8000e54:	4315      	orrs	r5, r2
 8000e56:	07e2      	lsls	r2, r4, #31
 8000e58:	4315      	orrs	r5, r2
 8000e5a:	0864      	lsrs	r4, r4, #1
 8000e5c:	494f      	ldr	r1, [pc, #316]	; (8000f9c <__aeabi_dmul+0x398>)
 8000e5e:	4461      	add	r1, ip
 8000e60:	2900      	cmp	r1, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_dmul+0x262>
 8000e64:	e0b0      	b.n	8000fc8 <__aeabi_dmul+0x3c4>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d009      	beq.n	8000e7e <__aeabi_dmul+0x27a>
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	402a      	ands	r2, r5
 8000e6e:	2a04      	cmp	r2, #4
 8000e70:	d005      	beq.n	8000e7e <__aeabi_dmul+0x27a>
 8000e72:	1d2a      	adds	r2, r5, #4
 8000e74:	42aa      	cmp	r2, r5
 8000e76:	41ad      	sbcs	r5, r5
 8000e78:	426d      	negs	r5, r5
 8000e7a:	1964      	adds	r4, r4, r5
 8000e7c:	0015      	movs	r5, r2
 8000e7e:	01e3      	lsls	r3, r4, #7
 8000e80:	d504      	bpl.n	8000e8c <__aeabi_dmul+0x288>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <__aeabi_dmul+0x39c>)
 8000e86:	00c9      	lsls	r1, r1, #3
 8000e88:	4014      	ands	r4, r2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <__aeabi_dmul+0x3a0>)
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_dmul+0x290>
 8000e92:	e726      	b.n	8000ce2 <__aeabi_dmul+0xde>
 8000e94:	0762      	lsls	r2, r4, #29
 8000e96:	08ed      	lsrs	r5, r5, #3
 8000e98:	0264      	lsls	r4, r4, #9
 8000e9a:	0549      	lsls	r1, r1, #21
 8000e9c:	4315      	orrs	r5, r2
 8000e9e:	0b24      	lsrs	r4, r4, #12
 8000ea0:	0d4a      	lsrs	r2, r1, #21
 8000ea2:	e710      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	4332      	orrs	r2, r6
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dmul+0x2a8>
 8000eaa:	e07f      	b.n	8000fac <__aeabi_dmul+0x3a8>
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_dmul+0x2ae>
 8000eb0:	e0dc      	b.n	800106c <__aeabi_dmul+0x468>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	f000 fa04 	bl	80012c0 <__clzsi2>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	3a0b      	subs	r2, #11
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	4652      	mov	r2, sl
 8000ec4:	3908      	subs	r1, #8
 8000ec6:	40da      	lsrs	r2, r3
 8000ec8:	408e      	lsls	r6, r1
 8000eca:	4316      	orrs	r6, r2
 8000ecc:	4652      	mov	r2, sl
 8000ece:	408a      	lsls	r2, r1
 8000ed0:	9b00      	ldr	r3, [sp, #0]
 8000ed2:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <__aeabi_dmul+0x3a4>)
 8000ed4:	1a18      	subs	r0, r3, r0
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	468c      	mov	ip, r1
 8000eda:	4463      	add	r3, ip
 8000edc:	2000      	movs	r0, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	e6d3      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000ee2:	0025      	movs	r5, r4
 8000ee4:	4305      	orrs	r5, r0
 8000ee6:	d04a      	beq.n	8000f7e <__aeabi_dmul+0x37a>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_dmul+0x2ea>
 8000eec:	e0b0      	b.n	8001050 <__aeabi_dmul+0x44c>
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f000 f9e6 	bl	80012c0 <__clzsi2>
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	390b      	subs	r1, #11
 8000efa:	231d      	movs	r3, #29
 8000efc:	0010      	movs	r0, r2
 8000efe:	1a5b      	subs	r3, r3, r1
 8000f00:	0031      	movs	r1, r6
 8000f02:	0035      	movs	r5, r6
 8000f04:	3808      	subs	r0, #8
 8000f06:	4084      	lsls	r4, r0
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	4085      	lsls	r5, r0
 8000f0c:	430c      	orrs	r4, r1
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <__aeabi_dmul+0x3a4>)
 8000f10:	1a83      	subs	r3, r0, r2
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	4699      	mov	r9, r3
 8000f18:	469b      	mov	fp, r3
 8000f1a:	e697      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f1c:	0005      	movs	r5, r0
 8000f1e:	4325      	orrs	r5, r4
 8000f20:	d126      	bne.n	8000f70 <__aeabi_dmul+0x36c>
 8000f22:	2208      	movs	r2, #8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2400      	movs	r4, #0
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	e68d      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f30:	4652      	mov	r2, sl
 8000f32:	9b00      	ldr	r3, [sp, #0]
 8000f34:	4332      	orrs	r2, r6
 8000f36:	d110      	bne.n	8000f5a <__aeabi_dmul+0x356>
 8000f38:	4915      	ldr	r1, [pc, #84]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	4463      	add	r3, ip
 8000f40:	4649      	mov	r1, r9
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	4319      	orrs	r1, r3
 8000f48:	4689      	mov	r9, r1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	e69d      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000f4e:	465b      	mov	r3, fp
 8000f50:	9701      	str	r7, [sp, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d000      	beq.n	8000f58 <__aeabi_dmul+0x354>
 8000f56:	e6ad      	b.n	8000cb4 <__aeabi_dmul+0xb0>
 8000f58:	e6c3      	b.n	8000ce2 <__aeabi_dmul+0xde>
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	4694      	mov	ip, r2
 8000f60:	4463      	add	r3, ip
 8000f62:	464a      	mov	r2, r9
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2303      	movs	r3, #3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	4652      	mov	r2, sl
 8000f6e:	e68c      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000f70:	220c      	movs	r2, #12
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2303      	movs	r3, #3
 8000f76:	0005      	movs	r5, r0
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469b      	mov	fp, r3
 8000f7c:	e666      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	4699      	mov	r9, r3
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	2400      	movs	r4, #0
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	e65e      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	000007ff 	.word	0x000007ff
 8000f94:	fffffc01 	.word	0xfffffc01
 8000f98:	08005128 	.word	0x08005128
 8000f9c:	000003ff 	.word	0x000003ff
 8000fa0:	feffffff 	.word	0xfeffffff
 8000fa4:	000007fe 	.word	0x000007fe
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	4649      	mov	r1, r9
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4319      	orrs	r1, r3
 8000fb2:	4689      	mov	r9, r1
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e667      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2480      	movs	r4, #128	; 0x80
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <__aeabi_dmul+0x4cc>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	0324      	lsls	r4, r4, #12
 8000fc6:	e67e      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000fc8:	2001      	movs	r0, #1
 8000fca:	1a40      	subs	r0, r0, r1
 8000fcc:	2838      	cmp	r0, #56	; 0x38
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dmul+0x3ce>
 8000fd0:	e676      	b.n	8000cc0 <__aeabi_dmul+0xbc>
 8000fd2:	281f      	cmp	r0, #31
 8000fd4:	dd5b      	ble.n	800108e <__aeabi_dmul+0x48a>
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	0023      	movs	r3, r4
 8000fda:	4252      	negs	r2, r2
 8000fdc:	1a51      	subs	r1, r2, r1
 8000fde:	40cb      	lsrs	r3, r1
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	2820      	cmp	r0, #32
 8000fe4:	d003      	beq.n	8000fee <__aeabi_dmul+0x3ea>
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <__aeabi_dmul+0x4d0>)
 8000fe8:	4462      	add	r2, ip
 8000fea:	4094      	lsls	r4, r2
 8000fec:	4325      	orrs	r5, r4
 8000fee:	1e6a      	subs	r2, r5, #1
 8000ff0:	4195      	sbcs	r5, r2
 8000ff2:	002a      	movs	r2, r5
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	2400      	movs	r4, #0
 8000ffc:	4015      	ands	r5, r2
 8000ffe:	4211      	tst	r1, r2
 8001000:	d05b      	beq.n	80010ba <__aeabi_dmul+0x4b6>
 8001002:	210f      	movs	r1, #15
 8001004:	2400      	movs	r4, #0
 8001006:	4011      	ands	r1, r2
 8001008:	2904      	cmp	r1, #4
 800100a:	d053      	beq.n	80010b4 <__aeabi_dmul+0x4b0>
 800100c:	1d11      	adds	r1, r2, #4
 800100e:	4291      	cmp	r1, r2
 8001010:	4192      	sbcs	r2, r2
 8001012:	4252      	negs	r2, r2
 8001014:	18a4      	adds	r4, r4, r2
 8001016:	000a      	movs	r2, r1
 8001018:	0223      	lsls	r3, r4, #8
 800101a:	d54b      	bpl.n	80010b4 <__aeabi_dmul+0x4b0>
 800101c:	2201      	movs	r2, #1
 800101e:	2400      	movs	r4, #0
 8001020:	2500      	movs	r5, #0
 8001022:	e650      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	031b      	lsls	r3, r3, #12
 8001028:	421c      	tst	r4, r3
 800102a:	d009      	beq.n	8001040 <__aeabi_dmul+0x43c>
 800102c:	421e      	tst	r6, r3
 800102e:	d107      	bne.n	8001040 <__aeabi_dmul+0x43c>
 8001030:	4333      	orrs	r3, r6
 8001032:	031c      	lsls	r4, r3, #12
 8001034:	4643      	mov	r3, r8
 8001036:	0015      	movs	r5, r2
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <__aeabi_dmul+0x4cc>)
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	e642      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0312      	lsls	r2, r2, #12
 8001044:	4314      	orrs	r4, r2
 8001046:	0324      	lsls	r4, r4, #12
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <__aeabi_dmul+0x4cc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	9701      	str	r7, [sp, #4]
 800104e:	e63a      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001050:	f000 f936 	bl	80012c0 <__clzsi2>
 8001054:	0001      	movs	r1, r0
 8001056:	0002      	movs	r2, r0
 8001058:	3115      	adds	r1, #21
 800105a:	3220      	adds	r2, #32
 800105c:	291c      	cmp	r1, #28
 800105e:	dc00      	bgt.n	8001062 <__aeabi_dmul+0x45e>
 8001060:	e74b      	b.n	8000efa <__aeabi_dmul+0x2f6>
 8001062:	0034      	movs	r4, r6
 8001064:	3808      	subs	r0, #8
 8001066:	2500      	movs	r5, #0
 8001068:	4084      	lsls	r4, r0
 800106a:	e750      	b.n	8000f0e <__aeabi_dmul+0x30a>
 800106c:	f000 f928 	bl	80012c0 <__clzsi2>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	3215      	adds	r2, #21
 8001076:	3020      	adds	r0, #32
 8001078:	2a1c      	cmp	r2, #28
 800107a:	dc00      	bgt.n	800107e <__aeabi_dmul+0x47a>
 800107c:	e71e      	b.n	8000ebc <__aeabi_dmul+0x2b8>
 800107e:	4656      	mov	r6, sl
 8001080:	3b08      	subs	r3, #8
 8001082:	2200      	movs	r2, #0
 8001084:	409e      	lsls	r6, r3
 8001086:	e723      	b.n	8000ed0 <__aeabi_dmul+0x2cc>
 8001088:	9b00      	ldr	r3, [sp, #0]
 800108a:	469c      	mov	ip, r3
 800108c:	e6e6      	b.n	8000e5c <__aeabi_dmul+0x258>
 800108e:	4912      	ldr	r1, [pc, #72]	; (80010d8 <__aeabi_dmul+0x4d4>)
 8001090:	0022      	movs	r2, r4
 8001092:	4461      	add	r1, ip
 8001094:	002e      	movs	r6, r5
 8001096:	408d      	lsls	r5, r1
 8001098:	408a      	lsls	r2, r1
 800109a:	40c6      	lsrs	r6, r0
 800109c:	1e69      	subs	r1, r5, #1
 800109e:	418d      	sbcs	r5, r1
 80010a0:	4332      	orrs	r2, r6
 80010a2:	432a      	orrs	r2, r5
 80010a4:	40c4      	lsrs	r4, r0
 80010a6:	0753      	lsls	r3, r2, #29
 80010a8:	d0b6      	beq.n	8001018 <__aeabi_dmul+0x414>
 80010aa:	210f      	movs	r1, #15
 80010ac:	4011      	ands	r1, r2
 80010ae:	2904      	cmp	r1, #4
 80010b0:	d1ac      	bne.n	800100c <__aeabi_dmul+0x408>
 80010b2:	e7b1      	b.n	8001018 <__aeabi_dmul+0x414>
 80010b4:	0765      	lsls	r5, r4, #29
 80010b6:	0264      	lsls	r4, r4, #9
 80010b8:	0b24      	lsrs	r4, r4, #12
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	4315      	orrs	r5, r2
 80010be:	2200      	movs	r2, #0
 80010c0:	e601      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0312      	lsls	r2, r2, #12
 80010c6:	4314      	orrs	r4, r2
 80010c8:	0324      	lsls	r4, r4, #12
 80010ca:	4a01      	ldr	r2, [pc, #4]	; (80010d0 <__aeabi_dmul+0x4cc>)
 80010cc:	0b24      	lsrs	r4, r4, #12
 80010ce:	e5fa      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 80010d0:	000007ff 	.word	0x000007ff
 80010d4:	0000043e 	.word	0x0000043e
 80010d8:	0000041e 	.word	0x0000041e

080010dc <__aeabi_i2d>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	2800      	cmp	r0, #0
 80010e0:	d016      	beq.n	8001110 <__aeabi_i2d+0x34>
 80010e2:	17c3      	asrs	r3, r0, #31
 80010e4:	18c5      	adds	r5, r0, r3
 80010e6:	405d      	eors	r5, r3
 80010e8:	0fc4      	lsrs	r4, r0, #31
 80010ea:	0028      	movs	r0, r5
 80010ec:	f000 f8e8 	bl	80012c0 <__clzsi2>
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <__aeabi_i2d+0x5c>)
 80010f2:	1a12      	subs	r2, r2, r0
 80010f4:	280a      	cmp	r0, #10
 80010f6:	dc16      	bgt.n	8001126 <__aeabi_i2d+0x4a>
 80010f8:	0003      	movs	r3, r0
 80010fa:	002e      	movs	r6, r5
 80010fc:	3315      	adds	r3, #21
 80010fe:	409e      	lsls	r6, r3
 8001100:	230b      	movs	r3, #11
 8001102:	1a18      	subs	r0, r3, r0
 8001104:	40c5      	lsrs	r5, r0
 8001106:	0552      	lsls	r2, r2, #21
 8001108:	032d      	lsls	r5, r5, #12
 800110a:	0b2d      	lsrs	r5, r5, #12
 800110c:	0d53      	lsrs	r3, r2, #21
 800110e:	e003      	b.n	8001118 <__aeabi_i2d+0x3c>
 8001110:	2400      	movs	r4, #0
 8001112:	2300      	movs	r3, #0
 8001114:	2500      	movs	r5, #0
 8001116:	2600      	movs	r6, #0
 8001118:	051b      	lsls	r3, r3, #20
 800111a:	432b      	orrs	r3, r5
 800111c:	07e4      	lsls	r4, r4, #31
 800111e:	4323      	orrs	r3, r4
 8001120:	0030      	movs	r0, r6
 8001122:	0019      	movs	r1, r3
 8001124:	bd70      	pop	{r4, r5, r6, pc}
 8001126:	380b      	subs	r0, #11
 8001128:	4085      	lsls	r5, r0
 800112a:	0552      	lsls	r2, r2, #21
 800112c:	032d      	lsls	r5, r5, #12
 800112e:	2600      	movs	r6, #0
 8001130:	0b2d      	lsrs	r5, r5, #12
 8001132:	0d53      	lsrs	r3, r2, #21
 8001134:	e7f0      	b.n	8001118 <__aeabi_i2d+0x3c>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	0000041e 	.word	0x0000041e

0800113c <__aeabi_d2f>:
 800113c:	0002      	movs	r2, r0
 800113e:	004b      	lsls	r3, r1, #1
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	0d5b      	lsrs	r3, r3, #21
 8001144:	030c      	lsls	r4, r1, #12
 8001146:	4e3d      	ldr	r6, [pc, #244]	; (800123c <__aeabi_d2f+0x100>)
 8001148:	0a64      	lsrs	r4, r4, #9
 800114a:	0f40      	lsrs	r0, r0, #29
 800114c:	1c5f      	adds	r7, r3, #1
 800114e:	0fc9      	lsrs	r1, r1, #31
 8001150:	4304      	orrs	r4, r0
 8001152:	00d5      	lsls	r5, r2, #3
 8001154:	4237      	tst	r7, r6
 8001156:	d00a      	beq.n	800116e <__aeabi_d2f+0x32>
 8001158:	4839      	ldr	r0, [pc, #228]	; (8001240 <__aeabi_d2f+0x104>)
 800115a:	181e      	adds	r6, r3, r0
 800115c:	2efe      	cmp	r6, #254	; 0xfe
 800115e:	dd16      	ble.n	800118e <__aeabi_d2f+0x52>
 8001160:	20ff      	movs	r0, #255	; 0xff
 8001162:	2400      	movs	r4, #0
 8001164:	05c0      	lsls	r0, r0, #23
 8001166:	4320      	orrs	r0, r4
 8001168:	07c9      	lsls	r1, r1, #31
 800116a:	4308      	orrs	r0, r1
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <__aeabi_d2f+0x44>
 8001172:	432c      	orrs	r4, r5
 8001174:	d026      	beq.n	80011c4 <__aeabi_d2f+0x88>
 8001176:	2205      	movs	r2, #5
 8001178:	0192      	lsls	r2, r2, #6
 800117a:	0a54      	lsrs	r4, r2, #9
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	e7f1      	b.n	8001164 <__aeabi_d2f+0x28>
 8001180:	4325      	orrs	r5, r4
 8001182:	d0ed      	beq.n	8001160 <__aeabi_d2f+0x24>
 8001184:	2080      	movs	r0, #128	; 0x80
 8001186:	03c0      	lsls	r0, r0, #15
 8001188:	4304      	orrs	r4, r0
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	e7ea      	b.n	8001164 <__aeabi_d2f+0x28>
 800118e:	2e00      	cmp	r6, #0
 8001190:	dd1b      	ble.n	80011ca <__aeabi_d2f+0x8e>
 8001192:	0192      	lsls	r2, r2, #6
 8001194:	1e53      	subs	r3, r2, #1
 8001196:	419a      	sbcs	r2, r3
 8001198:	00e4      	lsls	r4, r4, #3
 800119a:	0f6d      	lsrs	r5, r5, #29
 800119c:	4322      	orrs	r2, r4
 800119e:	432a      	orrs	r2, r5
 80011a0:	0753      	lsls	r3, r2, #29
 80011a2:	d048      	beq.n	8001236 <__aeabi_d2f+0xfa>
 80011a4:	230f      	movs	r3, #15
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d000      	beq.n	80011ae <__aeabi_d2f+0x72>
 80011ac:	3204      	adds	r2, #4
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	04db      	lsls	r3, r3, #19
 80011b2:	4013      	ands	r3, r2
 80011b4:	d03f      	beq.n	8001236 <__aeabi_d2f+0xfa>
 80011b6:	1c70      	adds	r0, r6, #1
 80011b8:	2efe      	cmp	r6, #254	; 0xfe
 80011ba:	d0d1      	beq.n	8001160 <__aeabi_d2f+0x24>
 80011bc:	0192      	lsls	r2, r2, #6
 80011be:	0a54      	lsrs	r4, r2, #9
 80011c0:	b2c0      	uxtb	r0, r0
 80011c2:	e7cf      	b.n	8001164 <__aeabi_d2f+0x28>
 80011c4:	2000      	movs	r0, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	e7cc      	b.n	8001164 <__aeabi_d2f+0x28>
 80011ca:	0032      	movs	r2, r6
 80011cc:	3217      	adds	r2, #23
 80011ce:	db22      	blt.n	8001216 <__aeabi_d2f+0xda>
 80011d0:	2080      	movs	r0, #128	; 0x80
 80011d2:	0400      	lsls	r0, r0, #16
 80011d4:	4320      	orrs	r0, r4
 80011d6:	241e      	movs	r4, #30
 80011d8:	1ba4      	subs	r4, r4, r6
 80011da:	2c1f      	cmp	r4, #31
 80011dc:	dd1d      	ble.n	800121a <__aeabi_d2f+0xde>
 80011de:	2202      	movs	r2, #2
 80011e0:	4252      	negs	r2, r2
 80011e2:	1b96      	subs	r6, r2, r6
 80011e4:	0002      	movs	r2, r0
 80011e6:	40f2      	lsrs	r2, r6
 80011e8:	0016      	movs	r6, r2
 80011ea:	2c20      	cmp	r4, #32
 80011ec:	d004      	beq.n	80011f8 <__aeabi_d2f+0xbc>
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <__aeabi_d2f+0x108>)
 80011f0:	4694      	mov	ip, r2
 80011f2:	4463      	add	r3, ip
 80011f4:	4098      	lsls	r0, r3
 80011f6:	4305      	orrs	r5, r0
 80011f8:	002a      	movs	r2, r5
 80011fa:	1e53      	subs	r3, r2, #1
 80011fc:	419a      	sbcs	r2, r3
 80011fe:	4332      	orrs	r2, r6
 8001200:	2600      	movs	r6, #0
 8001202:	0753      	lsls	r3, r2, #29
 8001204:	d1ce      	bne.n	80011a4 <__aeabi_d2f+0x68>
 8001206:	2480      	movs	r4, #128	; 0x80
 8001208:	0013      	movs	r3, r2
 800120a:	04e4      	lsls	r4, r4, #19
 800120c:	2001      	movs	r0, #1
 800120e:	4023      	ands	r3, r4
 8001210:	4222      	tst	r2, r4
 8001212:	d1d3      	bne.n	80011bc <__aeabi_d2f+0x80>
 8001214:	e7b0      	b.n	8001178 <__aeabi_d2f+0x3c>
 8001216:	2300      	movs	r3, #0
 8001218:	e7ad      	b.n	8001176 <__aeabi_d2f+0x3a>
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <__aeabi_d2f+0x10c>)
 800121c:	4694      	mov	ip, r2
 800121e:	002a      	movs	r2, r5
 8001220:	40e2      	lsrs	r2, r4
 8001222:	0014      	movs	r4, r2
 8001224:	002a      	movs	r2, r5
 8001226:	4463      	add	r3, ip
 8001228:	409a      	lsls	r2, r3
 800122a:	4098      	lsls	r0, r3
 800122c:	1e55      	subs	r5, r2, #1
 800122e:	41aa      	sbcs	r2, r5
 8001230:	4302      	orrs	r2, r0
 8001232:	4322      	orrs	r2, r4
 8001234:	e7e4      	b.n	8001200 <__aeabi_d2f+0xc4>
 8001236:	0033      	movs	r3, r6
 8001238:	e79e      	b.n	8001178 <__aeabi_d2f+0x3c>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	000007fe 	.word	0x000007fe
 8001240:	fffffc80 	.word	0xfffffc80
 8001244:	fffffca2 	.word	0xfffffca2
 8001248:	fffffc82 	.word	0xfffffc82

0800124c <__aeabi_cfrcmple>:
 800124c:	4684      	mov	ip, r0
 800124e:	0008      	movs	r0, r1
 8001250:	4661      	mov	r1, ip
 8001252:	e7ff      	b.n	8001254 <__aeabi_cfcmpeq>

08001254 <__aeabi_cfcmpeq>:
 8001254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001256:	f000 f8c9 	bl	80013ec <__lesf2>
 800125a:	2800      	cmp	r0, #0
 800125c:	d401      	bmi.n	8001262 <__aeabi_cfcmpeq+0xe>
 800125e:	2100      	movs	r1, #0
 8001260:	42c8      	cmn	r0, r1
 8001262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001264 <__aeabi_fcmpeq>:
 8001264:	b510      	push	{r4, lr}
 8001266:	f000 f855 	bl	8001314 <__eqsf2>
 800126a:	4240      	negs	r0, r0
 800126c:	3001      	adds	r0, #1
 800126e:	bd10      	pop	{r4, pc}

08001270 <__aeabi_fcmplt>:
 8001270:	b510      	push	{r4, lr}
 8001272:	f000 f8bb 	bl	80013ec <__lesf2>
 8001276:	2800      	cmp	r0, #0
 8001278:	db01      	blt.n	800127e <__aeabi_fcmplt+0xe>
 800127a:	2000      	movs	r0, #0
 800127c:	bd10      	pop	{r4, pc}
 800127e:	2001      	movs	r0, #1
 8001280:	bd10      	pop	{r4, pc}
 8001282:	46c0      	nop			; (mov r8, r8)

08001284 <__aeabi_fcmple>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f000 f8b1 	bl	80013ec <__lesf2>
 800128a:	2800      	cmp	r0, #0
 800128c:	dd01      	ble.n	8001292 <__aeabi_fcmple+0xe>
 800128e:	2000      	movs	r0, #0
 8001290:	bd10      	pop	{r4, pc}
 8001292:	2001      	movs	r0, #1
 8001294:	bd10      	pop	{r4, pc}
 8001296:	46c0      	nop			; (mov r8, r8)

08001298 <__aeabi_fcmpgt>:
 8001298:	b510      	push	{r4, lr}
 800129a:	f000 f861 	bl	8001360 <__gesf2>
 800129e:	2800      	cmp	r0, #0
 80012a0:	dc01      	bgt.n	80012a6 <__aeabi_fcmpgt+0xe>
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	2001      	movs	r0, #1
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <__aeabi_fcmpge>:
 80012ac:	b510      	push	{r4, lr}
 80012ae:	f000 f857 	bl	8001360 <__gesf2>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	da01      	bge.n	80012ba <__aeabi_fcmpge+0xe>
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	2001      	movs	r0, #1
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <__clzsi2>:
 80012c0:	211c      	movs	r1, #28
 80012c2:	2301      	movs	r3, #1
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d301      	bcc.n	80012ce <__clzsi2+0xe>
 80012ca:	0c00      	lsrs	r0, r0, #16
 80012cc:	3910      	subs	r1, #16
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	4298      	cmp	r0, r3
 80012d2:	d301      	bcc.n	80012d8 <__clzsi2+0x18>
 80012d4:	0a00      	lsrs	r0, r0, #8
 80012d6:	3908      	subs	r1, #8
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	4298      	cmp	r0, r3
 80012dc:	d301      	bcc.n	80012e2 <__clzsi2+0x22>
 80012de:	0900      	lsrs	r0, r0, #4
 80012e0:	3904      	subs	r1, #4
 80012e2:	a202      	add	r2, pc, #8	; (adr r2, 80012ec <__clzsi2+0x2c>)
 80012e4:	5c10      	ldrb	r0, [r2, r0]
 80012e6:	1840      	adds	r0, r0, r1
 80012e8:	4770      	bx	lr
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	02020304 	.word	0x02020304
 80012f0:	01010101 	.word	0x01010101
	...

080012fc <__clzdi2>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	2900      	cmp	r1, #0
 8001300:	d103      	bne.n	800130a <__clzdi2+0xe>
 8001302:	f7ff ffdd 	bl	80012c0 <__clzsi2>
 8001306:	3020      	adds	r0, #32
 8001308:	e002      	b.n	8001310 <__clzdi2+0x14>
 800130a:	0008      	movs	r0, r1
 800130c:	f7ff ffd8 	bl	80012c0 <__clzsi2>
 8001310:	bd10      	pop	{r4, pc}
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <__eqsf2>:
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	0042      	lsls	r2, r0, #1
 8001318:	0245      	lsls	r5, r0, #9
 800131a:	024e      	lsls	r6, r1, #9
 800131c:	004c      	lsls	r4, r1, #1
 800131e:	0fc3      	lsrs	r3, r0, #31
 8001320:	0a6d      	lsrs	r5, r5, #9
 8001322:	2001      	movs	r0, #1
 8001324:	0e12      	lsrs	r2, r2, #24
 8001326:	0a76      	lsrs	r6, r6, #9
 8001328:	0e24      	lsrs	r4, r4, #24
 800132a:	0fc9      	lsrs	r1, r1, #31
 800132c:	2aff      	cmp	r2, #255	; 0xff
 800132e:	d006      	beq.n	800133e <__eqsf2+0x2a>
 8001330:	2cff      	cmp	r4, #255	; 0xff
 8001332:	d003      	beq.n	800133c <__eqsf2+0x28>
 8001334:	42a2      	cmp	r2, r4
 8001336:	d101      	bne.n	800133c <__eqsf2+0x28>
 8001338:	42b5      	cmp	r5, r6
 800133a:	d006      	beq.n	800134a <__eqsf2+0x36>
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2d00      	cmp	r5, #0
 8001340:	d1fc      	bne.n	800133c <__eqsf2+0x28>
 8001342:	2cff      	cmp	r4, #255	; 0xff
 8001344:	d1fa      	bne.n	800133c <__eqsf2+0x28>
 8001346:	2e00      	cmp	r6, #0
 8001348:	d1f8      	bne.n	800133c <__eqsf2+0x28>
 800134a:	428b      	cmp	r3, r1
 800134c:	d006      	beq.n	800135c <__eqsf2+0x48>
 800134e:	2001      	movs	r0, #1
 8001350:	2a00      	cmp	r2, #0
 8001352:	d1f3      	bne.n	800133c <__eqsf2+0x28>
 8001354:	0028      	movs	r0, r5
 8001356:	1e43      	subs	r3, r0, #1
 8001358:	4198      	sbcs	r0, r3
 800135a:	e7ef      	b.n	800133c <__eqsf2+0x28>
 800135c:	2000      	movs	r0, #0
 800135e:	e7ed      	b.n	800133c <__eqsf2+0x28>

08001360 <__gesf2>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	0042      	lsls	r2, r0, #1
 8001364:	0245      	lsls	r5, r0, #9
 8001366:	024e      	lsls	r6, r1, #9
 8001368:	004c      	lsls	r4, r1, #1
 800136a:	0fc3      	lsrs	r3, r0, #31
 800136c:	0a6d      	lsrs	r5, r5, #9
 800136e:	0e12      	lsrs	r2, r2, #24
 8001370:	0a76      	lsrs	r6, r6, #9
 8001372:	0e24      	lsrs	r4, r4, #24
 8001374:	0fc8      	lsrs	r0, r1, #31
 8001376:	2aff      	cmp	r2, #255	; 0xff
 8001378:	d01b      	beq.n	80013b2 <__gesf2+0x52>
 800137a:	2cff      	cmp	r4, #255	; 0xff
 800137c:	d00e      	beq.n	800139c <__gesf2+0x3c>
 800137e:	2a00      	cmp	r2, #0
 8001380:	d11b      	bne.n	80013ba <__gesf2+0x5a>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d101      	bne.n	800138a <__gesf2+0x2a>
 8001386:	2e00      	cmp	r6, #0
 8001388:	d01c      	beq.n	80013c4 <__gesf2+0x64>
 800138a:	2d00      	cmp	r5, #0
 800138c:	d00c      	beq.n	80013a8 <__gesf2+0x48>
 800138e:	4283      	cmp	r3, r0
 8001390:	d01c      	beq.n	80013cc <__gesf2+0x6c>
 8001392:	2102      	movs	r1, #2
 8001394:	1e58      	subs	r0, r3, #1
 8001396:	4008      	ands	r0, r1
 8001398:	3801      	subs	r0, #1
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	2e00      	cmp	r6, #0
 800139e:	d122      	bne.n	80013e6 <__gesf2+0x86>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d1f4      	bne.n	800138e <__gesf2+0x2e>
 80013a4:	2d00      	cmp	r5, #0
 80013a6:	d1f2      	bne.n	800138e <__gesf2+0x2e>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d1f6      	bne.n	800139a <__gesf2+0x3a>
 80013ac:	2001      	movs	r0, #1
 80013ae:	4240      	negs	r0, r0
 80013b0:	e7f3      	b.n	800139a <__gesf2+0x3a>
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	d117      	bne.n	80013e6 <__gesf2+0x86>
 80013b6:	2cff      	cmp	r4, #255	; 0xff
 80013b8:	d0f0      	beq.n	800139c <__gesf2+0x3c>
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	d1e7      	bne.n	800138e <__gesf2+0x2e>
 80013be:	2e00      	cmp	r6, #0
 80013c0:	d1e5      	bne.n	800138e <__gesf2+0x2e>
 80013c2:	e7e6      	b.n	8001392 <__gesf2+0x32>
 80013c4:	2000      	movs	r0, #0
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d0e7      	beq.n	800139a <__gesf2+0x3a>
 80013ca:	e7e2      	b.n	8001392 <__gesf2+0x32>
 80013cc:	42a2      	cmp	r2, r4
 80013ce:	dc05      	bgt.n	80013dc <__gesf2+0x7c>
 80013d0:	dbea      	blt.n	80013a8 <__gesf2+0x48>
 80013d2:	42b5      	cmp	r5, r6
 80013d4:	d802      	bhi.n	80013dc <__gesf2+0x7c>
 80013d6:	d3e7      	bcc.n	80013a8 <__gesf2+0x48>
 80013d8:	2000      	movs	r0, #0
 80013da:	e7de      	b.n	800139a <__gesf2+0x3a>
 80013dc:	4243      	negs	r3, r0
 80013de:	4158      	adcs	r0, r3
 80013e0:	0040      	lsls	r0, r0, #1
 80013e2:	3801      	subs	r0, #1
 80013e4:	e7d9      	b.n	800139a <__gesf2+0x3a>
 80013e6:	2002      	movs	r0, #2
 80013e8:	4240      	negs	r0, r0
 80013ea:	e7d6      	b.n	800139a <__gesf2+0x3a>

080013ec <__lesf2>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	0042      	lsls	r2, r0, #1
 80013f0:	0245      	lsls	r5, r0, #9
 80013f2:	024e      	lsls	r6, r1, #9
 80013f4:	004c      	lsls	r4, r1, #1
 80013f6:	0fc3      	lsrs	r3, r0, #31
 80013f8:	0a6d      	lsrs	r5, r5, #9
 80013fa:	0e12      	lsrs	r2, r2, #24
 80013fc:	0a76      	lsrs	r6, r6, #9
 80013fe:	0e24      	lsrs	r4, r4, #24
 8001400:	0fc8      	lsrs	r0, r1, #31
 8001402:	2aff      	cmp	r2, #255	; 0xff
 8001404:	d00b      	beq.n	800141e <__lesf2+0x32>
 8001406:	2cff      	cmp	r4, #255	; 0xff
 8001408:	d00d      	beq.n	8001426 <__lesf2+0x3a>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d11f      	bne.n	800144e <__lesf2+0x62>
 800140e:	2c00      	cmp	r4, #0
 8001410:	d116      	bne.n	8001440 <__lesf2+0x54>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d114      	bne.n	8001440 <__lesf2+0x54>
 8001416:	2000      	movs	r0, #0
 8001418:	2d00      	cmp	r5, #0
 800141a:	d010      	beq.n	800143e <__lesf2+0x52>
 800141c:	e009      	b.n	8001432 <__lesf2+0x46>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d10c      	bne.n	800143c <__lesf2+0x50>
 8001422:	2cff      	cmp	r4, #255	; 0xff
 8001424:	d113      	bne.n	800144e <__lesf2+0x62>
 8001426:	2e00      	cmp	r6, #0
 8001428:	d108      	bne.n	800143c <__lesf2+0x50>
 800142a:	2a00      	cmp	r2, #0
 800142c:	d008      	beq.n	8001440 <__lesf2+0x54>
 800142e:	4283      	cmp	r3, r0
 8001430:	d012      	beq.n	8001458 <__lesf2+0x6c>
 8001432:	2102      	movs	r1, #2
 8001434:	1e58      	subs	r0, r3, #1
 8001436:	4008      	ands	r0, r1
 8001438:	3801      	subs	r0, #1
 800143a:	e000      	b.n	800143e <__lesf2+0x52>
 800143c:	2002      	movs	r0, #2
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	2d00      	cmp	r5, #0
 8001442:	d1f4      	bne.n	800142e <__lesf2+0x42>
 8001444:	2800      	cmp	r0, #0
 8001446:	d1fa      	bne.n	800143e <__lesf2+0x52>
 8001448:	2001      	movs	r0, #1
 800144a:	4240      	negs	r0, r0
 800144c:	e7f7      	b.n	800143e <__lesf2+0x52>
 800144e:	2c00      	cmp	r4, #0
 8001450:	d1ed      	bne.n	800142e <__lesf2+0x42>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d1eb      	bne.n	800142e <__lesf2+0x42>
 8001456:	e7ec      	b.n	8001432 <__lesf2+0x46>
 8001458:	42a2      	cmp	r2, r4
 800145a:	dc05      	bgt.n	8001468 <__lesf2+0x7c>
 800145c:	dbf2      	blt.n	8001444 <__lesf2+0x58>
 800145e:	42b5      	cmp	r5, r6
 8001460:	d802      	bhi.n	8001468 <__lesf2+0x7c>
 8001462:	d3ef      	bcc.n	8001444 <__lesf2+0x58>
 8001464:	2000      	movs	r0, #0
 8001466:	e7ea      	b.n	800143e <__lesf2+0x52>
 8001468:	4243      	negs	r3, r0
 800146a:	4158      	adcs	r0, r3
 800146c:	0040      	lsls	r0, r0, #1
 800146e:	3801      	subs	r0, #1
 8001470:	e7e5      	b.n	800143e <__lesf2+0x52>
 8001472:	46c0      	nop			; (mov r8, r8)

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fb43 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f8ad 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f981 	bl	8001788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001486:	f000 f931 	bl	80016ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800148a:	f000 f8ef 	bl	800166c <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Tell TMP102 that we want to read from the temperature register
	     buf[0] = REG_TEMP;
 800148e:	2200      	movs	r2, #0
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	701a      	strb	r2, [r3, #0]
	     ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8001494:	2390      	movs	r3, #144	; 0x90
 8001496:	b299      	uxth	r1, r3
 8001498:	2515      	movs	r5, #21
 800149a:	197c      	adds	r4, r7, r5
 800149c:	1d3a      	adds	r2, r7, #4
 800149e:	4847      	ldr	r0, [pc, #284]	; (80015bc <main+0x148>)
 80014a0:	2301      	movs	r3, #1
 80014a2:	425b      	negs	r3, r3
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2301      	movs	r3, #1
 80014a8:	f000 feb8 	bl	800221c <HAL_I2C_Master_Transmit>
 80014ac:	0003      	movs	r3, r0
 80014ae:	7023      	strb	r3, [r4, #0]
	     if ( ret != HAL_OK ) {
 80014b0:	197b      	adds	r3, r7, r5
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <main+0x56>
	       strcpy((char*)buf, "Error Tx\r\n");
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <main+0x14c>)
 80014bc:	ca03      	ldmia	r2!, {r0, r1}
 80014be:	c303      	stmia	r3!, {r0, r1}
 80014c0:	8811      	ldrh	r1, [r2, #0]
 80014c2:	8019      	strh	r1, [r3, #0]
 80014c4:	7892      	ldrb	r2, [r2, #2]
 80014c6:	709a      	strb	r2, [r3, #2]
 80014c8:	e066      	b.n	8001598 <main+0x124>
	     } else {

	       // Read 2 bytes from the temperature register
	       ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80014ca:	2390      	movs	r3, #144	; 0x90
 80014cc:	b299      	uxth	r1, r3
 80014ce:	2515      	movs	r5, #21
 80014d0:	197c      	adds	r4, r7, r5
 80014d2:	1d3a      	adds	r2, r7, #4
 80014d4:	4839      	ldr	r0, [pc, #228]	; (80015bc <main+0x148>)
 80014d6:	2301      	movs	r3, #1
 80014d8:	425b      	negs	r3, r3
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2302      	movs	r3, #2
 80014de:	f000 ffa5 	bl	800242c <HAL_I2C_Master_Receive>
 80014e2:	0003      	movs	r3, r0
 80014e4:	7023      	strb	r3, [r4, #0]
	       if ( ret != HAL_OK ) {
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <main+0x8c>
	         strcpy((char*)buf, "Error Rx\r\n");
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <main+0x150>)
 80014f2:	ca03      	ldmia	r2!, {r0, r1}
 80014f4:	c303      	stmia	r3!, {r0, r1}
 80014f6:	8811      	ldrh	r1, [r2, #0]
 80014f8:	8019      	strh	r1, [r3, #0]
 80014fa:	7892      	ldrb	r2, [r2, #2]
 80014fc:	709a      	strb	r2, [r3, #2]
 80014fe:	e04b      	b.n	8001598 <main+0x124>
	       } else {

	         //Combine the bytes
	         val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	b219      	sxth	r1, r3
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b21a      	sxth	r2, r3
 8001512:	2016      	movs	r0, #22
 8001514:	183b      	adds	r3, r7, r0
 8001516:	430a      	orrs	r2, r1
 8001518:	801a      	strh	r2, [r3, #0]

	         // Convert to 2's complement, since temperature can be negative
	         if ( val > 0x7FF ) {
 800151a:	0001      	movs	r1, r0
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	5e9a      	ldrsh	r2, [r3, r2]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	429a      	cmp	r2, r3
 8001528:	db05      	blt.n	8001536 <main+0xc2>
	           val |= 0xF000;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	187a      	adds	r2, r7, r1
 800152e:	8812      	ldrh	r2, [r2, #0]
 8001530:	4925      	ldr	r1, [pc, #148]	; (80015c8 <main+0x154>)
 8001532:	430a      	orrs	r2, r1
 8001534:	801a      	strh	r2, [r3, #0]
	         }

	         // Convert to float temperature value (Celsius)
	         temp_c = val * 0.0625;
 8001536:	2316      	movs	r3, #22
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	2200      	movs	r2, #0
 800153c:	5e9b      	ldrsh	r3, [r3, r2]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fdcc 	bl	80010dc <__aeabi_i2d>
 8001544:	2200      	movs	r2, #0
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <main+0x158>)
 8001548:	f7ff fb5c 	bl	8000c04 <__aeabi_dmul>
 800154c:	0002      	movs	r2, r0
 800154e:	000b      	movs	r3, r1
 8001550:	0010      	movs	r0, r2
 8001552:	0019      	movs	r1, r3
 8001554:	f7ff fdf2 	bl	800113c <__aeabi_d2f>
 8001558:	1c03      	adds	r3, r0, #0
 800155a:	613b      	str	r3, [r7, #16]

	         // Convert temperature to decimal format
	         temp_c *= 100;
 800155c:	491c      	ldr	r1, [pc, #112]	; (80015d0 <main+0x15c>)
 800155e:	6938      	ldr	r0, [r7, #16]
 8001560:	f7ff f85c 	bl	800061c <__aeabi_fmul>
 8001564:	1c03      	adds	r3, r0, #0
 8001566:	613b      	str	r3, [r7, #16]
	         sprintf((char*)buf,
	               "%u.%u C\r\n",
	               ((unsigned int)temp_c / 100),
 8001568:	6938      	ldr	r0, [r7, #16]
 800156a:	f7fe ff73 	bl	8000454 <__aeabi_f2uiz>
 800156e:	0003      	movs	r3, r0
	         sprintf((char*)buf,
 8001570:	2164      	movs	r1, #100	; 0x64
 8001572:	0018      	movs	r0, r3
 8001574:	f7fe fdd8 	bl	8000128 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	001c      	movs	r4, r3
	               ((unsigned int)temp_c % 100));
 800157c:	6938      	ldr	r0, [r7, #16]
 800157e:	f7fe ff69 	bl	8000454 <__aeabi_f2uiz>
 8001582:	0003      	movs	r3, r0
	         sprintf((char*)buf,
 8001584:	2164      	movs	r1, #100	; 0x64
 8001586:	0018      	movs	r0, r3
 8001588:	f7fe fe54 	bl	8000234 <__aeabi_uidivmod>
 800158c:	000b      	movs	r3, r1
 800158e:	4911      	ldr	r1, [pc, #68]	; (80015d4 <main+0x160>)
 8001590:	1d38      	adds	r0, r7, #4
 8001592:	0022      	movs	r2, r4
 8001594:	f003 f920 	bl	80047d8 <siprintf>
	       }
	     }

	     // Send out buffer (temperature or error message)
	     HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fdb2 	bl	8000104 <strlen>
 80015a0:	0003      	movs	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	1d39      	adds	r1, r7, #4
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x164>)
 80015ac:	f002 fa98 	bl	8003ae0 <HAL_UART_Transmit>

	     // Wait
	     HAL_Delay(2000);
 80015b0:	23fa      	movs	r3, #250	; 0xfa
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 fb2b 	bl	8001c10 <HAL_Delay>
	     buf[0] = REG_TEMP;
 80015ba:	e768      	b.n	800148e <main+0x1a>
 80015bc:	2000008c 	.word	0x2000008c
 80015c0:	080050c4 	.word	0x080050c4
 80015c4:	080050d0 	.word	0x080050d0
 80015c8:	fffff000 	.word	0xfffff000
 80015cc:	3fb00000 	.word	0x3fb00000
 80015d0:	42c80000 	.word	0x42c80000
 80015d4:	080050dc 	.word	0x080050dc
 80015d8:	200000d8 	.word	0x200000d8

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b093      	sub	sp, #76	; 0x4c
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	2410      	movs	r4, #16
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	0018      	movs	r0, r3
 80015e8:	2338      	movs	r3, #56	; 0x38
 80015ea:	001a      	movs	r2, r3
 80015ec:	2100      	movs	r1, #0
 80015ee:	f003 f8eb 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f2:	003b      	movs	r3, r7
 80015f4:	0018      	movs	r0, r3
 80015f6:	2310      	movs	r3, #16
 80015f8:	001a      	movs	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f003 f8e4 	bl	80047c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	0018      	movs	r0, r3
 8001606:	f001 fb4d 	bl	8002ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0052      	lsls	r2, r2, #1
 8001616:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001618:	193b      	adds	r3, r7, r4
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	193b      	adds	r3, r7, r4
 800162c:	0018      	movs	r0, r3
 800162e:	f001 fb85 	bl	8002d3c <HAL_RCC_OscConfig>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001636:	f000 f8f7 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	003b      	movs	r3, r7
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001640:	003b      	movs	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	003b      	movs	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	003b      	movs	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001652:	003b      	movs	r3, r7
 8001654:	2100      	movs	r1, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f001 fe8a 	bl	8003370 <HAL_RCC_ClockConfig>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001660:	f000 f8e2 	bl	8001828 <Error_Handler>
  }
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b013      	add	sp, #76	; 0x4c
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <MX_I2C1_Init+0x7c>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 fd21 	bl	80020f0 <HAL_I2C_Init>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f000 f8b9 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	0018      	movs	r0, r3
 80016bc:	f001 fa5a 	bl	8002b74 <HAL_I2CEx_ConfigAnalogFilter>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f000 f8b0 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fa9d 	bl	8002c0c <HAL_I2CEx_ConfigDigitalFilter>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 f8a7 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000008c 	.word	0x2000008c
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00303d5b 	.word	0x00303d5b

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_USART2_UART_Init+0x94>)
 80016f2:	4a24      	ldr	r2, [pc, #144]	; (8001784 <MX_USART2_UART_Init+0x98>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;//115200;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_USART2_UART_Init+0x94>)
 80016f8:	2296      	movs	r2, #150	; 0x96
 80016fa:	0192      	lsls	r2, r2, #6
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_USART2_UART_Init+0x94>)
 800170c:	22c0      	movs	r2, #192	; 0xc0
 800170e:	00d2      	lsls	r2, r2, #3
 8001710:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001714:	220c      	movs	r2, #12
 8001716:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_USART2_UART_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_USART2_UART_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001738:	0018      	movs	r0, r3
 800173a:	f002 f97b 	bl	8003a34 <HAL_UART_Init>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001742:	f000 f871 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART2_UART_Init+0x94>)
 8001748:	2100      	movs	r1, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f002 ff32 	bl	80045b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001754:	f000 f868 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART2_UART_Init+0x94>)
 800175a:	2100      	movs	r1, #0
 800175c:	0018      	movs	r0, r3
 800175e:	f002 ff69 	bl	8004634 <HAL_UARTEx_SetRxFifoThreshold>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001766:	f000 f85f 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <MX_USART2_UART_Init+0x94>)
 800176c:	0018      	movs	r0, r3
 800176e:	f002 fee7 	bl	8004540 <HAL_UARTEx_DisableFifoMode>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001776:	f000 f857 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000d8 	.word	0x200000d8
 8001784:	40004400 	.word	0x40004400

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	240c      	movs	r4, #12
 8001790:	193b      	adds	r3, r7, r4
 8001792:	0018      	movs	r0, r3
 8001794:	2314      	movs	r3, #20
 8001796:	001a      	movs	r2, r3
 8001798:	2100      	movs	r1, #0
 800179a:	f003 f815 	bl	80047c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a4:	2104      	movs	r1, #4
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017bc:	2120      	movs	r1, #32
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2220      	movs	r2, #32
 80017c8:	4013      	ands	r3, r2
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	2201      	movs	r2, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017e6:	23a0      	movs	r3, #160	; 0xa0
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fc60 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017f4:	0021      	movs	r1, r4
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2220      	movs	r2, #32
 80017fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2201      	movs	r2, #1
 8001800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2202      	movs	r2, #2
 800180c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800180e:	187a      	adds	r2, r7, r1
 8001810:	23a0      	movs	r3, #160	; 0xa0
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fae8 	bl	8001dec <HAL_GPIO_Init>

}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b009      	add	sp, #36	; 0x24
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_MspInit+0x4c>)
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x4c>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_MspInit+0x4c>)
 8001854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_MspInit+0x4c>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0549      	lsls	r1, r1, #21
 800185c:	430a      	orrs	r2, r1
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_MspInit+0x4c>)
 8001862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	055b      	lsls	r3, r3, #21
 8001868:	4013      	ands	r3, r2
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	0018      	movs	r0, r3
 8001874:	f000 f9f0 	bl	8001c58 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b097      	sub	sp, #92	; 0x5c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	2344      	movs	r3, #68	; 0x44
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	0018      	movs	r0, r3
 8001892:	2314      	movs	r3, #20
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f002 ff96 	bl	80047c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	2410      	movs	r4, #16
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	0018      	movs	r0, r3
 80018a2:	2334      	movs	r3, #52	; 0x34
 80018a4:	001a      	movs	r2, r3
 80018a6:	2100      	movs	r1, #0
 80018a8:	f002 ff8e 	bl	80047c8 <memset>
  if(hi2c->Instance==I2C1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_I2C_MspInit+0xbc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d13f      	bne.n	8001936 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2220      	movs	r2, #32
 80018ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018bc:	193b      	adds	r3, r7, r4
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	0018      	movs	r0, r3
 80018c6:	f001 fefd 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018ce:	f7ff ffab 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 80018d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ea:	2144      	movs	r1, #68	; 0x44
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	22c0      	movs	r2, #192	; 0xc0
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2212      	movs	r2, #18
 80018f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2206      	movs	r2, #6
 800190a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	187a      	adds	r2, r7, r1
 800190e:	23a0      	movs	r3, #160	; 0xa0
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fa69 	bl	8001dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 800191c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0389      	lsls	r1, r1, #14
 8001924:	430a      	orrs	r2, r1
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_I2C_MspInit+0xc0>)
 800192a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	039b      	lsls	r3, r3, #14
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b017      	add	sp, #92	; 0x5c
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40005400 	.word	0x40005400
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b097      	sub	sp, #92	; 0x5c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2344      	movs	r3, #68	; 0x44
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f002 ff34 	bl	80047c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001960:	2410      	movs	r4, #16
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2334      	movs	r3, #52	; 0x34
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f002 ff2c 	bl	80047c8 <memset>
  if(huart->Instance==USART2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_UART_MspInit+0xb8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d13e      	bne.n	80019f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001986:	193b      	adds	r3, r7, r4
 8001988:	0018      	movs	r0, r3
 800198a:	f001 fe9b 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001992:	f7ff ff49 	bl	8001828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 8001998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0289      	lsls	r1, r1, #10
 80019a0:	430a      	orrs	r2, r1
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 80019a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_UART_MspInit+0xbc>)
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80019ca:	2144      	movs	r1, #68	; 0x44
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2202      	movs	r2, #2
 80019d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2201      	movs	r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2201      	movs	r2, #1
 80019e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	187a      	adds	r2, r7, r1
 80019ec:	23a0      	movs	r3, #160	; 0xa0
 80019ee:	05db      	lsls	r3, r3, #23
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f9fa 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b017      	add	sp, #92	; 0x5c
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40021000 	.word	0x40021000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 f8d4 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f002 fe84 	bl	8004774 <__errno>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	18d2      	adds	r2, r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <_sbrk+0x64>)
 8001a88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b006      	add	sp, #24
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20009000 	.word	0x20009000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20000168 	.word	0x20000168
 8001aa0:	20000180 	.word	0x20000180

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7ff fff6 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ade:	f002 fe4f 	bl	8004780 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ae2:	f7ff fcc7 	bl	8001474 <main>

08001ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001af4:	08005234 	.word	0x08005234
  ldr r2, =_sbss
 8001af8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001afc:	20000180 	.word	0x20000180

08001b00 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_COMP_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x3c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_Init+0x3c>)
 8001b16:	2180      	movs	r1, #128	; 0x80
 8001b18:	0049      	lsls	r1, r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f810 	bl	8001b44 <HAL_InitTick>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e001      	b.n	8001b34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fe80 	bl	8001834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40022000 	.word	0x40022000

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_InitTick+0x88>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02b      	beq.n	8001bb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_InitTick+0x8c>)
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_InitTick+0x88>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	0019      	movs	r1, r3
 8001b66:	23fa      	movs	r3, #250	; 0xfa
 8001b68:	0098      	lsls	r0, r3, #2
 8001b6a:	f7fe fadd 	bl	8000128 <__udivsi3>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	0019      	movs	r1, r3
 8001b72:	0020      	movs	r0, r4
 8001b74:	f7fe fad8 	bl	8000128 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f929 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d112      	bne.n	8001baa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d80a      	bhi.n	8001ba0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	425b      	negs	r3, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f908 	bl	8001da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_InitTick+0x90>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e00d      	b.n	8001bbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e008      	b.n	8001bbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001baa:	230f      	movs	r3, #15
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e003      	b.n	8001bbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781b      	ldrb	r3, [r3, #0]
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b005      	add	sp, #20
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x1c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	001a      	movs	r2, r3
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x20>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	18d2      	adds	r2, r2, r3
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	2000016c 	.word	0x2000016c

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <HAL_GetTick+0x10>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	2000016c 	.word	0x2000016c

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	001a      	movs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	189b      	adds	r3, r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	f7ff ffe0 	bl	8001bfc <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	fffff9ff 	.word	0xfffff9ff

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b7f      	cmp	r3, #127	; 0x7f
 8001c98:	d828      	bhi.n	8001cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <__NVIC_SetPriority+0xd4>)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	33c0      	adds	r3, #192	; 0xc0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	589b      	ldr	r3, [r3, r2]
 8001caa:	1dfa      	adds	r2, r7, #7
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	0011      	movs	r1, r2
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	21ff      	movs	r1, #255	; 0xff
 8001cb8:	4091      	lsls	r1, r2
 8001cba:	000a      	movs	r2, r1
 8001cbc:	43d2      	mvns	r2, r2
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	401a      	ands	r2, r3
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	4003      	ands	r3, r0
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd8:	481f      	ldr	r0, [pc, #124]	; (8001d58 <__NVIC_SetPriority+0xd4>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	33c0      	adds	r3, #192	; 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cea:	e031      	b.n	8001d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <__NVIC_SetPriority+0xd8>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	3b08      	subs	r3, #8
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3306      	adds	r3, #6
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1dfa      	adds	r2, r7, #7
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	400a      	ands	r2, r1
 8001d10:	00d2      	lsls	r2, r2, #3
 8001d12:	21ff      	movs	r1, #255	; 0xff
 8001d14:	4091      	lsls	r1, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	43d2      	mvns	r2, r2
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	22ff      	movs	r2, #255	; 0xff
 8001d24:	401a      	ands	r2, r3
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4003      	ands	r3, r0
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d34:	4809      	ldr	r0, [pc, #36]	; (8001d5c <__NVIC_SetPriority+0xd8>)
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4023      	ands	r3, r4
 8001d40:	3b08      	subs	r3, #8
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	430a      	orrs	r2, r1
 8001d46:	3306      	adds	r3, #6
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	18c3      	adds	r3, r0, r3
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	601a      	str	r2, [r3, #0]
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b003      	add	sp, #12
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	045b      	lsls	r3, r3, #17
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d301      	bcc.n	8001d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d74:	2301      	movs	r3, #1
 8001d76:	e010      	b.n	8001d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <SysTick_Config+0x44>)
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d80:	2301      	movs	r3, #1
 8001d82:	425b      	negs	r3, r3
 8001d84:	2103      	movs	r1, #3
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff ff7c 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x44>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x44>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	210f      	movs	r1, #15
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff ffbf 	bl	8001d60 <SysTick_Config>
 8001de2:	0003      	movs	r3, r0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e147      	b.n	800208c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4091      	lsls	r1, r2
 8001e06:	000a      	movs	r2, r1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d100      	bne.n	8001e14 <HAL_GPIO_Init+0x28>
 8001e12:	e138      	b.n	8002086 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d005      	beq.n	8001e2c <HAL_GPIO_Init+0x40>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d130      	bne.n	8001e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e62:	2201      	movs	r2, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	2201      	movs	r2, #1
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d017      	beq.n	8001eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d123      	bne.n	8001f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	08da      	lsrs	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3208      	adds	r2, #8
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	58d3      	ldr	r3, [r2, r3]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2107      	movs	r1, #7
 8001f02:	400b      	ands	r3, r1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	6939      	ldr	r1, [r7, #16]
 8001f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d100      	bne.n	8001f60 <HAL_GPIO_Init+0x174>
 8001f5e:	e092      	b.n	8002086 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f60:	4a50      	ldr	r2, [pc, #320]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3318      	adds	r3, #24
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	589b      	ldr	r3, [r3, r2]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	220f      	movs	r2, #15
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	23a0      	movs	r3, #160	; 0xa0
 8001f88:	05db      	lsls	r3, r3, #23
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x1ca>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_GPIO_Init+0x2bc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x1c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_GPIO_Init+0x2c0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x1c2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a43      	ldr	r2, [pc, #268]	; (80020b0 <HAL_GPIO_Init+0x2c4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x1be>
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x1cc>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x1cc>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x1cc>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x1cc>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	00d2      	lsls	r2, r2, #3
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001fc8:	4936      	ldr	r1, [pc, #216]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3318      	adds	r3, #24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	035b      	lsls	r3, r3, #13
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43da      	mvns	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	039b      	lsls	r3, r3, #14
 8002018:	4013      	ands	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 800202c:	2384      	movs	r3, #132	; 0x84
 800202e:	58d3      	ldr	r3, [r2, r3]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	029b      	lsls	r3, r3, #10
 8002044:	4013      	ands	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002050:	4914      	ldr	r1, [pc, #80]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8002052:	2284      	movs	r2, #132	; 0x84
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	58d3      	ldr	r3, [r2, r3]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	4013      	ands	r3, r2
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207e:	4909      	ldr	r1, [pc, #36]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	40da      	lsrs	r2, r3
 8002094:	1e13      	subs	r3, r2, #0
 8002096:	d000      	beq.n	800209a <HAL_GPIO_Init+0x2ae>
 8002098:	e6b0      	b.n	8001dfc <HAL_GPIO_Init+0x10>
  }
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021800 	.word	0x40021800
 80020a8:	50000400 	.word	0x50000400
 80020ac:	50000800 	.word	0x50000800
 80020b0:	50000c00 	.word	0x50000c00

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	0008      	movs	r0, r1
 80020be:	0011      	movs	r1, r2
 80020c0:	1cbb      	adds	r3, r7, #2
 80020c2:	1c02      	adds	r2, r0, #0
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	1c7b      	adds	r3, r7, #1
 80020c8:	1c0a      	adds	r2, r1, #0
 80020ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	1c7b      	adds	r3, r7, #1
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d4:	1cbb      	adds	r3, r7, #2
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020de:	1cbb      	adds	r3, r7, #2
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e082      	b.n	8002208 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2241      	movs	r2, #65	; 0x41
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff fbb3 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2241      	movs	r2, #65	; 0x41
 8002122:	2124      	movs	r1, #36	; 0x24
 8002124:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	438a      	bics	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4934      	ldr	r1, [pc, #208]	; (8002210 <HAL_I2C_Init+0x120>)
 8002140:	400a      	ands	r2, r1
 8002142:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4931      	ldr	r1, [pc, #196]	; (8002214 <HAL_I2C_Init+0x124>)
 8002150:	400a      	ands	r2, r1
 8002152:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d108      	bne.n	800216e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0209      	lsls	r1, r1, #8
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e007      	b.n	800217e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2184      	movs	r1, #132	; 0x84
 8002178:	0209      	lsls	r1, r1, #8
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d104      	bne.n	8002190 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	491f      	ldr	r1, [pc, #124]	; (8002218 <HAL_I2C_Init+0x128>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	491a      	ldr	r1, [pc, #104]	; (8002214 <HAL_I2C_Init+0x124>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69d9      	ldr	r1, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2241      	movs	r2, #65	; 0x41
 80021f4:	2120      	movs	r1, #32
 80021f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2242      	movs	r2, #66	; 0x42
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}
 8002210:	f0ffffff 	.word	0xf0ffffff
 8002214:	ffff7fff 	.word	0xffff7fff
 8002218:	02008000 	.word	0x02008000

0800221c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	0008      	movs	r0, r1
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	0019      	movs	r1, r3
 800222a:	230a      	movs	r3, #10
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	1c02      	adds	r2, r0, #0
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	2308      	movs	r3, #8
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	1c0a      	adds	r2, r1, #0
 8002238:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	5c9b      	ldrb	r3, [r3, r2]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	d000      	beq.n	8002248 <HAL_I2C_Master_Transmit+0x2c>
 8002246:	e0e7      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Master_Transmit+0x3a>
 8002252:	2302      	movs	r3, #2
 8002254:	e0e1      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225e:	f7ff fccd 	bl	8001bfc <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	0219      	lsls	r1, r3, #8
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	f000 fa04 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0cc      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2241      	movs	r2, #65	; 0x41
 8002284:	2121      	movs	r1, #33	; 0x21
 8002286:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2242      	movs	r2, #66	; 0x42
 800228c:	2110      	movs	r1, #16
 800228e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2208      	movs	r2, #8
 80022a0:	18ba      	adds	r2, r7, r2
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d911      	bls.n	80022da <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	045c      	lsls	r4, r3, #17
 80022c6:	230a      	movs	r3, #10
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	8819      	ldrh	r1, [r3, #0]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_I2C_Master_Transmit+0x208>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	0023      	movs	r3, r4
 80022d4:	f000 fc14 	bl	8002b00 <I2C_TransferConfig>
 80022d8:	e075      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049c      	lsls	r4, r3, #18
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	8819      	ldrh	r1, [r3, #0]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_I2C_Master_Transmit+0x208>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	0023      	movs	r3, r4
 80022fc:	f000 fc00 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002300:	e061      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f9f8 	bl	80026fe <I2C_WaitOnTXISFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e081      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d03a      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x1aa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d136      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	0013      	movs	r3, r2
 8002362:	2200      	movs	r2, #0
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	f000 f98b 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e053      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d911      	bls.n	80023a0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	045c      	lsls	r4, r3, #17
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0023      	movs	r3, r4
 800239a:	f000 fbb1 	bl	8002b00 <I2C_TransferConfig>
 800239e:	e012      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	049c      	lsls	r4, r3, #18
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 fb9d 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d198      	bne.n	8002302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f9d0 	bl	800277c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e01a      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	490c      	ldr	r1, [pc, #48]	; (8002428 <HAL_I2C_Master_Transmit+0x20c>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2241      	movs	r2, #65	; 0x41
 8002400:	2120      	movs	r1, #32
 8002402:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2242      	movs	r2, #66	; 0x42
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b007      	add	sp, #28
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	80002000 	.word	0x80002000
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	0008      	movs	r0, r1
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	0019      	movs	r1, r3
 800243a:	230a      	movs	r3, #10
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	1c02      	adds	r2, r0, #0
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	2308      	movs	r3, #8
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	1c0a      	adds	r2, r1, #0
 8002448:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2241      	movs	r2, #65	; 0x41
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b20      	cmp	r3, #32
 8002454:	d000      	beq.n	8002458 <HAL_I2C_Master_Receive+0x2c>
 8002456:	e0e8      	b.n	800262a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	5c9b      	ldrb	r3, [r3, r2]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Master_Receive+0x3a>
 8002462:	2302      	movs	r3, #2
 8002464:	e0e2      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800246e:	f7ff fbc5 	bl	8001bfc <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	0219      	lsls	r1, r3, #8
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2319      	movs	r3, #25
 8002482:	2201      	movs	r2, #1
 8002484:	f000 f8fc 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0cd      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2241      	movs	r2, #65	; 0x41
 8002494:	2122      	movs	r1, #34	; 0x22
 8002496:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2242      	movs	r2, #66	; 0x42
 800249c:	2110      	movs	r1, #16
 800249e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2208      	movs	r2, #8
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d911      	bls.n	80024ea <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	045c      	lsls	r4, r3, #17
 80024d6:	230a      	movs	r3, #10
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	8819      	ldrh	r1, [r3, #0]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <HAL_I2C_Master_Receive+0x208>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	0023      	movs	r3, r4
 80024e4:	f000 fb0c 	bl	8002b00 <I2C_TransferConfig>
 80024e8:	e076      	b.n	80025d8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049c      	lsls	r4, r3, #18
 80024fe:	230a      	movs	r3, #10
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	8819      	ldrh	r1, [r3, #0]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_I2C_Master_Receive+0x208>)
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	0023      	movs	r3, r4
 800250c:	f000 faf8 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002510:	e062      	b.n	80025d8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f96b 	bl	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800251e:	1e03      	subs	r3, r0, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e082      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03a      	beq.n	80025d8 <HAL_I2C_Master_Receive+0x1ac>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d136      	bne.n	80025d8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800256a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	0013      	movs	r3, r2
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	f000 f882 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e053      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d911      	bls.n	80025b2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	045c      	lsls	r4, r3, #17
 800259e:	230a      	movs	r3, #10
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	8819      	ldrh	r1, [r3, #0]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	0023      	movs	r3, r4
 80025ac:	f000 faa8 	bl	8002b00 <I2C_TransferConfig>
 80025b0:	e012      	b.n	80025d8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	049c      	lsls	r4, r3, #18
 80025c6:	230a      	movs	r3, #10
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	8819      	ldrh	r1, [r3, #0]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0023      	movs	r3, r4
 80025d4:	f000 fa94 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d197      	bne.n	8002512 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f8c7 	bl	800277c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e01a      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2220      	movs	r2, #32
 80025fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	490b      	ldr	r1, [pc, #44]	; (8002638 <HAL_I2C_Master_Receive+0x20c>)
 800260a:	400a      	ands	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2241      	movs	r2, #65	; 0x41
 8002612:	2120      	movs	r1, #32
 8002614:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2242      	movs	r2, #66	; 0x42
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b007      	add	sp, #28
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	80002400 	.word	0x80002400
 8002638:	fe00e800 	.word	0xfe00e800

0800263c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d103      	bne.n	800265a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	2b01      	cmp	r3, #1
 8002666:	d007      	beq.n	8002678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	430a      	orrs	r2, r1
 8002676:	619a      	str	r2, [r3, #24]
  }
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002690:	e021      	b.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	d01e      	beq.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7ff fab0 	bl	8001bfc <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d302      	bcc.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	2220      	movs	r2, #32
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2241      	movs	r2, #65	; 0x41
 80026be:	2120      	movs	r1, #32
 80026c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2242      	movs	r2, #66	; 0x42
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	425a      	negs	r2, r3
 80026e6:	4153      	adcs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	001a      	movs	r2, r3
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d0ce      	beq.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b004      	add	sp, #16
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800270a:	e02b      	b.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f8e8 	bl	80028e8 <I2C_IsErrorOccurred>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d001      	beq.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e029      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	d01e      	beq.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7ff fa69 	bl	8001bfc <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d113      	bne.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	2220      	movs	r2, #32
 8002742:	431a      	orrs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2241      	movs	r2, #65	; 0x41
 800274c:	2120      	movs	r1, #32
 800274e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2242      	movs	r2, #66	; 0x42
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d1cc      	bne.n	800270c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002788:	e028      	b.n	80027dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f8a9 	bl	80028e8 <I2C_IsErrorOccurred>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e026      	b.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7ff fa2d 	bl	8001bfc <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	2220      	movs	r2, #32
 80027ba:	431a      	orrs	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2241      	movs	r2, #65	; 0x41
 80027c4:	2120      	movs	r1, #32
 80027c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2242      	movs	r2, #66	; 0x42
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d1cf      	bne.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b004      	add	sp, #16
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002800:	e064      	b.n	80028cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f86d 	bl	80028e8 <I2C_IsErrorOccurred>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e062      	b.n	80028dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2220      	movs	r2, #32
 800281e:	4013      	ands	r3, r2
 8002820:	2b20      	cmp	r3, #32
 8002822:	d138      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2204      	movs	r2, #4
 800282c:	4013      	ands	r3, r2
 800282e:	2b04      	cmp	r3, #4
 8002830:	d105      	bne.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e04e      	b.n	80028dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2210      	movs	r2, #16
 8002846:	4013      	ands	r3, r2
 8002848:	2b10      	cmp	r3, #16
 800284a:	d107      	bne.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2204      	movs	r2, #4
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
 800285a:	e002      	b.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	491b      	ldr	r1, [pc, #108]	; (80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002876:	400a      	ands	r2, r1
 8002878:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2241      	movs	r2, #65	; 0x41
 800287e:	2120      	movs	r1, #32
 8002880:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2242      	movs	r2, #66	; 0x42
 8002886:	2100      	movs	r1, #0
 8002888:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	2100      	movs	r1, #0
 8002890:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e022      	b.n	80028dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7ff f9b1 	bl	8001bfc <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	2220      	movs	r2, #32
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2120      	movs	r1, #32
 80028be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e007      	b.n	80028dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2204      	movs	r2, #4
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d193      	bne.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b08b      	sub	sp, #44	; 0x2c
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f4:	2327      	movs	r3, #39	; 0x27
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2210      	movs	r2, #16
 8002910:	4013      	ands	r3, r2
 8002912:	d100      	bne.n	8002916 <I2C_IsErrorOccurred+0x2e>
 8002914:	e08e      	b.n	8002a34 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2210      	movs	r2, #16
 800291c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291e:	e06c      	b.n	80029fa <I2C_IsErrorOccurred+0x112>
 8002920:	2427      	movs	r4, #39	; 0x27
 8002922:	193b      	adds	r3, r7, r4
 8002924:	193a      	adds	r2, r7, r4
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3301      	adds	r3, #1
 800292e:	d064      	beq.n	80029fa <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff f964 	bl	8001bfc <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	d306      	bcc.n	800294e <I2C_IsErrorOccurred+0x66>
 8002940:	193b      	adds	r3, r7, r4
 8002942:	193a      	adds	r2, r7, r4
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d155      	bne.n	80029fa <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	4013      	ands	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800295c:	2013      	movs	r0, #19
 800295e:	183b      	adds	r3, r7, r0
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	2142      	movs	r1, #66	; 0x42
 8002964:	5c52      	ldrb	r2, [r2, r1]
 8002966:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	401a      	ands	r2, r3
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d137      	bne.n	80029ec <I2C_IsErrorOccurred+0x104>
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	429a      	cmp	r2, r3
 8002984:	d032      	beq.n	80029ec <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8002986:	183b      	adds	r3, r7, r0
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b20      	cmp	r3, #32
 800298c:	d02e      	beq.n	80029ec <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	01c9      	lsls	r1, r1, #7
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029a0:	f7ff f92c 	bl	8001bfc <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	e020      	b.n	80029ec <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029aa:	f7ff f927 	bl	8001bfc <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2027      	movs	r0, #39	; 0x27
 80029b6:	183a      	adds	r2, r7, r0
 80029b8:	1839      	adds	r1, r7, r0
 80029ba:	7809      	ldrb	r1, [r1, #0]
 80029bc:	7011      	strb	r1, [r2, #0]
 80029be:	2b19      	cmp	r3, #25
 80029c0:	d914      	bls.n	80029ec <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	2220      	movs	r2, #32
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2241      	movs	r2, #65	; 0x41
 80029d2:	2120      	movs	r1, #32
 80029d4:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2242      	movs	r2, #66	; 0x42
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80029e6:	183b      	adds	r3, r7, r0
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2220      	movs	r2, #32
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d1d7      	bne.n	80029aa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d004      	beq.n	8002a12 <I2C_IsErrorOccurred+0x12a>
 8002a08:	2327      	movs	r3, #39	; 0x27
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d086      	beq.n	8002920 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a12:	2327      	movs	r3, #39	; 0x27
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2220      	movs	r2, #32
 8002a22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2204      	movs	r2, #4
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a2c:	2327      	movs	r3, #39	; 0x27
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00c      	beq.n	8002a60 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0052      	lsls	r2, r2, #1
 8002a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a58:	2327      	movs	r3, #39	; 0x27
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4013      	ands	r3, r2
 8002a68:	d00c      	beq.n	8002a84 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	00d2      	lsls	r2, r2, #3
 8002a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a7c:	2327      	movs	r3, #39	; 0x27
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d00c      	beq.n	8002aa8 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4313      	orrs	r3, r2
 8002a94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aa0:	2327      	movs	r3, #39	; 0x27
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002aa8:	2327      	movs	r3, #39	; 0x27
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01d      	beq.n	8002aee <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff fdc1 	bl	800263c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	490d      	ldr	r1, [pc, #52]	; (8002afc <I2C_IsErrorOccurred+0x214>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2241      	movs	r2, #65	; 0x41
 8002ada:	2120      	movs	r1, #32
 8002adc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2242      	movs	r2, #66	; 0x42
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002aee:	2327      	movs	r3, #39	; 0x27
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b00b      	add	sp, #44	; 0x2c
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	0008      	movs	r0, r1
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	240a      	movs	r4, #10
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	1c02      	adds	r2, r0, #0
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	2009      	movs	r0, #9
 8002b18:	183b      	adds	r3, r7, r0
 8002b1a:	1c0a      	adds	r2, r1, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	059b      	lsls	r3, r3, #22
 8002b24:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b26:	183b      	adds	r3, r7, r0
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	0419      	lsls	r1, r3, #16
 8002b2c:	23ff      	movs	r3, #255	; 0xff
 8002b2e:	041b      	lsls	r3, r3, #16
 8002b30:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b32:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4a:	0d51      	lsrs	r1, r2, #21
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	00d2      	lsls	r2, r2, #3
 8002b50:	400a      	ands	r2, r1
 8002b52:	4907      	ldr	r1, [pc, #28]	; (8002b70 <I2C_TransferConfig+0x70>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	43d2      	mvns	r2, r2
 8002b58:	401a      	ands	r2, r3
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b007      	add	sp, #28
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	03ff63ff 	.word	0x03ff63ff

08002b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2241      	movs	r2, #65	; 0x41
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d138      	bne.n	8002bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2240      	movs	r2, #64	; 0x40
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e032      	b.n	8002bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2241      	movs	r2, #65	; 0x41
 8002ba4:	2124      	movs	r1, #36	; 0x24
 8002ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4911      	ldr	r1, [pc, #68]	; (8002c08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2241      	movs	r2, #65	; 0x41
 8002bec:	2120      	movs	r1, #32
 8002bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b002      	add	sp, #8
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	ffffefff 	.word	0xffffefff

08002c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2241      	movs	r2, #65	; 0x41
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d139      	bne.n	8002c96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e033      	b.n	8002c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2241      	movs	r2, #65	; 0x41
 8002c3c:	2124      	movs	r1, #36	; 0x24
 8002c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	2120      	movs	r1, #32
 8002c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b004      	add	sp, #16
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	fffff0ff 	.word	0xfffff0ff

08002ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d11f      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	0013      	movs	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	189b      	adds	r3, r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4912      	ldr	r1, [pc, #72]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7fd fa26 	bl	8000128 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce2:	e008      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e001      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e009      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d0ed      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40007000 	.word	0x40007000
 8002d18:	fffff9ff 	.word	0xfffff9ff
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	000f4240 	.word	0x000f4240

08002d24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	23e0      	movs	r3, #224	; 0xe0
 8002d2e:	01db      	lsls	r3, r3, #7
 8002d30:	4013      	ands	r3, r2
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e2fe      	b.n	800334c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d100      	bne.n	8002d5a <HAL_RCC_OscConfig+0x1e>
 8002d58:	e07c      	b.n	8002e54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4bc3      	ldr	r3, [pc, #780]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2238      	movs	r2, #56	; 0x38
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	4bc0      	ldr	r3, [pc, #768]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d102      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4bb9      	ldr	r3, [pc, #740]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d062      	beq.n	8002e52 <HAL_RCC_OscConfig+0x116>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d15e      	bne.n	8002e52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e2d9      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	025b      	lsls	r3, r3, #9
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x78>
 8002da4:	4bb0      	ldr	r3, [pc, #704]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4baf      	ldr	r3, [pc, #700]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0249      	lsls	r1, r1, #9
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e020      	b.n	8002df6 <HAL_RCC_OscConfig+0xba>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	23a0      	movs	r3, #160	; 0xa0
 8002dba:	02db      	lsls	r3, r3, #11
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10e      	bne.n	8002dde <HAL_RCC_OscConfig+0xa2>
 8002dc0:	4ba9      	ldr	r3, [pc, #676]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4ba8      	ldr	r3, [pc, #672]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	02c9      	lsls	r1, r1, #11
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	4ba6      	ldr	r3, [pc, #664]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4ba5      	ldr	r3, [pc, #660]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0249      	lsls	r1, r1, #9
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0xba>
 8002dde:	4ba2      	ldr	r3, [pc, #648]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4ba1      	ldr	r3, [pc, #644]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002de4:	49a1      	ldr	r1, [pc, #644]	; (800306c <HAL_RCC_OscConfig+0x330>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	4b9f      	ldr	r3, [pc, #636]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	499f      	ldr	r1, [pc, #636]	; (8003070 <HAL_RCC_OscConfig+0x334>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d014      	beq.n	8002e28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fefd 	bl	8001bfc <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fef8 	bl	8001bfc <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e298      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	4b93      	ldr	r3, [pc, #588]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	4013      	ands	r3, r2
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xcc>
 8002e26:	e015      	b.n	8002e54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fee8 	bl	8001bfc <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e32:	f7fe fee3 	bl	8001bfc <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e283      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0xf6>
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x124>
 8002e5e:	e099      	b.n	8002f94 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e60:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2238      	movs	r2, #56	; 0x38
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0x144>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d002      	beq.n	8002e86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d135      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e86:	4b78      	ldr	r3, [pc, #480]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x162>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e256      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b72      	ldr	r3, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a74      	ldr	r2, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x338>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	021a      	lsls	r2, r3, #8
 8002eae:	4b6e      	ldr	r3, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002eba:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x33c>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0adb      	lsrs	r3, r3, #11
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	4a68      	ldr	r2, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x340>)
 8002eda:	40da      	lsrs	r2, r3
 8002edc:	4b68      	ldr	r3, [pc, #416]	; (8003080 <HAL_RCC_OscConfig+0x344>)
 8002ede:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_OscConfig+0x348>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fe fe2d 	bl	8001b44 <HAL_InitTick>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d051      	beq.n	8002f92 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e22c      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d030      	beq.n	8002f5c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x33c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b55      	ldr	r3, [pc, #340]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0049      	lsls	r1, r1, #1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe6e 	bl	8001bfc <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe fe69 	bl	8001bfc <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e209      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x338>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	021a      	lsls	r2, r3, #8
 8002f54:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	e01b      	b.n	8002f94 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	4949      	ldr	r1, [pc, #292]	; (8003088 <HAL_RCC_OscConfig+0x34c>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fe48 	bl	8001bfc <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fe43 	bl	8001bfc <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1e3      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x236>
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2208      	movs	r2, #8
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d047      	beq.n	800302e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2238      	movs	r2, #56	; 0x38
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b18      	cmp	r3, #24
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x2f2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d138      	bne.n	800302e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e1c5      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d019      	beq.n	8002ffc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fe12 	bl	8001bfc <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe fe0d 	bl	8001bfc <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1ad      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d0f1      	beq.n	8002fde <HAL_RCC_OscConfig+0x2a2>
 8002ffa:	e018      	b.n	800302e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8002ffe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8003002:	2101      	movs	r1, #1
 8003004:	438a      	bics	r2, r1
 8003006:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fdf8 	bl	8001bfc <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe fdf3 	bl	8001bfc <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e193      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	2202      	movs	r2, #2
 800302a:	4013      	ands	r3, r2
 800302c:	d1f1      	bne.n	8003012 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d100      	bne.n	800303a <HAL_RCC_OscConfig+0x2fe>
 8003038:	e0c6      	b.n	80031c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	231f      	movs	r3, #31
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2238      	movs	r2, #56	; 0x38
 8003048:	4013      	ands	r3, r2
 800304a:	2b20      	cmp	r3, #32
 800304c:	d11e      	bne.n	800308c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_OscConfig+0x32c>)
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2202      	movs	r2, #2
 8003054:	4013      	ands	r3, r2
 8003056:	d100      	bne.n	800305a <HAL_RCC_OscConfig+0x31e>
 8003058:	e0b6      	b.n	80031c8 <HAL_RCC_OscConfig+0x48c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d000      	beq.n	8003064 <HAL_RCC_OscConfig+0x328>
 8003062:	e0b1      	b.n	80031c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e171      	b.n	800334c <HAL_RCC_OscConfig+0x610>
 8003068:	40021000 	.word	0x40021000
 800306c:	fffeffff 	.word	0xfffeffff
 8003070:	fffbffff 	.word	0xfffbffff
 8003074:	ffff80ff 	.word	0xffff80ff
 8003078:	ffffc7ff 	.word	0xffffc7ff
 800307c:	00f42400 	.word	0x00f42400
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004
 8003088:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800308c:	4bb1      	ldr	r3, [pc, #708]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800308e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	055b      	lsls	r3, r3, #21
 8003094:	4013      	ands	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x360>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x362>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4bac      	ldr	r3, [pc, #688]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80030a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a6:	4bab      	ldr	r3, [pc, #684]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0549      	lsls	r1, r1, #21
 80030ac:	430a      	orrs	r2, r1
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80030b0:	4ba8      	ldr	r3, [pc, #672]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80030b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	055b      	lsls	r3, r3, #21
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	4ba4      	ldr	r3, [pc, #656]	; (8003358 <HAL_RCC_OscConfig+0x61c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d11a      	bne.n	8003108 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d2:	4ba1      	ldr	r3, [pc, #644]	; (8003358 <HAL_RCC_OscConfig+0x61c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4ba0      	ldr	r3, [pc, #640]	; (8003358 <HAL_RCC_OscConfig+0x61c>)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	0049      	lsls	r1, r1, #1
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fd8c 	bl	8001bfc <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fd87 	bl	8001bfc <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e127      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fc:	4b96      	ldr	r3, [pc, #600]	; (8003358 <HAL_RCC_OscConfig+0x61c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x3e2>
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003114:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003116:	2101      	movs	r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x41c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x404>
 8003126:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800312a:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800312c:	2104      	movs	r1, #4
 800312e:	430a      	orrs	r2, r1
 8003130:	65da      	str	r2, [r3, #92]	; 0x5c
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	65da      	str	r2, [r3, #92]	; 0x5c
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x41c>
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003144:	4b83      	ldr	r3, [pc, #524]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003146:	2101      	movs	r1, #1
 8003148:	438a      	bics	r2, r1
 800314a:	65da      	str	r2, [r3, #92]	; 0x5c
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800314e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003150:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003152:	2104      	movs	r1, #4
 8003154:	438a      	bics	r2, r1
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d014      	beq.n	800318a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fd4c 	bl	8001bfc <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003168:	e009      	b.n	800317e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fd47 	bl	8001bfc <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4a79      	ldr	r2, [pc, #484]	; (800335c <HAL_RCC_OscConfig+0x620>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0e6      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317e:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2202      	movs	r2, #2
 8003184:	4013      	ands	r3, r2
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x42e>
 8003188:	e013      	b.n	80031b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fe fd37 	bl	8001bfc <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003192:	e009      	b.n	80031a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fd32 	bl	8001bfc <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	4a6f      	ldr	r2, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x620>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0d1      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80031b2:	231f      	movs	r3, #31
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031c2:	4967      	ldr	r1, [pc, #412]	; (8003360 <HAL_RCC_OscConfig+0x624>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x496>
 80031d0:	e0bb      	b.n	800334a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d2:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2238      	movs	r2, #56	; 0x38
 80031d8:	4013      	ands	r3, r2
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d100      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4a4>
 80031de:	e07b      	b.n	80032d8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d156      	bne.n	8003296 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80031ee:	495d      	ldr	r1, [pc, #372]	; (8003364 <HAL_RCC_OscConfig+0x628>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe fd02 	bl	8001bfc <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fcfd 	bl	8001bfc <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e09d      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	049b      	lsls	r3, r3, #18
 8003218:	4013      	ands	r3, r2
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a51      	ldr	r2, [pc, #324]	; (8003368 <HAL_RCC_OscConfig+0x62c>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	431a      	orrs	r2, r3
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0449      	lsls	r1, r1, #17
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0549      	lsls	r1, r1, #21
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fcc6 	bl	8001bfc <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe fcc1 	bl	8001bfc <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e061      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	049b      	lsls	r3, r3, #18
 8003290:	4013      	ands	r3, r2
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x53a>
 8003294:	e059      	b.n	800334a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 800329c:	4931      	ldr	r1, [pc, #196]	; (8003364 <HAL_RCC_OscConfig+0x628>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fcab 	bl	8001bfc <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fca6 	bl	8001bfc <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e046      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	049b      	lsls	r3, r3, #18
 80032c6:	4013      	ands	r3, r2
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80032d0:	4926      	ldr	r1, [pc, #152]	; (800336c <HAL_RCC_OscConfig+0x630>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e038      	b.n	800334a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e033      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x618>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2203      	movs	r2, #3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d126      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2270      	movs	r2, #112	; 0x70
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d11f      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	23fe      	movs	r3, #254	; 0xfe
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d116      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	23f8      	movs	r3, #248	; 0xf8
 800331c:	039b      	lsls	r3, r3, #14
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d10e      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	23e0      	movs	r3, #224	; 0xe0
 800332c:	051b      	lsls	r3, r3, #20
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	0f5b      	lsrs	r3, r3, #29
 800333c:	075a      	lsls	r2, r3, #29
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b008      	add	sp, #32
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	00001388 	.word	0x00001388
 8003360:	efffffff 	.word	0xefffffff
 8003364:	feffffff 	.word	0xfeffffff
 8003368:	11c1808c 	.word	0x11c1808c
 800336c:	eefefffc 	.word	0xeefefffc

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0e9      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d91e      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2207      	movs	r2, #7
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033a4:	f7fe fc2a 	bl	8001bfc <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ae:	f7fe fc25 	bl	8001bfc <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4a6a      	ldr	r2, [pc, #424]	; (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0ca      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2207      	movs	r2, #7
 80033c8:	4013      	ands	r3, r2
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d006      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033e4:	4b60      	ldr	r3, [pc, #384]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	21e0      	movs	r1, #224	; 0xe0
 80033ec:	01c9      	lsls	r1, r1, #7
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a5d      	ldr	r2, [pc, #372]	; (800356c <HAL_RCC_ClockConfig+0x1fc>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4013      	ands	r3, r2
 800340e:	d057      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	d12b      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e097      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	049b      	lsls	r3, r3, #18
 8003438:	4013      	ands	r3, r2
 800343a:	d11f      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e08b      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4013      	ands	r3, r2
 8003452:	d113      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e07f      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d106      	bne.n	800346e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003460:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d108      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e074      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e06d      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2207      	movs	r2, #7
 8003482:	4393      	bics	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003490:	f7fe fbb4 	bl	8001bfc <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003498:	e009      	b.n	80034ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349a:	f7fe fbaf 	bl	8001bfc <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e054      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2238      	movs	r2, #56	; 0x38
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1ec      	bne.n	800349a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d21e      	bcs.n	800350c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2207      	movs	r2, #7
 80034d4:	4393      	bics	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fb8c 	bl	8001bfc <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e8:	e009      	b.n	80034fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ea:	f7fe fb87 	bl	8001bfc <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e02c      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2207      	movs	r2, #7
 8003504:	4013      	ands	r3, r2
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d1ee      	bne.n	80034ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2204      	movs	r2, #4
 8003512:	4013      	ands	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_RCC_ClockConfig+0x200>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800352a:	f000 f829 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800352e:	0001      	movs	r1, r0
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	220f      	movs	r2, #15
 8003538:	401a      	ands	r2, r3
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <HAL_RCC_ClockConfig+0x204>)
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	58d3      	ldr	r3, [r2, r3]
 8003540:	221f      	movs	r2, #31
 8003542:	4013      	ands	r3, r2
 8003544:	000a      	movs	r2, r1
 8003546:	40da      	lsrs	r2, r3
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x208>)
 800354a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x20c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0018      	movs	r0, r3
 8003552:	f7fe faf7 	bl	8001b44 <HAL_InitTick>
 8003556:	0003      	movs	r3, r0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40022000 	.word	0x40022000
 8003564:	00001388 	.word	0x00001388
 8003568:	40021000 	.word	0x40021000
 800356c:	fffff0ff 	.word	0xfffff0ff
 8003570:	ffff8fff 	.word	0xffff8fff
 8003574:	08005168 	.word	0x08005168
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003586:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2238      	movs	r2, #56	; 0x38
 800358c:	4013      	ands	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0adb      	lsrs	r3, r3, #11
 8003596:	2207      	movs	r2, #7
 8003598:	4013      	ands	r3, r2
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	4835      	ldr	r0, [pc, #212]	; (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 80035a6:	f7fc fdbf 	bl	8000128 <__udivsi3>
 80035aa:	0003      	movs	r3, r0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e05d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2238      	movs	r2, #56	; 0x38
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCC_GetSysClockFreq+0x100>)
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e054      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c2:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2238      	movs	r2, #56	; 0x38
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d138      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2203      	movs	r2, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	2207      	movs	r2, #7
 80035e0:	4013      	ands	r3, r2
 80035e2:	3301      	adds	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d10d      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4824      	ldr	r0, [pc, #144]	; (8003680 <HAL_RCC_GetSysClockFreq+0x100>)
 80035f0:	f7fc fd9a 	bl	8000128 <__udivsi3>
 80035f4:	0003      	movs	r3, r0
 80035f6:	0019      	movs	r1, r3
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	227f      	movs	r2, #127	; 0x7f
 8003600:	4013      	ands	r3, r2
 8003602:	434b      	muls	r3, r1
 8003604:	617b      	str	r3, [r7, #20]
        break;
 8003606:	e00d      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	481c      	ldr	r0, [pc, #112]	; (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 800360c:	f7fc fd8c 	bl	8000128 <__udivsi3>
 8003610:	0003      	movs	r3, r0
 8003612:	0019      	movs	r1, r3
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	227f      	movs	r2, #127	; 0x7f
 800361c:	4013      	ands	r3, r2
 800361e:	434b      	muls	r3, r1
 8003620:	617b      	str	r3, [r7, #20]
        break;
 8003622:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0f5b      	lsrs	r3, r3, #29
 800362a:	2207      	movs	r2, #7
 800362c:	4013      	ands	r3, r2
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7fc fd77 	bl	8000128 <__udivsi3>
 800363a:	0003      	movs	r3, r0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e015      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2238      	movs	r2, #56	; 0x38
 8003646:	4013      	ands	r3, r2
 8003648:	2b20      	cmp	r3, #32
 800364a:	d103      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e00b      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003654:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2238      	movs	r2, #56	; 0x38
 800365a:	4013      	ands	r3, r2
 800365c:	2b18      	cmp	r3, #24
 800365e:	d103      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003660:	23fa      	movs	r3, #250	; 0xfa
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e001      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800366c:	693b      	ldr	r3, [r7, #16]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b006      	add	sp, #24
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	40021000 	.word	0x40021000
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	0004      	movs	r4, r0
 80036a2:	f7ff fb3f 	bl	8002d24 <LL_RCC_GetAPB1Prescaler>
 80036a6:	0003      	movs	r3, r0
 80036a8:	0b1a      	lsrs	r2, r3, #12
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	221f      	movs	r2, #31
 80036b2:	4013      	ands	r3, r2
 80036b4:	40dc      	lsrs	r4, r3
 80036b6:	0023      	movs	r3, r4
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	080051a8 	.word	0x080051a8

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036cc:	2313      	movs	r3, #19
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d4:	2312      	movs	r3, #18
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	4013      	ands	r3, r2
 80036e6:	d100      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036e8:	e0a3      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2011      	movs	r0, #17
 80036ec:	183b      	adds	r3, r7, r0
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4bc3      	ldr	r3, [pc, #780]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	055b      	lsls	r3, r3, #21
 80036fa:	4013      	ands	r3, r2
 80036fc:	d110      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4bc0      	ldr	r3, [pc, #768]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003702:	4bbf      	ldr	r3, [pc, #764]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0549      	lsls	r1, r1, #21
 8003708:	430a      	orrs	r2, r1
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
 800370c:	4bbc      	ldr	r3, [pc, #752]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800370e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	055b      	lsls	r3, r3, #21
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	183b      	adds	r3, r7, r0
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003720:	4bb8      	ldr	r3, [pc, #736]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4bb7      	ldr	r3, [pc, #732]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	0049      	lsls	r1, r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800372e:	f7fe fa65 	bl	8001bfc <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	e00b      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fe fa60 	bl	8001bfc <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d904      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003746:	2313      	movs	r3, #19
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2203      	movs	r2, #3
 800374c:	701a      	strb	r2, [r3, #0]
        break;
 800374e:	e005      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003750:	4bac      	ldr	r3, [pc, #688]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d0ed      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800375c:	2313      	movs	r3, #19
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d154      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003766:	4ba6      	ldr	r3, [pc, #664]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4013      	ands	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d019      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d014      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003782:	4b9f      	ldr	r3, [pc, #636]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	4aa0      	ldr	r2, [pc, #640]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003788:	4013      	ands	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	4b9c      	ldr	r3, [pc, #624]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800378e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003790:	4b9b      	ldr	r3, [pc, #620]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	0249      	lsls	r1, r1, #9
 8003796:	430a      	orrs	r2, r1
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379a:	4b99      	ldr	r3, [pc, #612]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800379c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800379e:	4b98      	ldr	r3, [pc, #608]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037a0:	499a      	ldr	r1, [pc, #616]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a6:	4b96      	ldr	r3, [pc, #600]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	d016      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fa22 	bl	8001bfc <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	e00c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fe fa1d 	bl	8001bfc <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a91      	ldr	r2, [pc, #580]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d904      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037ce:	2313      	movs	r3, #19
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2203      	movs	r2, #3
 80037d4:	701a      	strb	r2, [r3, #0]
            break;
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d8:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2202      	movs	r2, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	d0ed      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037e2:	2313      	movs	r3, #19
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ec:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	4a85      	ldr	r2, [pc, #532]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fa:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037fc:	430a      	orrs	r2, r1
 80037fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003800:	e00c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003802:	2312      	movs	r3, #18
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2213      	movs	r2, #19
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e005      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	2312      	movs	r3, #18
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2213      	movs	r2, #19
 8003816:	18ba      	adds	r2, r7, r2
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800381c:	2311      	movs	r3, #17
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b76      	ldr	r3, [pc, #472]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382a:	4b75      	ldr	r3, [pc, #468]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800382c:	4979      	ldr	r1, [pc, #484]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800382e:	400a      	ands	r2, r1
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383c:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	2203      	movs	r2, #3
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800384c:	430a      	orrs	r2, r1
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2202      	movs	r2, #2
 8003856:	4013      	ands	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385a:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	220c      	movs	r2, #12
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b65      	ldr	r3, [pc, #404]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800386a:	430a      	orrs	r2, r1
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003878:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	4a66      	ldr	r2, [pc, #408]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	4b5e      	ldr	r3, [pc, #376]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003888:	430a      	orrs	r2, r1
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4013      	ands	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	4a5f      	ldr	r2, [pc, #380]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038a8:	430a      	orrs	r2, r1
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4013      	ands	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038b8:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e6:	430a      	orrs	r2, r1
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	01db      	lsls	r3, r3, #7
 80038f2:	4013      	ands	r3, r2
 80038f4:	d015      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f6:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	0899      	lsrs	r1, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003904:	430a      	orrs	r2, r1
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1a      	ldr	r2, [r3, #32]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	0249      	lsls	r1, r1, #9
 800391e:	430a      	orrs	r2, r1
 8003920:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	4013      	ands	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	4393      	bics	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800393e:	430a      	orrs	r2, r1
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	039b      	lsls	r3, r3, #14
 800394a:	4013      	ands	r3, r2
 800394c:	d016      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800395e:	430a      	orrs	r2, r1
 8003960:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	03db      	lsls	r3, r3, #15
 800396a:	429a      	cmp	r2, r3
 800396c:	d106      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0449      	lsls	r1, r1, #17
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	03db      	lsls	r3, r3, #15
 8003984:	4013      	ands	r3, r2
 8003986:	d016      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003998:	430a      	orrs	r2, r1
 800399a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	045b      	lsls	r3, r3, #17
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d106      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	0449      	lsls	r1, r1, #17
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4013      	ands	r3, r2
 80039c0:	d016      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	01db      	lsls	r3, r3, #7
 80039de:	429a      	cmp	r2, r3
 80039e0:	d106      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0249      	lsls	r1, r1, #9
 80039ec:	430a      	orrs	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80039f0:	2312      	movs	r3, #18
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b006      	add	sp, #24
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40007000 	.word	0x40007000
 8003a08:	fffffcff 	.word	0xfffffcff
 8003a0c:	fffeffff 	.word	0xfffeffff
 8003a10:	00001388 	.word	0x00001388
 8003a14:	efffffff 	.word	0xefffffff
 8003a18:	fffff3ff 	.word	0xfffff3ff
 8003a1c:	fff3ffff 	.word	0xfff3ffff
 8003a20:	ffcfffff 	.word	0xffcfffff
 8003a24:	ffffcfff 	.word	0xffffcfff
 8003a28:	ffbfffff 	.word	0xffbfffff
 8003a2c:	feffffff 	.word	0xfeffffff
 8003a30:	ffff3fff 	.word	0xffff3fff

08003a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e046      	b.n	8003ad4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2284      	movs	r2, #132	; 0x84
 8003a4a:	589b      	ldr	r3, [r3, r2]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	2100      	movs	r1, #0
 8003a56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fd ff74 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2284      	movs	r2, #132	; 0x84
 8003a64:	2124      	movs	r1, #36	; 0x24
 8003a66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 f8dc 	bl	8003c38 <UART_SetConfig>
 8003a80:	0003      	movs	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e024      	b.n	8003ad4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 fb8d 	bl	80041b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	490d      	ldr	r1, [pc, #52]	; (8003adc <HAL_UART_Init+0xa8>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	212a      	movs	r1, #42	; 0x2a
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 fc25 	bl	800431c <UART_CheckIdleState>
 8003ad2:	0003      	movs	r3, r0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	ffffb7ff 	.word	0xffffb7ff

08003ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	1dbb      	adds	r3, r7, #6
 8003aee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2284      	movs	r2, #132	; 0x84
 8003af4:	589b      	ldr	r3, [r3, r2]
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d000      	beq.n	8003afc <HAL_UART_Transmit+0x1c>
 8003afa:	e097      	b.n	8003c2c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_UART_Transmit+0x2a>
 8003b02:	1dbb      	adds	r3, r7, #6
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e08f      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	015b      	lsls	r3, r3, #5
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d109      	bne.n	8003b2e <HAL_UART_Transmit+0x4e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2201      	movs	r2, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	d001      	beq.n	8003b2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07f      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	5c9b      	ldrb	r3, [r3, r2]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit+0x5c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e078      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	228c      	movs	r2, #140	; 0x8c
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2284      	movs	r2, #132	; 0x84
 8003b50:	2121      	movs	r1, #33	; 0x21
 8003b52:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b54:	f7fe f852 	bl	8001bfc <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1dba      	adds	r2, r7, #6
 8003b60:	2154      	movs	r1, #84	; 0x54
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1dba      	adds	r2, r7, #6
 8003b6a:	2156      	movs	r1, #86	; 0x56
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	015b      	lsls	r3, r3, #5
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d108      	bne.n	8003b8e <HAL_UART_Transmit+0xae>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e003      	b.n	8003b96 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b9e:	e02c      	b.n	8003bfa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0013      	movs	r3, r2
 8003baa:	2200      	movs	r2, #0
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	f000 fbff 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e039      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	05d2      	lsls	r2, r2, #23
 8003bcc:	0dd2      	lsrs	r2, r2, #23
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e007      	b.n	8003be8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2256      	movs	r2, #86	; 0x56
 8003bec:	5a9b      	ldrh	r3, [r3, r2]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2256      	movs	r2, #86	; 0x56
 8003bf8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2256      	movs	r2, #86	; 0x56
 8003bfe:	5a9b      	ldrh	r3, [r3, r2]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cc      	bne.n	8003ba0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	0013      	movs	r3, r2
 8003c10:	2200      	movs	r2, #0
 8003c12:	2140      	movs	r1, #64	; 0x40
 8003c14:	f000 fbcc 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e006      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2284      	movs	r2, #132	; 0x84
 8003c24:	2120      	movs	r1, #32
 8003c26:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b008      	add	sp, #32
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b090      	sub	sp, #64	; 0x40
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	231a      	movs	r3, #26
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4aaf      	ldr	r2, [pc, #700]	; (8003f28 <UART_SetConfig+0x2f0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4aaa      	ldr	r2, [pc, #680]	; (8003f2c <UART_SetConfig+0x2f4>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	0018      	movs	r0, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	68d9      	ldr	r1, [r3, #12]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	0003      	movs	r3, r0
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4aa4      	ldr	r2, [pc, #656]	; (8003f30 <UART_SetConfig+0x2f8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003caa:	4313      	orrs	r3, r2
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a9f      	ldr	r2, [pc, #636]	; (8003f34 <UART_SetConfig+0x2fc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	220f      	movs	r2, #15
 8003ccc:	4393      	bics	r3, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	0003      	movs	r3, r0
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a95      	ldr	r2, [pc, #596]	; (8003f38 <UART_SetConfig+0x300>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d131      	bne.n	8003d4c <UART_SetConfig+0x114>
 8003ce8:	4b94      	ldr	r3, [pc, #592]	; (8003f3c <UART_SetConfig+0x304>)
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	2203      	movs	r2, #3
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d01d      	beq.n	8003d30 <UART_SetConfig+0xf8>
 8003cf4:	d823      	bhi.n	8003d3e <UART_SetConfig+0x106>
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d00c      	beq.n	8003d14 <UART_SetConfig+0xdc>
 8003cfa:	d820      	bhi.n	8003d3e <UART_SetConfig+0x106>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <UART_SetConfig+0xce>
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d00e      	beq.n	8003d22 <UART_SetConfig+0xea>
 8003d04:	e01b      	b.n	8003d3e <UART_SetConfig+0x106>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2220      	movs	r2, #32
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e0b4      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d14:	231b      	movs	r3, #27
 8003d16:	2220      	movs	r2, #32
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	19db      	adds	r3, r3, r7
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e0ad      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d22:	231b      	movs	r3, #27
 8003d24:	2220      	movs	r2, #32
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e0a6      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d30:	231b      	movs	r3, #27
 8003d32:	2220      	movs	r2, #32
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	2208      	movs	r2, #8
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e09f      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d3e:	231b      	movs	r3, #27
 8003d40:	2220      	movs	r2, #32
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	19db      	adds	r3, r3, r7
 8003d46:	2210      	movs	r2, #16
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e098      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7b      	ldr	r2, [pc, #492]	; (8003f40 <UART_SetConfig+0x308>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d131      	bne.n	8003dba <UART_SetConfig+0x182>
 8003d56:	4b79      	ldr	r3, [pc, #484]	; (8003f3c <UART_SetConfig+0x304>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d01d      	beq.n	8003d9e <UART_SetConfig+0x166>
 8003d62:	d823      	bhi.n	8003dac <UART_SetConfig+0x174>
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d00c      	beq.n	8003d82 <UART_SetConfig+0x14a>
 8003d68:	d820      	bhi.n	8003dac <UART_SetConfig+0x174>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <UART_SetConfig+0x13c>
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d00e      	beq.n	8003d90 <UART_SetConfig+0x158>
 8003d72:	e01b      	b.n	8003dac <UART_SetConfig+0x174>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2220      	movs	r2, #32
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e07d      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2220      	movs	r2, #32
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e076      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2204      	movs	r2, #4
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e06f      	b.n	8003e7e <UART_SetConfig+0x246>
 8003d9e:	231b      	movs	r3, #27
 8003da0:	2220      	movs	r2, #32
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	2208      	movs	r2, #8
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e068      	b.n	8003e7e <UART_SetConfig+0x246>
 8003dac:	231b      	movs	r3, #27
 8003dae:	2220      	movs	r2, #32
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2210      	movs	r2, #16
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e061      	b.n	8003e7e <UART_SetConfig+0x246>
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	; (8003f44 <UART_SetConfig+0x30c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d106      	bne.n	8003dd2 <UART_SetConfig+0x19a>
 8003dc4:	231b      	movs	r3, #27
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	189b      	adds	r3, r3, r2
 8003dca:	19db      	adds	r3, r3, r7
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e055      	b.n	8003e7e <UART_SetConfig+0x246>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <UART_SetConfig+0x310>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d106      	bne.n	8003dea <UART_SetConfig+0x1b2>
 8003ddc:	231b      	movs	r3, #27
 8003dde:	2220      	movs	r2, #32
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e049      	b.n	8003e7e <UART_SetConfig+0x246>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a50      	ldr	r2, [pc, #320]	; (8003f30 <UART_SetConfig+0x2f8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d13e      	bne.n	8003e72 <UART_SetConfig+0x23a>
 8003df4:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <UART_SetConfig+0x304>)
 8003df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df8:	23c0      	movs	r3, #192	; 0xc0
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	22c0      	movs	r2, #192	; 0xc0
 8003e00:	0112      	lsls	r2, r2, #4
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <UART_SetConfig+0x21e>
 8003e06:	22c0      	movs	r2, #192	; 0xc0
 8003e08:	0112      	lsls	r2, r2, #4
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d82a      	bhi.n	8003e64 <UART_SetConfig+0x22c>
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	0112      	lsls	r2, r2, #4
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d011      	beq.n	8003e3a <UART_SetConfig+0x202>
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d822      	bhi.n	8003e64 <UART_SetConfig+0x22c>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <UART_SetConfig+0x1f4>
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	00d2      	lsls	r2, r2, #3
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <UART_SetConfig+0x210>
 8003e2a:	e01b      	b.n	8003e64 <UART_SetConfig+0x22c>
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2220      	movs	r2, #32
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e021      	b.n	8003e7e <UART_SetConfig+0x246>
 8003e3a:	231b      	movs	r3, #27
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	2202      	movs	r2, #2
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e01a      	b.n	8003e7e <UART_SetConfig+0x246>
 8003e48:	231b      	movs	r3, #27
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	2204      	movs	r2, #4
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e013      	b.n	8003e7e <UART_SetConfig+0x246>
 8003e56:	231b      	movs	r3, #27
 8003e58:	2220      	movs	r2, #32
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	2208      	movs	r2, #8
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e00c      	b.n	8003e7e <UART_SetConfig+0x246>
 8003e64:	231b      	movs	r3, #27
 8003e66:	2220      	movs	r2, #32
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	19db      	adds	r3, r3, r7
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e005      	b.n	8003e7e <UART_SetConfig+0x246>
 8003e72:	231b      	movs	r3, #27
 8003e74:	2220      	movs	r2, #32
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	19db      	adds	r3, r3, r7
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <UART_SetConfig+0x2f8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d000      	beq.n	8003e8a <UART_SetConfig+0x252>
 8003e88:	e0a9      	b.n	8003fde <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e8a:	231b      	movs	r3, #27
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	19db      	adds	r3, r3, r7
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d015      	beq.n	8003ec4 <UART_SetConfig+0x28c>
 8003e98:	dc18      	bgt.n	8003ecc <UART_SetConfig+0x294>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d00d      	beq.n	8003eba <UART_SetConfig+0x282>
 8003e9e:	dc15      	bgt.n	8003ecc <UART_SetConfig+0x294>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <UART_SetConfig+0x272>
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0x27c>
 8003ea8:	e010      	b.n	8003ecc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7ff fbf5 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb2:	e014      	b.n	8003ede <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <UART_SetConfig+0x314>)
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb8:	e011      	b.n	8003ede <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7ff fb61 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec2:	e00c      	b.n	8003ede <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eca:	e008      	b.n	8003ede <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ed0:	231a      	movs	r3, #26
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
        break;
 8003edc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d100      	bne.n	8003ee6 <UART_SetConfig+0x2ae>
 8003ee4:	e14b      	b.n	800417e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <UART_SetConfig+0x318>)
 8003eec:	0052      	lsls	r2, r2, #1
 8003eee:	5ad3      	ldrh	r3, [r2, r3]
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ef4:	f7fc f918 	bl	8000128 <__udivsi3>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	0013      	movs	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d305      	bcc.n	8003f18 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d91d      	bls.n	8003f54 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f18:	231a      	movs	r3, #26
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e12b      	b.n	800417e <UART_SetConfig+0x546>
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	cfff69f3 	.word	0xcfff69f3
 8003f2c:	ffffcfff 	.word	0xffffcfff
 8003f30:	40008000 	.word	0x40008000
 8003f34:	11fff4ff 	.word	0x11fff4ff
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40004400 	.word	0x40004400
 8003f44:	40004800 	.word	0x40004800
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	080051c8 	.word	0x080051c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <UART_SetConfig+0x574>)
 8003f62:	0052      	lsls	r2, r2, #1
 8003f64:	5ad3      	ldrh	r3, [r2, r3]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	69b8      	ldr	r0, [r7, #24]
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	f7fc fa4e 	bl	8000414 <__aeabi_uldivmod>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	000b      	movs	r3, r1
 8003f7c:	0e11      	lsrs	r1, r2, #24
 8003f7e:	021d      	lsls	r5, r3, #8
 8003f80:	430d      	orrs	r5, r1
 8003f82:	0214      	lsls	r4, r2, #8
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	1900      	adds	r0, r0, r4
 8003f96:	4169      	adcs	r1, r5
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f7fc fa35 	bl	8000414 <__aeabi_uldivmod>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	0013      	movs	r3, r2
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb4:	23c0      	movs	r3, #192	; 0xc0
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d309      	bcc.n	8003fd0 <UART_SetConfig+0x398>
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	035b      	lsls	r3, r3, #13
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d204      	bcs.n	8003fd0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	e0d6      	b.n	800417e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003fd0:	231a      	movs	r3, #26
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	189b      	adds	r3, r3, r2
 8003fd6:	19db      	adds	r3, r3, r7
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e0cf      	b.n	800417e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d000      	beq.n	8003fec <UART_SetConfig+0x3b4>
 8003fea:	e070      	b.n	80040ce <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003fec:	231b      	movs	r3, #27
 8003fee:	2220      	movs	r2, #32
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	19db      	adds	r3, r3, r7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d015      	beq.n	8004026 <UART_SetConfig+0x3ee>
 8003ffa:	dc18      	bgt.n	800402e <UART_SetConfig+0x3f6>
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00d      	beq.n	800401c <UART_SetConfig+0x3e4>
 8004000:	dc15      	bgt.n	800402e <UART_SetConfig+0x3f6>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <UART_SetConfig+0x3d4>
 8004006:	2b02      	cmp	r3, #2
 8004008:	d005      	beq.n	8004016 <UART_SetConfig+0x3de>
 800400a:	e010      	b.n	800402e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff fb44 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004010:	0003      	movs	r3, r0
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004014:	e014      	b.n	8004040 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004016:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <UART_SetConfig+0x578>)
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800401a:	e011      	b.n	8004040 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401c:	f7ff fab0 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004020:	0003      	movs	r3, r0
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004024:	e00c      	b.n	8004040 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800402c:	e008      	b.n	8004040 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004032:	231a      	movs	r3, #26
 8004034:	2220      	movs	r2, #32
 8004036:	189b      	adds	r3, r3, r2
 8004038:	19db      	adds	r3, r3, r7
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
        break;
 800403e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d100      	bne.n	8004048 <UART_SetConfig+0x410>
 8004046:	e09a      	b.n	800417e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	4b57      	ldr	r3, [pc, #348]	; (80041ac <UART_SetConfig+0x574>)
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	5ad3      	ldrh	r3, [r2, r3]
 8004052:	0019      	movs	r1, r3
 8004054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004056:	f7fc f867 	bl	8000128 <__udivsi3>
 800405a:	0003      	movs	r3, r0
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	18d2      	adds	r2, r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0019      	movs	r1, r3
 800406c:	0010      	movs	r0, r2
 800406e:	f7fc f85b 	bl	8000128 <__udivsi3>
 8004072:	0003      	movs	r3, r0
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d921      	bls.n	80040c0 <UART_SetConfig+0x488>
 800407c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	429a      	cmp	r2, r3
 8004084:	d21c      	bcs.n	80040c0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	b29a      	uxth	r2, r3
 800408a:	200e      	movs	r0, #14
 800408c:	2420      	movs	r4, #32
 800408e:	1903      	adds	r3, r0, r4
 8004090:	19db      	adds	r3, r3, r7
 8004092:	210f      	movs	r1, #15
 8004094:	438a      	bics	r2, r1
 8004096:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	b29b      	uxth	r3, r3
 800409e:	2207      	movs	r2, #7
 80040a0:	4013      	ands	r3, r2
 80040a2:	b299      	uxth	r1, r3
 80040a4:	1903      	adds	r3, r0, r4
 80040a6:	19db      	adds	r3, r3, r7
 80040a8:	1902      	adds	r2, r0, r4
 80040aa:	19d2      	adds	r2, r2, r7
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1902      	adds	r2, r0, r4
 80040b8:	19d2      	adds	r2, r2, r7
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e05e      	b.n	800417e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	231a      	movs	r3, #26
 80040c2:	2220      	movs	r2, #32
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e057      	b.n	800417e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ce:	231b      	movs	r3, #27
 80040d0:	2220      	movs	r2, #32
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	19db      	adds	r3, r3, r7
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d015      	beq.n	8004108 <UART_SetConfig+0x4d0>
 80040dc:	dc18      	bgt.n	8004110 <UART_SetConfig+0x4d8>
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d00d      	beq.n	80040fe <UART_SetConfig+0x4c6>
 80040e2:	dc15      	bgt.n	8004110 <UART_SetConfig+0x4d8>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <UART_SetConfig+0x4b6>
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d005      	beq.n	80040f8 <UART_SetConfig+0x4c0>
 80040ec:	e010      	b.n	8004110 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff fad3 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 80040f2:	0003      	movs	r3, r0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040f6:	e014      	b.n	8004122 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <UART_SetConfig+0x578>)
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040fc:	e011      	b.n	8004122 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7ff fa3f 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004102:	0003      	movs	r3, r0
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004106:	e00c      	b.n	8004122 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800410e:	e008      	b.n	8004122 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004114:	231a      	movs	r3, #26
 8004116:	2220      	movs	r2, #32
 8004118:	189b      	adds	r3, r3, r2
 800411a:	19db      	adds	r3, r3, r7
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
        break;
 8004120:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02a      	beq.n	800417e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <UART_SetConfig+0x574>)
 800412e:	0052      	lsls	r2, r2, #1
 8004130:	5ad3      	ldrh	r3, [r2, r3]
 8004132:	0019      	movs	r1, r3
 8004134:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004136:	f7fb fff7 	bl	8000128 <__udivsi3>
 800413a:	0003      	movs	r3, r0
 800413c:	001a      	movs	r2, r3
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	18d2      	adds	r2, r2, r3
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f7fb ffeb 	bl	8000128 <__udivsi3>
 8004152:	0003      	movs	r3, r0
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d90a      	bls.n	8004172 <UART_SetConfig+0x53a>
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	025b      	lsls	r3, r3, #9
 8004162:	429a      	cmp	r2, r3
 8004164:	d205      	bcs.n	8004172 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	b29a      	uxth	r2, r3
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e005      	b.n	800417e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004172:	231a      	movs	r3, #26
 8004174:	2220      	movs	r2, #32
 8004176:	189b      	adds	r3, r3, r2
 8004178:	19db      	adds	r3, r3, r7
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	226a      	movs	r2, #106	; 0x6a
 8004182:	2101      	movs	r1, #1
 8004184:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2268      	movs	r2, #104	; 0x68
 800418a:	2101      	movs	r1, #1
 800418c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	2200      	movs	r2, #0
 8004192:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2200      	movs	r2, #0
 8004198:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800419a:	231a      	movs	r3, #26
 800419c:	2220      	movs	r2, #32
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	781b      	ldrb	r3, [r3, #0]
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b010      	add	sp, #64	; 0x40
 80041aa:	bdb0      	pop	{r4, r5, r7, pc}
 80041ac:	080051c8 	.word	0x080051c8
 80041b0:	00f42400 	.word	0x00f42400

080041b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	2201      	movs	r2, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d00b      	beq.n	80041de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <UART_AdvFeatureConfig+0x144>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d00b      	beq.n	8004200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4a43      	ldr	r2, [pc, #268]	; (80042fc <UART_AdvFeatureConfig+0x148>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	2204      	movs	r2, #4
 8004206:	4013      	ands	r3, r2
 8004208:	d00b      	beq.n	8004222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <UART_AdvFeatureConfig+0x14c>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2208      	movs	r2, #8
 8004228:	4013      	ands	r3, r2
 800422a:	d00b      	beq.n	8004244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4a34      	ldr	r2, [pc, #208]	; (8004304 <UART_AdvFeatureConfig+0x150>)
 8004234:	4013      	ands	r3, r2
 8004236:	0019      	movs	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	2210      	movs	r2, #16
 800424a:	4013      	ands	r3, r2
 800424c:	d00b      	beq.n	8004266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <UART_AdvFeatureConfig+0x154>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2220      	movs	r2, #32
 800426c:	4013      	ands	r3, r2
 800426e:	d00b      	beq.n	8004288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a25      	ldr	r2, [pc, #148]	; (800430c <UART_AdvFeatureConfig+0x158>)
 8004278:	4013      	ands	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2240      	movs	r2, #64	; 0x40
 800428e:	4013      	ands	r3, r2
 8004290:	d01d      	beq.n	80042ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <UART_AdvFeatureConfig+0x15c>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	035b      	lsls	r3, r3, #13
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10b      	bne.n	80042ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <UART_AdvFeatureConfig+0x160>)
 80042be:	4013      	ands	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	4013      	ands	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <UART_AdvFeatureConfig+0x164>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	fffdffff 	.word	0xfffdffff
 80042fc:	fffeffff 	.word	0xfffeffff
 8004300:	fffbffff 	.word	0xfffbffff
 8004304:	ffff7fff 	.word	0xffff7fff
 8004308:	ffffefff 	.word	0xffffefff
 800430c:	ffffdfff 	.word	0xffffdfff
 8004310:	ffefffff 	.word	0xffefffff
 8004314:	ff9fffff 	.word	0xff9fffff
 8004318:	fff7ffff 	.word	0xfff7ffff

0800431c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	228c      	movs	r2, #140	; 0x8c
 8004328:	2100      	movs	r1, #0
 800432a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800432c:	f7fd fc66 	bl	8001bfc <HAL_GetTick>
 8004330:	0003      	movs	r3, r0
 8004332:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2208      	movs	r2, #8
 800433c:	4013      	ands	r3, r2
 800433e:	2b08      	cmp	r3, #8
 8004340:	d10c      	bne.n	800435c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	0391      	lsls	r1, r2, #14
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <UART_CheckIdleState+0x90>)
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	f000 f82e 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e023      	b.n	80043a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2204      	movs	r2, #4
 8004364:	4013      	ands	r3, r2
 8004366:	2b04      	cmp	r3, #4
 8004368:	d10c      	bne.n	8004384 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	03d1      	lsls	r1, r2, #15
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <UART_CheckIdleState+0x90>)
 8004374:	9200      	str	r2, [sp, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	f000 f81a 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e00f      	b.n	80043a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2284      	movs	r2, #132	; 0x84
 8004388:	2120      	movs	r1, #32
 800438a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2288      	movs	r2, #136	; 0x88
 8004390:	2120      	movs	r1, #32
 8004392:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	01ffffff 	.word	0x01ffffff

080043b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b094      	sub	sp, #80	; 0x50
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	e0a7      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	3301      	adds	r3, #1
 80043c6:	d100      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80043c8:	e0a3      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fd fc17 	bl	8001bfc <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d13f      	bne.n	8004460 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ea:	2301      	movs	r3, #1
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	494e      	ldr	r1, [pc, #312]	; (800453c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004412:	f3ef 8310 	mrs	r3, PRIMASK
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
 800441c:	2301      	movs	r3, #1
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2284      	movs	r2, #132	; 0x84
 8004448:	2120      	movs	r1, #32
 800444a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2288      	movs	r2, #136	; 0x88
 8004450:	2120      	movs	r1, #32
 8004452:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e069      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	d052      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	401a      	ands	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	429a      	cmp	r2, r3
 800447e:	d148      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	613b      	str	r3, [r7, #16]
  return(result);
 8004490:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4924      	ldr	r1, [pc, #144]	; (800453c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8310 	mrs	r3, PRIMASK
 80044c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80044c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c6:	2301      	movs	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	438a      	bics	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2284      	movs	r2, #132	; 0x84
 80044f2:	2120      	movs	r1, #32
 80044f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2288      	movs	r2, #136	; 0x88
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	228c      	movs	r2, #140	; 0x8c
 8004502:	2120      	movs	r1, #32
 8004504:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2280      	movs	r2, #128	; 0x80
 800450a:	2100      	movs	r1, #0
 800450c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e010      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	425a      	negs	r2, r3
 8004522:	4153      	adcs	r3, r2
 8004524:	b2db      	uxtb	r3, r3
 8004526:	001a      	movs	r2, r3
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d100      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0x182>
 8004530:	e747      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b014      	add	sp, #80	; 0x50
 800453a:	bd80      	pop	{r7, pc}
 800453c:	fffffe5f 	.word	0xfffffe5f

08004540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	5c9b      	ldrb	r3, [r3, r2]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_UARTEx_DisableFifoMode+0x16>
 8004552:	2302      	movs	r3, #2
 8004554:	e027      	b.n	80045a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2280      	movs	r2, #128	; 0x80
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2284      	movs	r2, #132	; 0x84
 8004562:	2124      	movs	r1, #36	; 0x24
 8004564:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	438a      	bics	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2284      	movs	r2, #132	; 0x84
 8004598:	2120      	movs	r1, #32
 800459a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	dfffffff 	.word	0xdfffffff

080045b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e02e      	b.n	800462a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2284      	movs	r2, #132	; 0x84
 80045d8:	2124      	movs	r1, #36	; 0x24
 80045da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	08d9      	lsrs	r1, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f854 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2284      	movs	r2, #132	; 0x84
 800461c:	2120      	movs	r1, #32
 800461e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e02f      	b.n	80046ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2284      	movs	r2, #132	; 0x84
 8004658:	2124      	movs	r1, #36	; 0x24
 800465a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	438a      	bics	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f813 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2284      	movs	r2, #132	; 0x84
 800469e:	2120      	movs	r1, #32
 80046a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b004      	add	sp, #16
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	f1ffffff 	.word	0xf1ffffff

080046b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	226a      	movs	r2, #106	; 0x6a
 80046cc:	2101      	movs	r1, #1
 80046ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2268      	movs	r2, #104	; 0x68
 80046d4:	2101      	movs	r1, #1
 80046d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d8:	e043      	b.n	8004762 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046da:	260f      	movs	r6, #15
 80046dc:	19bb      	adds	r3, r7, r6
 80046de:	2208      	movs	r2, #8
 80046e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046e2:	200e      	movs	r0, #14
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	2208      	movs	r2, #8
 80046e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	0e5b      	lsrs	r3, r3, #25
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	240d      	movs	r4, #13
 80046f6:	193b      	adds	r3, r7, r4
 80046f8:	2107      	movs	r1, #7
 80046fa:	400a      	ands	r2, r1
 80046fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	0f5b      	lsrs	r3, r3, #29
 8004706:	b2da      	uxtb	r2, r3
 8004708:	250c      	movs	r5, #12
 800470a:	197b      	adds	r3, r7, r5
 800470c:	2107      	movs	r1, #7
 800470e:	400a      	ands	r2, r1
 8004710:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004712:	183b      	adds	r3, r7, r0
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	197a      	adds	r2, r7, r5
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	4914      	ldr	r1, [pc, #80]	; (800476c <UARTEx_SetNbDataToProcess+0xb4>)
 800471c:	5c8a      	ldrb	r2, [r1, r2]
 800471e:	435a      	muls	r2, r3
 8004720:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004722:	197b      	adds	r3, r7, r5
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <UARTEx_SetNbDataToProcess+0xb8>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800472a:	0019      	movs	r1, r3
 800472c:	f7fb fd86 	bl	800023c <__divsi3>
 8004730:	0003      	movs	r3, r0
 8004732:	b299      	uxth	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	226a      	movs	r2, #106	; 0x6a
 8004738:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800473a:	19bb      	adds	r3, r7, r6
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	193a      	adds	r2, r7, r4
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	490a      	ldr	r1, [pc, #40]	; (800476c <UARTEx_SetNbDataToProcess+0xb4>)
 8004744:	5c8a      	ldrb	r2, [r1, r2]
 8004746:	435a      	muls	r2, r3
 8004748:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800474a:	193b      	adds	r3, r7, r4
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <UARTEx_SetNbDataToProcess+0xb8>)
 8004750:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004752:	0019      	movs	r1, r3
 8004754:	f7fb fd72 	bl	800023c <__divsi3>
 8004758:	0003      	movs	r3, r0
 800475a:	b299      	uxth	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2268      	movs	r2, #104	; 0x68
 8004760:	5299      	strh	r1, [r3, r2]
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b005      	add	sp, #20
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	080051e0 	.word	0x080051e0
 8004770:	080051e8 	.word	0x080051e8

08004774 <__errno>:
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <__errno+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	2000000c 	.word	0x2000000c

08004780 <__libc_init_array>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	2600      	movs	r6, #0
 8004784:	4d0c      	ldr	r5, [pc, #48]	; (80047b8 <__libc_init_array+0x38>)
 8004786:	4c0d      	ldr	r4, [pc, #52]	; (80047bc <__libc_init_array+0x3c>)
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	42a6      	cmp	r6, r4
 800478e:	d109      	bne.n	80047a4 <__libc_init_array+0x24>
 8004790:	2600      	movs	r6, #0
 8004792:	f000 fc8b 	bl	80050ac <_init>
 8004796:	4d0a      	ldr	r5, [pc, #40]	; (80047c0 <__libc_init_array+0x40>)
 8004798:	4c0a      	ldr	r4, [pc, #40]	; (80047c4 <__libc_init_array+0x44>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	42a6      	cmp	r6, r4
 80047a0:	d105      	bne.n	80047ae <__libc_init_array+0x2e>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	00b3      	lsls	r3, r6, #2
 80047a6:	58eb      	ldr	r3, [r5, r3]
 80047a8:	4798      	blx	r3
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7ee      	b.n	800478c <__libc_init_array+0xc>
 80047ae:	00b3      	lsls	r3, r6, #2
 80047b0:	58eb      	ldr	r3, [r5, r3]
 80047b2:	4798      	blx	r3
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f2      	b.n	800479e <__libc_init_array+0x1e>
 80047b8:	0800522c 	.word	0x0800522c
 80047bc:	0800522c 	.word	0x0800522c
 80047c0:	0800522c 	.word	0x0800522c
 80047c4:	08005230 	.word	0x08005230

080047c8 <memset>:
 80047c8:	0003      	movs	r3, r0
 80047ca:	1882      	adds	r2, r0, r2
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	7019      	strb	r1, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <siprintf>:
 80047d8:	b40e      	push	{r1, r2, r3}
 80047da:	b500      	push	{lr}
 80047dc:	490b      	ldr	r1, [pc, #44]	; (800480c <siprintf+0x34>)
 80047de:	b09c      	sub	sp, #112	; 0x70
 80047e0:	ab1d      	add	r3, sp, #116	; 0x74
 80047e2:	9002      	str	r0, [sp, #8]
 80047e4:	9006      	str	r0, [sp, #24]
 80047e6:	9107      	str	r1, [sp, #28]
 80047e8:	9104      	str	r1, [sp, #16]
 80047ea:	4809      	ldr	r0, [pc, #36]	; (8004810 <siprintf+0x38>)
 80047ec:	4909      	ldr	r1, [pc, #36]	; (8004814 <siprintf+0x3c>)
 80047ee:	cb04      	ldmia	r3!, {r2}
 80047f0:	9105      	str	r1, [sp, #20]
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	a902      	add	r1, sp, #8
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	f000 f870 	bl	80048dc <_svfiprintf_r>
 80047fc:	2300      	movs	r3, #0
 80047fe:	9a02      	ldr	r2, [sp, #8]
 8004800:	7013      	strb	r3, [r2, #0]
 8004802:	b01c      	add	sp, #112	; 0x70
 8004804:	bc08      	pop	{r3}
 8004806:	b003      	add	sp, #12
 8004808:	4718      	bx	r3
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	7fffffff 	.word	0x7fffffff
 8004810:	2000000c 	.word	0x2000000c
 8004814:	ffff0208 	.word	0xffff0208

08004818 <__ssputs_r>:
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	688e      	ldr	r6, [r1, #8]
 800481c:	b085      	sub	sp, #20
 800481e:	0007      	movs	r7, r0
 8004820:	000c      	movs	r4, r1
 8004822:	9203      	str	r2, [sp, #12]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	429e      	cmp	r6, r3
 8004828:	d83c      	bhi.n	80048a4 <__ssputs_r+0x8c>
 800482a:	2390      	movs	r3, #144	; 0x90
 800482c:	898a      	ldrh	r2, [r1, #12]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	421a      	tst	r2, r3
 8004832:	d034      	beq.n	800489e <__ssputs_r+0x86>
 8004834:	6909      	ldr	r1, [r1, #16]
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	6960      	ldr	r0, [r4, #20]
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	9302      	str	r3, [sp, #8]
 800483e:	2303      	movs	r3, #3
 8004840:	4343      	muls	r3, r0
 8004842:	0fdd      	lsrs	r5, r3, #31
 8004844:	18ed      	adds	r5, r5, r3
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	9802      	ldr	r0, [sp, #8]
 800484a:	3301      	adds	r3, #1
 800484c:	181b      	adds	r3, r3, r0
 800484e:	106d      	asrs	r5, r5, #1
 8004850:	42ab      	cmp	r3, r5
 8004852:	d900      	bls.n	8004856 <__ssputs_r+0x3e>
 8004854:	001d      	movs	r5, r3
 8004856:	0553      	lsls	r3, r2, #21
 8004858:	d532      	bpl.n	80048c0 <__ssputs_r+0xa8>
 800485a:	0029      	movs	r1, r5
 800485c:	0038      	movs	r0, r7
 800485e:	f000 fb53 	bl	8004f08 <_malloc_r>
 8004862:	1e06      	subs	r6, r0, #0
 8004864:	d109      	bne.n	800487a <__ssputs_r+0x62>
 8004866:	230c      	movs	r3, #12
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	2001      	movs	r0, #1
 800486e:	89a2      	ldrh	r2, [r4, #12]
 8004870:	4240      	negs	r0, r0
 8004872:	4313      	orrs	r3, r2
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	b005      	add	sp, #20
 8004878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487a:	9a02      	ldr	r2, [sp, #8]
 800487c:	6921      	ldr	r1, [r4, #16]
 800487e:	f000 faba 	bl	8004df6 <memcpy>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <__ssputs_r+0xc0>)
 8004886:	401a      	ands	r2, r3
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	4313      	orrs	r3, r2
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	9b02      	ldr	r3, [sp, #8]
 8004890:	6126      	str	r6, [r4, #16]
 8004892:	18f6      	adds	r6, r6, r3
 8004894:	6026      	str	r6, [r4, #0]
 8004896:	6165      	str	r5, [r4, #20]
 8004898:	9e01      	ldr	r6, [sp, #4]
 800489a:	1aed      	subs	r5, r5, r3
 800489c:	60a5      	str	r5, [r4, #8]
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	429e      	cmp	r6, r3
 80048a2:	d900      	bls.n	80048a6 <__ssputs_r+0x8e>
 80048a4:	9e01      	ldr	r6, [sp, #4]
 80048a6:	0032      	movs	r2, r6
 80048a8:	9903      	ldr	r1, [sp, #12]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	f000 faac 	bl	8004e08 <memmove>
 80048b0:	68a3      	ldr	r3, [r4, #8]
 80048b2:	2000      	movs	r0, #0
 80048b4:	1b9b      	subs	r3, r3, r6
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	199e      	adds	r6, r3, r6
 80048bc:	6026      	str	r6, [r4, #0]
 80048be:	e7da      	b.n	8004876 <__ssputs_r+0x5e>
 80048c0:	002a      	movs	r2, r5
 80048c2:	0038      	movs	r0, r7
 80048c4:	f000 fb96 	bl	8004ff4 <_realloc_r>
 80048c8:	1e06      	subs	r6, r0, #0
 80048ca:	d1e0      	bne.n	800488e <__ssputs_r+0x76>
 80048cc:	0038      	movs	r0, r7
 80048ce:	6921      	ldr	r1, [r4, #16]
 80048d0:	f000 faae 	bl	8004e30 <_free_r>
 80048d4:	e7c7      	b.n	8004866 <__ssputs_r+0x4e>
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	fffffb7f 	.word	0xfffffb7f

080048dc <_svfiprintf_r>:
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	b0a1      	sub	sp, #132	; 0x84
 80048e0:	9003      	str	r0, [sp, #12]
 80048e2:	001d      	movs	r5, r3
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	000f      	movs	r7, r1
 80048e8:	0016      	movs	r6, r2
 80048ea:	061b      	lsls	r3, r3, #24
 80048ec:	d511      	bpl.n	8004912 <_svfiprintf_r+0x36>
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10e      	bne.n	8004912 <_svfiprintf_r+0x36>
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	f000 fb07 	bl	8004f08 <_malloc_r>
 80048fa:	6038      	str	r0, [r7, #0]
 80048fc:	6138      	str	r0, [r7, #16]
 80048fe:	2800      	cmp	r0, #0
 8004900:	d105      	bne.n	800490e <_svfiprintf_r+0x32>
 8004902:	230c      	movs	r3, #12
 8004904:	9a03      	ldr	r2, [sp, #12]
 8004906:	3801      	subs	r0, #1
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	b021      	add	sp, #132	; 0x84
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490e:	2340      	movs	r3, #64	; 0x40
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	2300      	movs	r3, #0
 8004914:	ac08      	add	r4, sp, #32
 8004916:	6163      	str	r3, [r4, #20]
 8004918:	3320      	adds	r3, #32
 800491a:	7663      	strb	r3, [r4, #25]
 800491c:	3310      	adds	r3, #16
 800491e:	76a3      	strb	r3, [r4, #26]
 8004920:	9507      	str	r5, [sp, #28]
 8004922:	0035      	movs	r5, r6
 8004924:	782b      	ldrb	r3, [r5, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <_svfiprintf_r+0x52>
 800492a:	2b25      	cmp	r3, #37	; 0x25
 800492c:	d147      	bne.n	80049be <_svfiprintf_r+0xe2>
 800492e:	1bab      	subs	r3, r5, r6
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	42b5      	cmp	r5, r6
 8004934:	d00c      	beq.n	8004950 <_svfiprintf_r+0x74>
 8004936:	0032      	movs	r2, r6
 8004938:	0039      	movs	r1, r7
 800493a:	9803      	ldr	r0, [sp, #12]
 800493c:	f7ff ff6c 	bl	8004818 <__ssputs_r>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d100      	bne.n	8004946 <_svfiprintf_r+0x6a>
 8004944:	e0ae      	b.n	8004aa4 <_svfiprintf_r+0x1c8>
 8004946:	6962      	ldr	r2, [r4, #20]
 8004948:	9b05      	ldr	r3, [sp, #20]
 800494a:	4694      	mov	ip, r2
 800494c:	4463      	add	r3, ip
 800494e:	6163      	str	r3, [r4, #20]
 8004950:	782b      	ldrb	r3, [r5, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d100      	bne.n	8004958 <_svfiprintf_r+0x7c>
 8004956:	e0a5      	b.n	8004aa4 <_svfiprintf_r+0x1c8>
 8004958:	2201      	movs	r2, #1
 800495a:	2300      	movs	r3, #0
 800495c:	4252      	negs	r2, r2
 800495e:	6062      	str	r2, [r4, #4]
 8004960:	a904      	add	r1, sp, #16
 8004962:	3254      	adds	r2, #84	; 0x54
 8004964:	1852      	adds	r2, r2, r1
 8004966:	1c6e      	adds	r6, r5, #1
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	60e3      	str	r3, [r4, #12]
 800496c:	60a3      	str	r3, [r4, #8]
 800496e:	7013      	strb	r3, [r2, #0]
 8004970:	65a3      	str	r3, [r4, #88]	; 0x58
 8004972:	2205      	movs	r2, #5
 8004974:	7831      	ldrb	r1, [r6, #0]
 8004976:	4854      	ldr	r0, [pc, #336]	; (8004ac8 <_svfiprintf_r+0x1ec>)
 8004978:	f000 fa32 	bl	8004de0 <memchr>
 800497c:	1c75      	adds	r5, r6, #1
 800497e:	2800      	cmp	r0, #0
 8004980:	d11f      	bne.n	80049c2 <_svfiprintf_r+0xe6>
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	06d3      	lsls	r3, r2, #27
 8004986:	d504      	bpl.n	8004992 <_svfiprintf_r+0xb6>
 8004988:	2353      	movs	r3, #83	; 0x53
 800498a:	a904      	add	r1, sp, #16
 800498c:	185b      	adds	r3, r3, r1
 800498e:	2120      	movs	r1, #32
 8004990:	7019      	strb	r1, [r3, #0]
 8004992:	0713      	lsls	r3, r2, #28
 8004994:	d504      	bpl.n	80049a0 <_svfiprintf_r+0xc4>
 8004996:	2353      	movs	r3, #83	; 0x53
 8004998:	a904      	add	r1, sp, #16
 800499a:	185b      	adds	r3, r3, r1
 800499c:	212b      	movs	r1, #43	; 0x2b
 800499e:	7019      	strb	r1, [r3, #0]
 80049a0:	7833      	ldrb	r3, [r6, #0]
 80049a2:	2b2a      	cmp	r3, #42	; 0x2a
 80049a4:	d016      	beq.n	80049d4 <_svfiprintf_r+0xf8>
 80049a6:	0035      	movs	r5, r6
 80049a8:	2100      	movs	r1, #0
 80049aa:	200a      	movs	r0, #10
 80049ac:	68e3      	ldr	r3, [r4, #12]
 80049ae:	782a      	ldrb	r2, [r5, #0]
 80049b0:	1c6e      	adds	r6, r5, #1
 80049b2:	3a30      	subs	r2, #48	; 0x30
 80049b4:	2a09      	cmp	r2, #9
 80049b6:	d94e      	bls.n	8004a56 <_svfiprintf_r+0x17a>
 80049b8:	2900      	cmp	r1, #0
 80049ba:	d111      	bne.n	80049e0 <_svfiprintf_r+0x104>
 80049bc:	e017      	b.n	80049ee <_svfiprintf_r+0x112>
 80049be:	3501      	adds	r5, #1
 80049c0:	e7b0      	b.n	8004924 <_svfiprintf_r+0x48>
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <_svfiprintf_r+0x1ec>)
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	1ac0      	subs	r0, r0, r3
 80049c8:	2301      	movs	r3, #1
 80049ca:	4083      	lsls	r3, r0
 80049cc:	4313      	orrs	r3, r2
 80049ce:	002e      	movs	r6, r5
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	e7ce      	b.n	8004972 <_svfiprintf_r+0x96>
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	1d19      	adds	r1, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	9107      	str	r1, [sp, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db01      	blt.n	80049e4 <_svfiprintf_r+0x108>
 80049e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e2:	e004      	b.n	80049ee <_svfiprintf_r+0x112>
 80049e4:	425b      	negs	r3, r3
 80049e6:	60e3      	str	r3, [r4, #12]
 80049e8:	2302      	movs	r3, #2
 80049ea:	4313      	orrs	r3, r2
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	782b      	ldrb	r3, [r5, #0]
 80049f0:	2b2e      	cmp	r3, #46	; 0x2e
 80049f2:	d10a      	bne.n	8004a0a <_svfiprintf_r+0x12e>
 80049f4:	786b      	ldrb	r3, [r5, #1]
 80049f6:	2b2a      	cmp	r3, #42	; 0x2a
 80049f8:	d135      	bne.n	8004a66 <_svfiprintf_r+0x18a>
 80049fa:	9b07      	ldr	r3, [sp, #28]
 80049fc:	3502      	adds	r5, #2
 80049fe:	1d1a      	adds	r2, r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	9207      	str	r2, [sp, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	db2b      	blt.n	8004a60 <_svfiprintf_r+0x184>
 8004a08:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0a:	4e30      	ldr	r6, [pc, #192]	; (8004acc <_svfiprintf_r+0x1f0>)
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	0030      	movs	r0, r6
 8004a10:	7829      	ldrb	r1, [r5, #0]
 8004a12:	f000 f9e5 	bl	8004de0 <memchr>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d006      	beq.n	8004a28 <_svfiprintf_r+0x14c>
 8004a1a:	2340      	movs	r3, #64	; 0x40
 8004a1c:	1b80      	subs	r0, r0, r6
 8004a1e:	4083      	lsls	r3, r0
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	3501      	adds	r5, #1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	7829      	ldrb	r1, [r5, #0]
 8004a2a:	2206      	movs	r2, #6
 8004a2c:	4828      	ldr	r0, [pc, #160]	; (8004ad0 <_svfiprintf_r+0x1f4>)
 8004a2e:	1c6e      	adds	r6, r5, #1
 8004a30:	7621      	strb	r1, [r4, #24]
 8004a32:	f000 f9d5 	bl	8004de0 <memchr>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d03c      	beq.n	8004ab4 <_svfiprintf_r+0x1d8>
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <_svfiprintf_r+0x1f8>)
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d125      	bne.n	8004a8c <_svfiprintf_r+0x1b0>
 8004a40:	2207      	movs	r2, #7
 8004a42:	9b07      	ldr	r3, [sp, #28]
 8004a44:	3307      	adds	r3, #7
 8004a46:	4393      	bics	r3, r2
 8004a48:	3308      	adds	r3, #8
 8004a4a:	9307      	str	r3, [sp, #28]
 8004a4c:	6963      	ldr	r3, [r4, #20]
 8004a4e:	9a04      	ldr	r2, [sp, #16]
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	6163      	str	r3, [r4, #20]
 8004a54:	e765      	b.n	8004922 <_svfiprintf_r+0x46>
 8004a56:	4343      	muls	r3, r0
 8004a58:	0035      	movs	r5, r6
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	189b      	adds	r3, r3, r2
 8004a5e:	e7a6      	b.n	80049ae <_svfiprintf_r+0xd2>
 8004a60:	2301      	movs	r3, #1
 8004a62:	425b      	negs	r3, r3
 8004a64:	e7d0      	b.n	8004a08 <_svfiprintf_r+0x12c>
 8004a66:	2300      	movs	r3, #0
 8004a68:	200a      	movs	r0, #10
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	7829      	ldrb	r1, [r5, #0]
 8004a72:	1c6e      	adds	r6, r5, #1
 8004a74:	3930      	subs	r1, #48	; 0x30
 8004a76:	2909      	cmp	r1, #9
 8004a78:	d903      	bls.n	8004a82 <_svfiprintf_r+0x1a6>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0c5      	beq.n	8004a0a <_svfiprintf_r+0x12e>
 8004a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a80:	e7c3      	b.n	8004a0a <_svfiprintf_r+0x12e>
 8004a82:	4342      	muls	r2, r0
 8004a84:	0035      	movs	r5, r6
 8004a86:	2301      	movs	r3, #1
 8004a88:	1852      	adds	r2, r2, r1
 8004a8a:	e7f1      	b.n	8004a70 <_svfiprintf_r+0x194>
 8004a8c:	ab07      	add	r3, sp, #28
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	003a      	movs	r2, r7
 8004a92:	0021      	movs	r1, r4
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <_svfiprintf_r+0x1fc>)
 8004a96:	9803      	ldr	r0, [sp, #12]
 8004a98:	e000      	b.n	8004a9c <_svfiprintf_r+0x1c0>
 8004a9a:	bf00      	nop
 8004a9c:	9004      	str	r0, [sp, #16]
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	d1d3      	bne.n	8004a4c <_svfiprintf_r+0x170>
 8004aa4:	89bb      	ldrh	r3, [r7, #12]
 8004aa6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004aa8:	065b      	lsls	r3, r3, #25
 8004aaa:	d400      	bmi.n	8004aae <_svfiprintf_r+0x1d2>
 8004aac:	e72d      	b.n	800490a <_svfiprintf_r+0x2e>
 8004aae:	2001      	movs	r0, #1
 8004ab0:	4240      	negs	r0, r0
 8004ab2:	e72a      	b.n	800490a <_svfiprintf_r+0x2e>
 8004ab4:	ab07      	add	r3, sp, #28
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	003a      	movs	r2, r7
 8004aba:	0021      	movs	r1, r4
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <_svfiprintf_r+0x1fc>)
 8004abe:	9803      	ldr	r0, [sp, #12]
 8004ac0:	f000 f87c 	bl	8004bbc <_printf_i>
 8004ac4:	e7ea      	b.n	8004a9c <_svfiprintf_r+0x1c0>
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	080051f0 	.word	0x080051f0
 8004acc:	080051f6 	.word	0x080051f6
 8004ad0:	080051fa 	.word	0x080051fa
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	08004819 	.word	0x08004819

08004adc <_printf_common>:
 8004adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ade:	0015      	movs	r5, r2
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	688a      	ldr	r2, [r1, #8]
 8004ae4:	690b      	ldr	r3, [r1, #16]
 8004ae6:	000c      	movs	r4, r1
 8004ae8:	9000      	str	r0, [sp, #0]
 8004aea:	4293      	cmp	r3, r2
 8004aec:	da00      	bge.n	8004af0 <_printf_common+0x14>
 8004aee:	0013      	movs	r3, r2
 8004af0:	0022      	movs	r2, r4
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	3243      	adds	r2, #67	; 0x43
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	d001      	beq.n	8004b00 <_printf_common+0x24>
 8004afc:	3301      	adds	r3, #1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	069b      	lsls	r3, r3, #26
 8004b04:	d502      	bpl.n	8004b0c <_printf_common+0x30>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	2306      	movs	r3, #6
 8004b10:	0017      	movs	r7, r2
 8004b12:	401f      	ands	r7, r3
 8004b14:	421a      	tst	r2, r3
 8004b16:	d027      	beq.n	8004b68 <_printf_common+0x8c>
 8004b18:	0023      	movs	r3, r4
 8004b1a:	3343      	adds	r3, #67	; 0x43
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	1e5a      	subs	r2, r3, #1
 8004b20:	4193      	sbcs	r3, r2
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	0692      	lsls	r2, r2, #26
 8004b26:	d430      	bmi.n	8004b8a <_printf_common+0xae>
 8004b28:	0022      	movs	r2, r4
 8004b2a:	9901      	ldr	r1, [sp, #4]
 8004b2c:	9800      	ldr	r0, [sp, #0]
 8004b2e:	9e08      	ldr	r6, [sp, #32]
 8004b30:	3243      	adds	r2, #67	; 0x43
 8004b32:	47b0      	blx	r6
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d025      	beq.n	8004b84 <_printf_common+0xa8>
 8004b38:	2306      	movs	r3, #6
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	682a      	ldr	r2, [r5, #0]
 8004b3e:	68e1      	ldr	r1, [r4, #12]
 8004b40:	2500      	movs	r5, #0
 8004b42:	4003      	ands	r3, r0
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d103      	bne.n	8004b50 <_printf_common+0x74>
 8004b48:	1a8d      	subs	r5, r1, r2
 8004b4a:	43eb      	mvns	r3, r5
 8004b4c:	17db      	asrs	r3, r3, #31
 8004b4e:	401d      	ands	r5, r3
 8004b50:	68a3      	ldr	r3, [r4, #8]
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	dd01      	ble.n	8004b5c <_printf_common+0x80>
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	18ed      	adds	r5, r5, r3
 8004b5c:	2700      	movs	r7, #0
 8004b5e:	42bd      	cmp	r5, r7
 8004b60:	d120      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e010      	b.n	8004b88 <_printf_common+0xac>
 8004b66:	3701      	adds	r7, #1
 8004b68:	68e3      	ldr	r3, [r4, #12]
 8004b6a:	682a      	ldr	r2, [r5, #0]
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	42bb      	cmp	r3, r7
 8004b70:	ddd2      	ble.n	8004b18 <_printf_common+0x3c>
 8004b72:	0022      	movs	r2, r4
 8004b74:	2301      	movs	r3, #1
 8004b76:	9901      	ldr	r1, [sp, #4]
 8004b78:	9800      	ldr	r0, [sp, #0]
 8004b7a:	9e08      	ldr	r6, [sp, #32]
 8004b7c:	3219      	adds	r2, #25
 8004b7e:	47b0      	blx	r6
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d1f0      	bne.n	8004b66 <_printf_common+0x8a>
 8004b84:	2001      	movs	r0, #1
 8004b86:	4240      	negs	r0, r0
 8004b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b8a:	2030      	movs	r0, #48	; 0x30
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	3143      	adds	r1, #67	; 0x43
 8004b90:	7008      	strb	r0, [r1, #0]
 8004b92:	0021      	movs	r1, r4
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	3145      	adds	r1, #69	; 0x45
 8004b98:	7809      	ldrb	r1, [r1, #0]
 8004b9a:	18a2      	adds	r2, r4, r2
 8004b9c:	3243      	adds	r2, #67	; 0x43
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	7011      	strb	r1, [r2, #0]
 8004ba2:	e7c1      	b.n	8004b28 <_printf_common+0x4c>
 8004ba4:	0022      	movs	r2, r4
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	9901      	ldr	r1, [sp, #4]
 8004baa:	9800      	ldr	r0, [sp, #0]
 8004bac:	9e08      	ldr	r6, [sp, #32]
 8004bae:	321a      	adds	r2, #26
 8004bb0:	47b0      	blx	r6
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xa8>
 8004bb6:	3701      	adds	r7, #1
 8004bb8:	e7d1      	b.n	8004b5e <_printf_common+0x82>
	...

08004bbc <_printf_i>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b08b      	sub	sp, #44	; 0x2c
 8004bc0:	9206      	str	r2, [sp, #24]
 8004bc2:	000a      	movs	r2, r1
 8004bc4:	3243      	adds	r2, #67	; 0x43
 8004bc6:	9307      	str	r3, [sp, #28]
 8004bc8:	9005      	str	r0, [sp, #20]
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	7e0a      	ldrb	r2, [r1, #24]
 8004bce:	000c      	movs	r4, r1
 8004bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bd2:	2a78      	cmp	r2, #120	; 0x78
 8004bd4:	d807      	bhi.n	8004be6 <_printf_i+0x2a>
 8004bd6:	2a62      	cmp	r2, #98	; 0x62
 8004bd8:	d809      	bhi.n	8004bee <_printf_i+0x32>
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d100      	bne.n	8004be0 <_printf_i+0x24>
 8004bde:	e0c1      	b.n	8004d64 <_printf_i+0x1a8>
 8004be0:	2a58      	cmp	r2, #88	; 0x58
 8004be2:	d100      	bne.n	8004be6 <_printf_i+0x2a>
 8004be4:	e08c      	b.n	8004d00 <_printf_i+0x144>
 8004be6:	0026      	movs	r6, r4
 8004be8:	3642      	adds	r6, #66	; 0x42
 8004bea:	7032      	strb	r2, [r6, #0]
 8004bec:	e022      	b.n	8004c34 <_printf_i+0x78>
 8004bee:	0010      	movs	r0, r2
 8004bf0:	3863      	subs	r0, #99	; 0x63
 8004bf2:	2815      	cmp	r0, #21
 8004bf4:	d8f7      	bhi.n	8004be6 <_printf_i+0x2a>
 8004bf6:	f7fb fa8d 	bl	8000114 <__gnu_thumb1_case_shi>
 8004bfa:	0016      	.short	0x0016
 8004bfc:	fff6001f 	.word	0xfff6001f
 8004c00:	fff6fff6 	.word	0xfff6fff6
 8004c04:	001ffff6 	.word	0x001ffff6
 8004c08:	fff6fff6 	.word	0xfff6fff6
 8004c0c:	fff6fff6 	.word	0xfff6fff6
 8004c10:	003600a8 	.word	0x003600a8
 8004c14:	fff6009a 	.word	0xfff6009a
 8004c18:	00b9fff6 	.word	0x00b9fff6
 8004c1c:	0036fff6 	.word	0x0036fff6
 8004c20:	fff6fff6 	.word	0xfff6fff6
 8004c24:	009e      	.short	0x009e
 8004c26:	0026      	movs	r6, r4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	3642      	adds	r6, #66	; 0x42
 8004c2c:	1d11      	adds	r1, r2, #4
 8004c2e:	6019      	str	r1, [r3, #0]
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	7033      	strb	r3, [r6, #0]
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0a7      	b.n	8004d88 <_printf_i+0x1cc>
 8004c38:	6808      	ldr	r0, [r1, #0]
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	1d0a      	adds	r2, r1, #4
 8004c3e:	0605      	lsls	r5, r0, #24
 8004c40:	d50b      	bpl.n	8004c5a <_printf_i+0x9e>
 8004c42:	680d      	ldr	r5, [r1, #0]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	da03      	bge.n	8004c52 <_printf_i+0x96>
 8004c4a:	232d      	movs	r3, #45	; 0x2d
 8004c4c:	9a04      	ldr	r2, [sp, #16]
 8004c4e:	426d      	negs	r5, r5
 8004c50:	7013      	strb	r3, [r2, #0]
 8004c52:	4b61      	ldr	r3, [pc, #388]	; (8004dd8 <_printf_i+0x21c>)
 8004c54:	270a      	movs	r7, #10
 8004c56:	9303      	str	r3, [sp, #12]
 8004c58:	e01b      	b.n	8004c92 <_printf_i+0xd6>
 8004c5a:	680d      	ldr	r5, [r1, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	0641      	lsls	r1, r0, #25
 8004c60:	d5f1      	bpl.n	8004c46 <_printf_i+0x8a>
 8004c62:	b22d      	sxth	r5, r5
 8004c64:	e7ef      	b.n	8004c46 <_printf_i+0x8a>
 8004c66:	680d      	ldr	r5, [r1, #0]
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	1d08      	adds	r0, r1, #4
 8004c6c:	6018      	str	r0, [r3, #0]
 8004c6e:	062e      	lsls	r6, r5, #24
 8004c70:	d501      	bpl.n	8004c76 <_printf_i+0xba>
 8004c72:	680d      	ldr	r5, [r1, #0]
 8004c74:	e003      	b.n	8004c7e <_printf_i+0xc2>
 8004c76:	066d      	lsls	r5, r5, #25
 8004c78:	d5fb      	bpl.n	8004c72 <_printf_i+0xb6>
 8004c7a:	680d      	ldr	r5, [r1, #0]
 8004c7c:	b2ad      	uxth	r5, r5
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <_printf_i+0x21c>)
 8004c80:	2708      	movs	r7, #8
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	2a6f      	cmp	r2, #111	; 0x6f
 8004c86:	d000      	beq.n	8004c8a <_printf_i+0xce>
 8004c88:	3702      	adds	r7, #2
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	3343      	adds	r3, #67	; 0x43
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	60a3      	str	r3, [r4, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	db03      	blt.n	8004ca2 <_printf_i+0xe6>
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	6821      	ldr	r1, [r4, #0]
 8004c9e:	4391      	bics	r1, r2
 8004ca0:	6021      	str	r1, [r4, #0]
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	d102      	bne.n	8004cac <_printf_i+0xf0>
 8004ca6:	9e04      	ldr	r6, [sp, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <_printf_i+0x10a>
 8004cac:	9e04      	ldr	r6, [sp, #16]
 8004cae:	0028      	movs	r0, r5
 8004cb0:	0039      	movs	r1, r7
 8004cb2:	f7fb fabf 	bl	8000234 <__aeabi_uidivmod>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	3e01      	subs	r6, #1
 8004cba:	5c5b      	ldrb	r3, [r3, r1]
 8004cbc:	7033      	strb	r3, [r6, #0]
 8004cbe:	002b      	movs	r3, r5
 8004cc0:	0005      	movs	r5, r0
 8004cc2:	429f      	cmp	r7, r3
 8004cc4:	d9f3      	bls.n	8004cae <_printf_i+0xf2>
 8004cc6:	2f08      	cmp	r7, #8
 8004cc8:	d109      	bne.n	8004cde <_printf_i+0x122>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	07db      	lsls	r3, r3, #31
 8004cce:	d506      	bpl.n	8004cde <_printf_i+0x122>
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	6922      	ldr	r2, [r4, #16]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	dc02      	bgt.n	8004cde <_printf_i+0x122>
 8004cd8:	2330      	movs	r3, #48	; 0x30
 8004cda:	3e01      	subs	r6, #1
 8004cdc:	7033      	strb	r3, [r6, #0]
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	1b9b      	subs	r3, r3, r6
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	9b07      	ldr	r3, [sp, #28]
 8004ce6:	0021      	movs	r1, r4
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	9805      	ldr	r0, [sp, #20]
 8004cec:	9b06      	ldr	r3, [sp, #24]
 8004cee:	aa09      	add	r2, sp, #36	; 0x24
 8004cf0:	f7ff fef4 	bl	8004adc <_printf_common>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d14c      	bne.n	8004d92 <_printf_i+0x1d6>
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	4240      	negs	r0, r0
 8004cfc:	b00b      	add	sp, #44	; 0x2c
 8004cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d00:	3145      	adds	r1, #69	; 0x45
 8004d02:	700a      	strb	r2, [r1, #0]
 8004d04:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <_printf_i+0x21c>)
 8004d06:	9203      	str	r2, [sp, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	ca20      	ldmia	r2!, {r5}
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	0608      	lsls	r0, r1, #24
 8004d12:	d516      	bpl.n	8004d42 <_printf_i+0x186>
 8004d14:	07cb      	lsls	r3, r1, #31
 8004d16:	d502      	bpl.n	8004d1e <_printf_i+0x162>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	4319      	orrs	r1, r3
 8004d1c:	6021      	str	r1, [r4, #0]
 8004d1e:	2710      	movs	r7, #16
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	d1b2      	bne.n	8004c8a <_printf_i+0xce>
 8004d24:	2320      	movs	r3, #32
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	439a      	bics	r2, r3
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	e7ad      	b.n	8004c8a <_printf_i+0xce>
 8004d2e:	2220      	movs	r2, #32
 8004d30:	6809      	ldr	r1, [r1, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	0022      	movs	r2, r4
 8004d38:	2178      	movs	r1, #120	; 0x78
 8004d3a:	3245      	adds	r2, #69	; 0x45
 8004d3c:	7011      	strb	r1, [r2, #0]
 8004d3e:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <_printf_i+0x220>)
 8004d40:	e7e1      	b.n	8004d06 <_printf_i+0x14a>
 8004d42:	0648      	lsls	r0, r1, #25
 8004d44:	d5e6      	bpl.n	8004d14 <_printf_i+0x158>
 8004d46:	b2ad      	uxth	r5, r5
 8004d48:	e7e4      	b.n	8004d14 <_printf_i+0x158>
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	680d      	ldr	r5, [r1, #0]
 8004d4e:	1d10      	adds	r0, r2, #4
 8004d50:	6949      	ldr	r1, [r1, #20]
 8004d52:	6018      	str	r0, [r3, #0]
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	062e      	lsls	r6, r5, #24
 8004d58:	d501      	bpl.n	8004d5e <_printf_i+0x1a2>
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	e002      	b.n	8004d64 <_printf_i+0x1a8>
 8004d5e:	066d      	lsls	r5, r5, #25
 8004d60:	d5fb      	bpl.n	8004d5a <_printf_i+0x19e>
 8004d62:	8019      	strh	r1, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	9e04      	ldr	r6, [sp, #16]
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	e7bb      	b.n	8004ce4 <_printf_i+0x128>
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	1d11      	adds	r1, r2, #4
 8004d70:	6019      	str	r1, [r3, #0]
 8004d72:	6816      	ldr	r6, [r2, #0]
 8004d74:	2100      	movs	r1, #0
 8004d76:	0030      	movs	r0, r6
 8004d78:	6862      	ldr	r2, [r4, #4]
 8004d7a:	f000 f831 	bl	8004de0 <memchr>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d001      	beq.n	8004d86 <_printf_i+0x1ca>
 8004d82:	1b80      	subs	r0, r0, r6
 8004d84:	6060      	str	r0, [r4, #4]
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	6123      	str	r3, [r4, #16]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9a04      	ldr	r2, [sp, #16]
 8004d8e:	7013      	strb	r3, [r2, #0]
 8004d90:	e7a8      	b.n	8004ce4 <_printf_i+0x128>
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	0032      	movs	r2, r6
 8004d96:	9906      	ldr	r1, [sp, #24]
 8004d98:	9805      	ldr	r0, [sp, #20]
 8004d9a:	9d07      	ldr	r5, [sp, #28]
 8004d9c:	47a8      	blx	r5
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d0aa      	beq.n	8004cf8 <_printf_i+0x13c>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	079b      	lsls	r3, r3, #30
 8004da6:	d415      	bmi.n	8004dd4 <_printf_i+0x218>
 8004da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004daa:	68e0      	ldr	r0, [r4, #12]
 8004dac:	4298      	cmp	r0, r3
 8004dae:	daa5      	bge.n	8004cfc <_printf_i+0x140>
 8004db0:	0018      	movs	r0, r3
 8004db2:	e7a3      	b.n	8004cfc <_printf_i+0x140>
 8004db4:	0022      	movs	r2, r4
 8004db6:	2301      	movs	r3, #1
 8004db8:	9906      	ldr	r1, [sp, #24]
 8004dba:	9805      	ldr	r0, [sp, #20]
 8004dbc:	9e07      	ldr	r6, [sp, #28]
 8004dbe:	3219      	adds	r2, #25
 8004dc0:	47b0      	blx	r6
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d098      	beq.n	8004cf8 <_printf_i+0x13c>
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	68e3      	ldr	r3, [r4, #12]
 8004dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	42ab      	cmp	r3, r5
 8004dd0:	dcf0      	bgt.n	8004db4 <_printf_i+0x1f8>
 8004dd2:	e7e9      	b.n	8004da8 <_printf_i+0x1ec>
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	e7f7      	b.n	8004dc8 <_printf_i+0x20c>
 8004dd8:	08005201 	.word	0x08005201
 8004ddc:	08005212 	.word	0x08005212

08004de0 <memchr>:
 8004de0:	b2c9      	uxtb	r1, r1
 8004de2:	1882      	adds	r2, r0, r2
 8004de4:	4290      	cmp	r0, r2
 8004de6:	d101      	bne.n	8004dec <memchr+0xc>
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr
 8004dec:	7803      	ldrb	r3, [r0, #0]
 8004dee:	428b      	cmp	r3, r1
 8004df0:	d0fb      	beq.n	8004dea <memchr+0xa>
 8004df2:	3001      	adds	r0, #1
 8004df4:	e7f6      	b.n	8004de4 <memchr+0x4>

08004df6 <memcpy>:
 8004df6:	2300      	movs	r3, #0
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d100      	bne.n	8004e00 <memcpy+0xa>
 8004dfe:	bd10      	pop	{r4, pc}
 8004e00:	5ccc      	ldrb	r4, [r1, r3]
 8004e02:	54c4      	strb	r4, [r0, r3]
 8004e04:	3301      	adds	r3, #1
 8004e06:	e7f8      	b.n	8004dfa <memcpy+0x4>

08004e08 <memmove>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	4288      	cmp	r0, r1
 8004e0c:	d902      	bls.n	8004e14 <memmove+0xc>
 8004e0e:	188b      	adds	r3, r1, r2
 8004e10:	4298      	cmp	r0, r3
 8004e12:	d303      	bcc.n	8004e1c <memmove+0x14>
 8004e14:	2300      	movs	r3, #0
 8004e16:	e007      	b.n	8004e28 <memmove+0x20>
 8004e18:	5c8b      	ldrb	r3, [r1, r2]
 8004e1a:	5483      	strb	r3, [r0, r2]
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	d2fb      	bcs.n	8004e18 <memmove+0x10>
 8004e20:	bd10      	pop	{r4, pc}
 8004e22:	5ccc      	ldrb	r4, [r1, r3]
 8004e24:	54c4      	strb	r4, [r0, r3]
 8004e26:	3301      	adds	r3, #1
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1fa      	bne.n	8004e22 <memmove+0x1a>
 8004e2c:	e7f8      	b.n	8004e20 <memmove+0x18>
	...

08004e30 <_free_r>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	0005      	movs	r5, r0
 8004e34:	2900      	cmp	r1, #0
 8004e36:	d010      	beq.n	8004e5a <_free_r+0x2a>
 8004e38:	1f0c      	subs	r4, r1, #4
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da00      	bge.n	8004e42 <_free_r+0x12>
 8004e40:	18e4      	adds	r4, r4, r3
 8004e42:	0028      	movs	r0, r5
 8004e44:	f000 f918 	bl	8005078 <__malloc_lock>
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <_free_r+0x90>)
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <_free_r+0x2c>
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	6014      	str	r4, [r2, #0]
 8004e54:	0028      	movs	r0, r5
 8004e56:	f000 f917 	bl	8005088 <__malloc_unlock>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x42>
 8004e60:	6821      	ldr	r1, [r4, #0]
 8004e62:	1860      	adds	r0, r4, r1
 8004e64:	4283      	cmp	r3, r0
 8004e66:	d1f3      	bne.n	8004e50 <_free_r+0x20>
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	1841      	adds	r1, r0, r1
 8004e6e:	6021      	str	r1, [r4, #0]
 8004e70:	e7ee      	b.n	8004e50 <_free_r+0x20>
 8004e72:	001a      	movs	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <_free_r+0x4e>
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	d9f9      	bls.n	8004e72 <_free_r+0x42>
 8004e7e:	6811      	ldr	r1, [r2, #0]
 8004e80:	1850      	adds	r0, r2, r1
 8004e82:	42a0      	cmp	r0, r4
 8004e84:	d10b      	bne.n	8004e9e <_free_r+0x6e>
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	1809      	adds	r1, r1, r0
 8004e8a:	1850      	adds	r0, r2, r1
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	4283      	cmp	r3, r0
 8004e90:	d1e0      	bne.n	8004e54 <_free_r+0x24>
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	1841      	adds	r1, r0, r1
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	6053      	str	r3, [r2, #4]
 8004e9c:	e7da      	b.n	8004e54 <_free_r+0x24>
 8004e9e:	42a0      	cmp	r0, r4
 8004ea0:	d902      	bls.n	8004ea8 <_free_r+0x78>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	e7d5      	b.n	8004e54 <_free_r+0x24>
 8004ea8:	6821      	ldr	r1, [r4, #0]
 8004eaa:	1860      	adds	r0, r4, r1
 8004eac:	4283      	cmp	r3, r0
 8004eae:	d103      	bne.n	8004eb8 <_free_r+0x88>
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	1841      	adds	r1, r0, r1
 8004eb6:	6021      	str	r1, [r4, #0]
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	6054      	str	r4, [r2, #4]
 8004ebc:	e7ca      	b.n	8004e54 <_free_r+0x24>
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	20000170 	.word	0x20000170

08004ec4 <sbrk_aligned>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4e0f      	ldr	r6, [pc, #60]	; (8004f04 <sbrk_aligned+0x40>)
 8004ec8:	000d      	movs	r5, r1
 8004eca:	6831      	ldr	r1, [r6, #0]
 8004ecc:	0004      	movs	r4, r0
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	d102      	bne.n	8004ed8 <sbrk_aligned+0x14>
 8004ed2:	f000 f8bf 	bl	8005054 <_sbrk_r>
 8004ed6:	6030      	str	r0, [r6, #0]
 8004ed8:	0029      	movs	r1, r5
 8004eda:	0020      	movs	r0, r4
 8004edc:	f000 f8ba 	bl	8005054 <_sbrk_r>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d00a      	beq.n	8004efa <sbrk_aligned+0x36>
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	1cc5      	adds	r5, r0, #3
 8004ee8:	439d      	bics	r5, r3
 8004eea:	42a8      	cmp	r0, r5
 8004eec:	d007      	beq.n	8004efe <sbrk_aligned+0x3a>
 8004eee:	1a29      	subs	r1, r5, r0
 8004ef0:	0020      	movs	r0, r4
 8004ef2:	f000 f8af 	bl	8005054 <_sbrk_r>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d101      	bne.n	8004efe <sbrk_aligned+0x3a>
 8004efa:	2501      	movs	r5, #1
 8004efc:	426d      	negs	r5, r5
 8004efe:	0028      	movs	r0, r5
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	20000174 	.word	0x20000174

08004f08 <_malloc_r>:
 8004f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	1ccb      	adds	r3, r1, #3
 8004f0e:	4393      	bics	r3, r2
 8004f10:	3308      	adds	r3, #8
 8004f12:	0006      	movs	r6, r0
 8004f14:	001f      	movs	r7, r3
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	d232      	bcs.n	8004f80 <_malloc_r+0x78>
 8004f1a:	270c      	movs	r7, #12
 8004f1c:	42b9      	cmp	r1, r7
 8004f1e:	d831      	bhi.n	8004f84 <_malloc_r+0x7c>
 8004f20:	0030      	movs	r0, r6
 8004f22:	f000 f8a9 	bl	8005078 <__malloc_lock>
 8004f26:	4d32      	ldr	r5, [pc, #200]	; (8004ff0 <_malloc_r+0xe8>)
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	001c      	movs	r4, r3
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	d12e      	bne.n	8004f8e <_malloc_r+0x86>
 8004f30:	0039      	movs	r1, r7
 8004f32:	0030      	movs	r0, r6
 8004f34:	f7ff ffc6 	bl	8004ec4 <sbrk_aligned>
 8004f38:	0004      	movs	r4, r0
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d11e      	bne.n	8004f7c <_malloc_r+0x74>
 8004f3e:	682c      	ldr	r4, [r5, #0]
 8004f40:	0025      	movs	r5, r4
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	d14a      	bne.n	8004fdc <_malloc_r+0xd4>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	0029      	movs	r1, r5
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	0030      	movs	r0, r6
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f000 f880 	bl	8005054 <_sbrk_r>
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	4283      	cmp	r3, r0
 8004f58:	d143      	bne.n	8004fe2 <_malloc_r+0xda>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	3703      	adds	r7, #3
 8004f5e:	1aff      	subs	r7, r7, r3
 8004f60:	2303      	movs	r3, #3
 8004f62:	439f      	bics	r7, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	2f0c      	cmp	r7, #12
 8004f68:	d200      	bcs.n	8004f6c <_malloc_r+0x64>
 8004f6a:	270c      	movs	r7, #12
 8004f6c:	0039      	movs	r1, r7
 8004f6e:	0030      	movs	r0, r6
 8004f70:	f7ff ffa8 	bl	8004ec4 <sbrk_aligned>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d034      	beq.n	8004fe2 <_malloc_r+0xda>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	19df      	adds	r7, r3, r7
 8004f7c:	6027      	str	r7, [r4, #0]
 8004f7e:	e013      	b.n	8004fa8 <_malloc_r+0xa0>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dacb      	bge.n	8004f1c <_malloc_r+0x14>
 8004f84:	230c      	movs	r3, #12
 8004f86:	2500      	movs	r5, #0
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	0028      	movs	r0, r5
 8004f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	1bd1      	subs	r1, r2, r7
 8004f92:	d420      	bmi.n	8004fd6 <_malloc_r+0xce>
 8004f94:	290b      	cmp	r1, #11
 8004f96:	d917      	bls.n	8004fc8 <_malloc_r+0xc0>
 8004f98:	19e2      	adds	r2, r4, r7
 8004f9a:	6027      	str	r7, [r4, #0]
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d111      	bne.n	8004fc4 <_malloc_r+0xbc>
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	6053      	str	r3, [r2, #4]
 8004fa8:	0030      	movs	r0, r6
 8004faa:	0025      	movs	r5, r4
 8004fac:	f000 f86c 	bl	8005088 <__malloc_unlock>
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	350b      	adds	r5, #11
 8004fb4:	1d23      	adds	r3, r4, #4
 8004fb6:	4395      	bics	r5, r2
 8004fb8:	1aea      	subs	r2, r5, r3
 8004fba:	429d      	cmp	r5, r3
 8004fbc:	d0e5      	beq.n	8004f8a <_malloc_r+0x82>
 8004fbe:	1b5b      	subs	r3, r3, r5
 8004fc0:	50a3      	str	r3, [r4, r2]
 8004fc2:	e7e2      	b.n	8004f8a <_malloc_r+0x82>
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e7ec      	b.n	8004fa2 <_malloc_r+0x9a>
 8004fc8:	6862      	ldr	r2, [r4, #4]
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	d101      	bne.n	8004fd2 <_malloc_r+0xca>
 8004fce:	602a      	str	r2, [r5, #0]
 8004fd0:	e7ea      	b.n	8004fa8 <_malloc_r+0xa0>
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	e7e8      	b.n	8004fa8 <_malloc_r+0xa0>
 8004fd6:	0023      	movs	r3, r4
 8004fd8:	6864      	ldr	r4, [r4, #4]
 8004fda:	e7a7      	b.n	8004f2c <_malloc_r+0x24>
 8004fdc:	002c      	movs	r4, r5
 8004fde:	686d      	ldr	r5, [r5, #4]
 8004fe0:	e7af      	b.n	8004f42 <_malloc_r+0x3a>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	0030      	movs	r0, r6
 8004fe6:	6033      	str	r3, [r6, #0]
 8004fe8:	f000 f84e 	bl	8005088 <__malloc_unlock>
 8004fec:	e7cd      	b.n	8004f8a <_malloc_r+0x82>
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	20000170 	.word	0x20000170

08004ff4 <_realloc_r>:
 8004ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff6:	0007      	movs	r7, r0
 8004ff8:	000e      	movs	r6, r1
 8004ffa:	0014      	movs	r4, r2
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d105      	bne.n	800500c <_realloc_r+0x18>
 8005000:	0011      	movs	r1, r2
 8005002:	f7ff ff81 	bl	8004f08 <_malloc_r>
 8005006:	0005      	movs	r5, r0
 8005008:	0028      	movs	r0, r5
 800500a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800500c:	2a00      	cmp	r2, #0
 800500e:	d103      	bne.n	8005018 <_realloc_r+0x24>
 8005010:	f7ff ff0e 	bl	8004e30 <_free_r>
 8005014:	0025      	movs	r5, r4
 8005016:	e7f7      	b.n	8005008 <_realloc_r+0x14>
 8005018:	f000 f83e 	bl	8005098 <_malloc_usable_size_r>
 800501c:	9001      	str	r0, [sp, #4]
 800501e:	4284      	cmp	r4, r0
 8005020:	d803      	bhi.n	800502a <_realloc_r+0x36>
 8005022:	0035      	movs	r5, r6
 8005024:	0843      	lsrs	r3, r0, #1
 8005026:	42a3      	cmp	r3, r4
 8005028:	d3ee      	bcc.n	8005008 <_realloc_r+0x14>
 800502a:	0021      	movs	r1, r4
 800502c:	0038      	movs	r0, r7
 800502e:	f7ff ff6b 	bl	8004f08 <_malloc_r>
 8005032:	1e05      	subs	r5, r0, #0
 8005034:	d0e8      	beq.n	8005008 <_realloc_r+0x14>
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	0022      	movs	r2, r4
 800503a:	429c      	cmp	r4, r3
 800503c:	d900      	bls.n	8005040 <_realloc_r+0x4c>
 800503e:	001a      	movs	r2, r3
 8005040:	0031      	movs	r1, r6
 8005042:	0028      	movs	r0, r5
 8005044:	f7ff fed7 	bl	8004df6 <memcpy>
 8005048:	0031      	movs	r1, r6
 800504a:	0038      	movs	r0, r7
 800504c:	f7ff fef0 	bl	8004e30 <_free_r>
 8005050:	e7da      	b.n	8005008 <_realloc_r+0x14>
	...

08005054 <_sbrk_r>:
 8005054:	2300      	movs	r3, #0
 8005056:	b570      	push	{r4, r5, r6, lr}
 8005058:	4d06      	ldr	r5, [pc, #24]	; (8005074 <_sbrk_r+0x20>)
 800505a:	0004      	movs	r4, r0
 800505c:	0008      	movs	r0, r1
 800505e:	602b      	str	r3, [r5, #0]
 8005060:	f7fc fcea 	bl	8001a38 <_sbrk>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d103      	bne.n	8005070 <_sbrk_r+0x1c>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d000      	beq.n	8005070 <_sbrk_r+0x1c>
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	20000178 	.word	0x20000178

08005078 <__malloc_lock>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <__malloc_lock+0xc>)
 800507c:	f000 f814 	bl	80050a8 <__retarget_lock_acquire_recursive>
 8005080:	bd10      	pop	{r4, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	2000017c 	.word	0x2000017c

08005088 <__malloc_unlock>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4802      	ldr	r0, [pc, #8]	; (8005094 <__malloc_unlock+0xc>)
 800508c:	f000 f80d 	bl	80050aa <__retarget_lock_release_recursive>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	2000017c 	.word	0x2000017c

08005098 <_malloc_usable_size_r>:
 8005098:	1f0b      	subs	r3, r1, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	1f18      	subs	r0, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da01      	bge.n	80050a6 <_malloc_usable_size_r+0xe>
 80050a2:	580b      	ldr	r3, [r1, r0]
 80050a4:	18c0      	adds	r0, r0, r3
 80050a6:	4770      	bx	lr

080050a8 <__retarget_lock_acquire_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_release_recursive>:
 80050aa:	4770      	bx	lr

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr


LedToggle0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800027c  0800027c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800027c  0800027c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800027c  0800027c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800027c  0800027c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800027c  0800027c  0001027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000280  08000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000284  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000288  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000288  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f75  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d8  00000000  00000000  00020fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00021650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000105d  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000195e  00000000  00000000  00022835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090316  00000000  00000000  00024193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b44a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000520  00000000  00000000  000b44fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000264 	.word	0x08000264

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000264 	.word	0x08000264

08000104 <main>:

/* (1U<<10) Set bit 10 to 1
 * &=~(1U<<11) Set bit 11 to 0
 *  */
int main(void)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
/* 1. Enable clock access to GPIOA */
//RCC_AHBEN_R |= GPIOAEN;
	RCC_IOPEN_R |= GPIOAEN;
 800010a:	4b14      	ldr	r3, [pc, #80]	; (800015c <main+0x58>)
 800010c:	681a      	ldr	r2, [r3, #0]
 800010e:	4b13      	ldr	r3, [pc, #76]	; (800015c <main+0x58>)
 8000110:	2101      	movs	r1, #1
 8000112:	430a      	orrs	r2, r1
 8000114:	601a      	str	r2, [r3, #0]

/* 2. Set PA5 pin as out put */
GPIOA_MODER_R |= (1U<<10); // Set bit 10 to 1
 8000116:	23a0      	movs	r3, #160	; 0xa0
 8000118:	05db      	lsls	r3, r3, #23
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	23a0      	movs	r3, #160	; 0xa0
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	2180      	movs	r1, #128	; 0x80
 8000122:	00c9      	lsls	r1, r1, #3
 8000124:	430a      	orrs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]
GPIOA_MODER_R &=~(1U<<11); // Set bit 11 to 0
 8000128:	23a0      	movs	r3, #160	; 0xa0
 800012a:	05db      	lsls	r3, r3, #23
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	23a0      	movs	r3, #160	; 0xa0
 8000130:	05db      	lsls	r3, r3, #23
 8000132:	490b      	ldr	r1, [pc, #44]	; (8000160 <main+0x5c>)
 8000134:	400a      	ands	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
while(1)
{
/* Set PA5 high */
//GPIOA_OD_R |= LED_PIN;
/*Toggle PA5 */
GPIOA_OD_R ^= LED_PIN;
 8000138:	4b0a      	ldr	r3, [pc, #40]	; (8000164 <main+0x60>)
 800013a:	681a      	ldr	r2, [r3, #0]
 800013c:	4b09      	ldr	r3, [pc, #36]	; (8000164 <main+0x60>)
 800013e:	2120      	movs	r1, #32
 8000140:	404a      	eors	r2, r1
 8000142:	601a      	str	r2, [r3, #0]
for(int i=0; i<100000;i++);
 8000144:	2300      	movs	r3, #0
 8000146:	607b      	str	r3, [r7, #4]
 8000148:	e002      	b.n	8000150 <main+0x4c>
 800014a:	687b      	ldr	r3, [r7, #4]
 800014c:	3301      	adds	r3, #1
 800014e:	607b      	str	r3, [r7, #4]
 8000150:	687b      	ldr	r3, [r7, #4]
 8000152:	4a05      	ldr	r2, [pc, #20]	; (8000168 <main+0x64>)
 8000154:	4293      	cmp	r3, r2
 8000156:	ddf8      	ble.n	800014a <main+0x46>
GPIOA_OD_R ^= LED_PIN;
 8000158:	e7ee      	b.n	8000138 <main+0x34>
 800015a:	46c0      	nop			; (mov r8, r8)
 800015c:	40021034 	.word	0x40021034
 8000160:	fffff7ff 	.word	0xfffff7ff
 8000164:	50000014 	.word	0x50000014
 8000168:	0001869f 	.word	0x0001869f

0800016c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000170:	e7fe      	b.n	8000170 <NMI_Handler+0x4>

08000172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000176:	e7fe      	b.n	8000176 <HardFault_Handler+0x4>

08000178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800017c:	46c0      	nop			; (mov r8, r8)
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}

08000182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000190:	f000 f832 	bl	80001f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000194:	46c0      	nop			; (mov r8, r8)
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800019a:	b580      	push	{r7, lr}
 800019c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800019e:	46c0      	nop			; (mov r8, r8)
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a4:	480d      	ldr	r0, [pc, #52]	; (80001dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80001a8:	f7ff fff7 	bl	800019a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ae:	490d      	ldr	r1, [pc, #52]	; (80001e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b0:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <LoopForever+0xe>)
  movs r3, #0
 80001b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001b4:	e002      	b.n	80001bc <LoopCopyDataInit>

080001b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ba:	3304      	adds	r3, #4

080001bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c0:	d3f9      	bcc.n	80001b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001c2:	4a0a      	ldr	r2, [pc, #40]	; (80001ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80001c4:	4c0a      	ldr	r4, [pc, #40]	; (80001f0 <LoopForever+0x16>)
  movs r3, #0
 80001c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001c8:	e001      	b.n	80001ce <LoopFillZerobss>

080001ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001cc:	3204      	adds	r2, #4

080001ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d0:	d3fb      	bcc.n	80001ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001d2:	f000 f823 	bl	800021c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80001d6:	f7ff ff95 	bl	8000104 <main>

080001da <LoopForever>:

LoopForever:
  b LoopForever
 80001da:	e7fe      	b.n	80001da <LoopForever>
  ldr   r0, =_estack
 80001dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80001e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001e8:	08000284 	.word	0x08000284
  ldr r2, =_sbss
 80001ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80001f0:	20000024 	.word	0x20000024

080001f4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001f4:	e7fe      	b.n	80001f4 <ADC1_COMP_IRQHandler>
	...

080001f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <HAL_IncTick+0x1c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	001a      	movs	r2, r3
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <HAL_IncTick+0x20>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	18d2      	adds	r2, r2, r3
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <HAL_IncTick+0x20>)
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	46c0      	nop			; (mov r8, r8)
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	20000000 	.word	0x20000000
 8000218:	20000020 	.word	0x20000020

0800021c <__libc_init_array>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2600      	movs	r6, #0
 8000220:	4d0c      	ldr	r5, [pc, #48]	; (8000254 <__libc_init_array+0x38>)
 8000222:	4c0d      	ldr	r4, [pc, #52]	; (8000258 <__libc_init_array+0x3c>)
 8000224:	1b64      	subs	r4, r4, r5
 8000226:	10a4      	asrs	r4, r4, #2
 8000228:	42a6      	cmp	r6, r4
 800022a:	d109      	bne.n	8000240 <__libc_init_array+0x24>
 800022c:	2600      	movs	r6, #0
 800022e:	f000 f819 	bl	8000264 <_init>
 8000232:	4d0a      	ldr	r5, [pc, #40]	; (800025c <__libc_init_array+0x40>)
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <__libc_init_array+0x44>)
 8000236:	1b64      	subs	r4, r4, r5
 8000238:	10a4      	asrs	r4, r4, #2
 800023a:	42a6      	cmp	r6, r4
 800023c:	d105      	bne.n	800024a <__libc_init_array+0x2e>
 800023e:	bd70      	pop	{r4, r5, r6, pc}
 8000240:	00b3      	lsls	r3, r6, #2
 8000242:	58eb      	ldr	r3, [r5, r3]
 8000244:	4798      	blx	r3
 8000246:	3601      	adds	r6, #1
 8000248:	e7ee      	b.n	8000228 <__libc_init_array+0xc>
 800024a:	00b3      	lsls	r3, r6, #2
 800024c:	58eb      	ldr	r3, [r5, r3]
 800024e:	4798      	blx	r3
 8000250:	3601      	adds	r6, #1
 8000252:	e7f2      	b.n	800023a <__libc_init_array+0x1e>
 8000254:	0800027c 	.word	0x0800027c
 8000258:	0800027c 	.word	0x0800027c
 800025c:	0800027c 	.word	0x0800027c
 8000260:	08000280 	.word	0x08000280

08000264 <_init>:
 8000264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026a:	bc08      	pop	{r3}
 800026c:	469e      	mov	lr, r3
 800026e:	4770      	bx	lr

08000270 <_fini>:
 8000270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000276:	bc08      	pop	{r3}
 8000278:	469e      	mov	lr, r3
 800027a:	4770      	bx	lr
